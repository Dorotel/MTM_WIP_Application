name: Online Refactor Workflow

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

jobs:
  trigger-refactor:
    if: contains(github.event.issue.title, 'Online Refactor') || contains(github.event.comment.body, 'Online Refactor')
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Extract file path
        id: extract-path
        shell: bash
        run: |
          ISSUE_TITLE="${{ github.event.issue.title || '' }}"
          COMMENT_BODY="${{ github.event.comment.body || '' }}"
          
          # Extract file path from title or comment
          if [[ "$ISSUE_TITLE" =~ Online\ Refactor\ (.+) ]]; then
            FILE_PATH="${BASH_REMATCH[1]}"
          elif [[ "$COMMENT_BODY" =~ Online\ Refactor\ (.+) ]]; then
            FILE_PATH="${BASH_REMATCH[1]}"
          else
            echo "No valid file path found in title or comment"
            exit 1
          fi
          
          echo "file_path=$FILE_PATH" >> $GITHUB_OUTPUT
          echo "Found file path: $FILE_PATH"
      
      - name: Validate file exists
        shell: bash
        run: |
          FILE_PATH="${{ steps.extract-path.outputs.file_path }}"
          if [ ! -f "$FILE_PATH" ]; then
            echo "❌ File $FILE_PATH does not exist"
            exit 1
          fi
          echo "✅ File $FILE_PATH exists"
          
      - name: Generate Master Refactor Prompt
        id: generate-prompt
        shell: bash
        run: |
          FILE_PATH="${{ steps.extract-path.outputs.file_path }}"
          DATE=$(date +%Y%m%d)
          FILE_STEM=$(basename "$FILE_PATH" .cs)
          CURRENT_UTC=$(date -u +"%Y-%m-%d %H:%M:%S")
          
          # Create the master refactor prompt
          cat > master_refactor_prompt.md << EOF
          # MASTER REFRACTOR PROMPT (Online Mode)
          
          Refactor target file online with full dependency compliance and proper code organization.
          
          ## Meta
          - GeneratedFor: ${{ github.repository_owner }}
          - GeneratedAtUtc: $CURRENT_UTC
          - RepoDocs: Documentation/Copilot Files/21-refactoring-workflow.md
          - IssueNumber: #${{ github.event.issue.number }}
          
          ## Target
          - File to refactor: \`$FILE_PATH\`
          - Base branch: ${{ github.event.repository.default_branch }}
          - Desired feature branch name: \`refactor/$FILE_STEM/$DATE\`
          
          ## Scope rules
          - Perform recursive dependency analysis:
            - From the target file → methods it calls (upstream) and methods that call it (downstream)
            - Recurse until closure or the threshold: MaxFiles=500, MaxMethods=500
          - Include: UI Controls, DAOs, Helpers, Core, Services, Models/DTOs, Extensions, Stored Procedures
          - Exclude by default: third-party packages, BCL, generated *.Designer.cs
          
          ## Standards to enforce
          See Documentation/Copilot Files/21-refactoring-workflow.md for complete standards including:
          - **Region Organization**: Methods grouped in proper #regions following standard order
          - **Method Ordering**: Public → Protected → Private → Static within each region
          - DAO pattern with DaoResult<T> and Helper_Database_StoredProcedure
          - Null safety and comprehensive error handling
          - Progress reporting for UI database operations
          - Theme and privilege compliance
          
          ## Before any code changes
          **MUST produce and post a Pre-Refactor Report first:**
          - Title: REFRACTOR_PREVIEW_REPORT
          - Include dependency graph, compliance matrix, and region organization analysis
          - Output in both Markdown and JSON format (refactorReportVersion: 2)
          - **WAIT for explicit "Proceed" approval before making changes**
          
          ## Implementation plan (after approval)
          1. Create feature branch: \`refactor/$FILE_STEM/$DATE\`
          2. Apply atomic commits with region reorganization first
          3. Update documentation only if behavior changes
          4. Provide rollback instructions
          
          ## Acceptance criteria
          - All methods organized in proper regions with correct ordering
          - Build succeeds and compliance issues resolved
          - DaoResult<T> usage ensures non-null data payloads
          
          **Please acknowledge by posting the Pre-Refactor Report first, then pause for approval.**
          EOF
          
          echo "Generated master refactor prompt for $FILE_PATH"
          
      - name: Post Master Refactor Prompt
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const promptContent = fs.readFileSync('master_refactor_prompt.md', 'utf8');
            
            const comment = `## 🚀 Master Refactor Prompt Generated
            
            The following prompt has been automatically generated for refactoring \`${{ steps.extract-path.outputs.file_path }}\`:
            
            ---
            
            ${promptContent}
            
            ---
            
            **Next Steps:**
            1. Review the generated prompt above
            2. Copy and use it with your preferred AI assistant
            3. The assistant will first generate a Pre-Refactor Report
            4. Review and approve the report before proceeding with changes
            
            *This comment was auto-generated by the Online Refactor workflow.*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Add refactor labels
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['online-refactor', 'automated-prompt']
            });
