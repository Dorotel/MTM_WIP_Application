{
  "AnalysisTimestamp": "2025-08-16T17:49:38.3284993-05:00",
  "ApplicationVersion": "5.0.1.2",
  "AnalysisVersion": "1.0.0",
  "UIAnalysis": {
    "Forms": [
      {
        "Name": "ApplicationAnalyzerForm",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Forms\\Development\\ApplicationAnalyzerForm.cs",
        "Namespace": "MTM_Inventory_Application.Forms.Development",
        "BaseClass": "Form",
        "Controls": [],
        "Events": [
          "button_RunFullAnalysis_Click",
          "runFullAnalysisToolStripMenuItem_Click",
          "exportToJSONToolStripMenuItem_Click",
          "exportToMarkdownToolStripMenuItem_Click",
          "exportToHTMLToolStripMenuItem_Click",
          "exportSummaryToolStripMenuItem_Click",
          "closeToolStripMenuItem_Click",
          "aboutToolStripMenuItem_Click"
        ],
        "Methods": [
          "SetProgressControls",
          "InitializeUI",
          "ConfigureDataGridViews",
          "RunFullAnalysisAsync",
          "PopulateAnalysisResultsAsync",
          "PopulateSummaryTabAsync",
          "PopulateUIAnalysisTab",
          "PopulateDatabaseAnalysisTab",
          "PopulateBusinessLogicTab",
          "PopulateOtherTabsAsync",
          "PopulateRawDataTabAsync",
          "UpdateUIState",
          "button_RunFullAnalysis_Click",
          "runFullAnalysisToolStripMenuItem_Click",
          "treeView_UIStructure_AfterSelect",
          "treeView_DatabaseStructure_AfterSelect",
          "treeView_BusinessLogic_AfterSelect",
          "exportToJSONToolStripMenuItem_Click",
          "exportToMarkdownToolStripMenuItem_Click",
          "exportToHTMLToolStripMenuItem_Click",
          "exportSummaryToolStripMenuItem_Click",
          "closeToolStripMenuItem_Click",
          "aboutToolStripMenuItem_Click",
          "DataGridView_DataError_Suppress",
          "ExportToFileAsync",
          "ShowFormDetails",
          "ShowControlDetails",
          "ShowTableDetails",
          "ShowStoredProcedureDetails",
          "ShowClassDetails",
          "ShowServiceDetails",
          "ShowHelperDetails",
          "GenerateThemingAnalysisText",
          "GenerateErrorHandlingAnalysisText",
          "GenerateEnvironmentAnalysisText",
          "Dispose"
        ],
        "Properties": {
          "CurrentAnalysis": "Model_ApplicationAnalysis?"
        },
        "Dependencies": [
          "System.Data",
          "System.Text",
          "MTM_Inventory_Application.Core",
          "MTM_Inventory_Application.Data",
          "MTM_Inventory_Application.Helpers",
          "MTM_Inventory_Application.Logging",
          "MTM_Inventory_Application.Models",
          "MTM_Inventory_Application.Services"
        ],
        "Purpose": "/// Comprehensive application analysis tool for MTM WIP Application\r\n    /// Provides detailed analysis for MAUI migration planning\r\n    ///"
      },
      {
        "Name": "DebugDashboardForm",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Forms\\Development\\DebugDashboardForm.cs",
        "Namespace": "MTM_Inventory_Application.Forms.Development",
        "BaseClass": "Form",
        "Controls": [],
        "Events": [
          "BtnStartStop_Click",
          "BtnClearLog_Click",
          "BtnSaveLog_Click"
        ],
        "Methods": [
          "InitializeComponent",
          "CreateConfigurationPanel",
          "CreateDebugOutputPanel",
          "CreateStatusPanel",
          "CmbDebugLevel_SelectedIndexChanged",
          "ChkTraceDatabase_CheckedChanged",
          "ChkTraceBusinessLogic_CheckedChanged",
          "ChkTraceUIActions_CheckedChanged",
          "ChkTracePerformance_CheckedChanged",
          "BtnStartStop_Click",
          "BtnClearLog_Click",
          "BtnSaveLog_Click",
          "RefreshTimer_Tick",
          "LoadCurrentConfiguration",
          "UpdateStatusDisplay",
          "UpdateTextBox",
          "OnLoad",
          "OnFormClosed"
        ],
        "Properties": {},
        "Dependencies": [
          "System",
          "System.Collections.Generic",
          "System.Drawing",
          "System.IO",
          "System.Linq",
          "System.Windows.Forms",
          "MTM_Inventory_Application.Models",
          "MTM_Inventory_Application.Services",
          "System.Windows.Forms.Timer"
        ],
        "Purpose": "/// Real-time debugging dashboard for monitoring application activity\r\n    /// Provides comprehensive visibility into actions, variables, data flow, and business logic\r\n    ///"
      },
      {
        "Name": "MAUIMigrationAssessmentForm",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Forms\\Development\\MAUIMigrationAssessmentForm.cs",
        "Namespace": "MTM_Inventory_Application.Forms.Development",
        "BaseClass": "Form",
        "Controls": [],
        "Events": [
          "Button_GenerateResults_Click",
          "Button_ExportResults_Click",
          "Button_Reset_Click"
        ],
        "Methods": [
          "SetProgressControls",
          "InitializeAssessment",
          "SetupCategoryTabs",
          "CreateCategoryPanel",
          "CreateQuestionPanel",
          "CreateAnswerControl",
          "CreateYesNoControl",
          "CreateMultipleChoiceControl",
          "CreateTextControl",
          "CreateNumericControl",
          "GetCategoryDescription",
          "LoadQuestion",
          "UpdateNavigationButtons",
          "UpdateProgress",
          "Button_GenerateResults_Click",
          "Button_ExportResults_Click",
          "Button_Reset_Click",
          "ApplyAnswersToAssessment",
          "ApplyAnswerToProperty",
          "ApplyUIArchitectureAnswer",
          "ApplyDependencyAnswer",
          "ApplyBusinessLogicAnswer",
          "ShowResults",
          "CreateResultsPanel",
          "UpdateResultsDisplay",
          "ExportResults",
          "ResetAssessment",
          "ResetTabControls",
          "ResetControlRecursive",
          "SetAnswerAndUpdateProgress",
          "ProcessCmdKey"
        ],
        "Properties": {
          "Assessment": "Model_MAUIMigrationAssessment",
          "Results": "Model_AssessmentResults?"
        },
        "Dependencies": [
          "System.ComponentModel",
          "MTM_Inventory_Application.Core",
          "MTM_Inventory_Application.Helpers",
          "MTM_Inventory_Application.Logging",
          "MTM_Inventory_Application.Models",
          "MTM_Inventory_Application.Services"
        ],
        "Purpose": "/// Interactive MAUI Migration Assessment tool\r\n    /// Provides questionnaire-based evaluation of application readiness for MAUI migration\r\n    ///"
      },
      {
        "Name": "RepoComplianceScannerForm",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Forms\\Development\\RepoComplianceScannerForm.cs",
        "Namespace": "MTM_Inventory_Application.Forms.Development",
        "BaseClass": "Form",
        "Controls": [],
        "Events": [
          "Button_Run_Click",
          "Button_Cancel_Click",
          "Button_ExportMarkdown_Click",
          "Button_ExportJson_Click",
          "Button_Clear_Click",
          "Button_ApplyFilters_Click",
          "Button_ClearFilters_Click",
          "CtxCopyPathLine_Click",
          "CtxCopySnippet_Click"
        ],
        "Methods": [
          "SetProgressControls",
          "RunScanAsync",
          "PopulateSummaryTab",
          "PopulateIssuesTab",
          "PopulateFilesTab",
          "ApplyFilters",
          "ProcessCmdKey",
          "Button_Run_Click",
          "Button_Cancel_Click",
          "Button_ExportMarkdown_Click",
          "Button_ExportJson_Click",
          "Button_Clear_Click",
          "Button_ApplyFilters_Click",
          "Button_ClearFilters_Click",
          "DgvIssues_CellDoubleClick",
          "CtxCopyPathLine_Click",
          "CtxCopySnippet_Click",
          "InitializeRuntimeUI",
          "ToRelative",
          "ToggleRunState",
          "TryOpenAtLine",
          "Dispose"
        ],
        "Properties": {
          "CurrentReport": "Model_RepoComplianceReport?"
        },
        "Dependencies": [
          "MTM_Inventory_Application.Core",
          "MTM_Inventory_Application.Helpers",
          "MTM_Inventory_Application.Logging",
          "MTM_Inventory_Application.Models",
          "MTM_Inventory_Application.Services"
        ],
        "Purpose": "/// Scans the repository for compliance with README and Copilot docs.\r\n    /// Generates a Markdown/JSON report of issues.\r\n    ///"
      },
      {
        "Name": "EnhancedErrorDialog",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Forms\\ErrorDialog\\EnhancedErrorDialog.cs",
        "Namespace": "MTM_Inventory_Application.Forms.ErrorDialog",
        "BaseClass": "Form",
        "Controls": [],
        "Events": [
          "ButtonRetry_Click",
          "ButtonCopyDetails_Click",
          "ButtonReportIssue_Click",
          "ButtonViewLogs_Click",
          "ButtonClose_Click"
        ],
        "Methods": [
          "InitializeErrorDialog",
          "SetTitleAndIcon",
          "PopulatePlainEnglishSummary",
          "PopulateTechnicalDetails",
          "BuildCallStackTree",
          "ExpandNodeRecursively",
          "GetMethodIcon",
          "ConfigureActionButtons",
          "UpdateStatusBar",
          "GetSeverityDisplay",
          "WireUpEvents",
          "ButtonRetry_Click",
          "ButtonCopyDetails_Click",
          "ButtonReportIssue_Click",
          "ButtonViewLogs_Click",
          "ButtonClose_Click",
          "ApplyTheme",
          "ProcessCmdKey"
        ],
        "Properties": {
          "ErrorDialogResult": "DialogResult",
          "ShouldRetry": "bool"
        },
        "Dependencies": [
          "System",
          "System.Collections.Generic",
          "System.Diagnostics",
          "System.Drawing",
          "System.Linq",
          "System.Runtime.CompilerServices",
          "System.Text",
          "System.Windows.Forms",
          "MTM_Inventory_Application.Core",
          "MTM_Inventory_Application.Logging",
          "MTM_Inventory_Application.Models",
          "MTM_Inventory_Application.Services"
        ],
        "Purpose": ""
      },
      {
        "Name": "MainForm",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Forms\\MainForm\\MainForm.cs",
        "Namespace": "MTM_Inventory_Application.Forms.MainForm",
        "BaseClass": "Form",
        "Controls": [],
        "Events": [
          "MainForm_MenuStrip_File_Settings_Click",
          "MainForm_MenuStrip_Exit_Click",
          "MainForm_MenuStrip_View_PersonalHistory_Click",
          "MainForm_MenuStrip_Development_DebugDashboard_Click",
          "MainForm_MenuStrip_Development_ApplicationAnalyzer_Click",
          "MainForm_MenuStrip_Development_MAUIMigrationAssessment_Click",
          "MainForm_MenuStrip_Development_Conversion_Click",
          "MainForm_MenuStrip_Help_GettingStarted_Click",
          "MainForm_MenuStrip_Help_UserGuide_Click",
          "MainForm_MenuStrip_Help_KeyboardShortcuts_Click",
          "MainForm_MenuStrip_Help_About_Click",
          "viewerToolStripMenuItem_Click",
          "repoComplianceScannerToolStripMenuItem_Click"
        ],
        "Methods": [
          "InitializeFormTitle",
          "GetUserPrivilegeDisplayText",
          "InitializeStartupComponents",
          "WireUpFormShownEvent",
          "ConfigureDevelopmentMenuVisibility",
          "SetInitialFocusToInventoryTab",
          "InitializeProgressControl",
          "InitializeUserControlsProgress",
          "UpdateQuickButtonsToggleTextForAllTabs",
          "UpdateToggleButtonText",
          "MainForm_OnStartup_WireUpEvents",
          "MainForm_OnStartup_WireUpDpiChangeEvents",
          "MainForm_DpiChanged",
          "MainForm_OnStartup_GetUserFullNameAsync",
          "MainForm_OnStartup_SetupConnectionStrengthControl",
          "MainForm_TabControl_Selecting",
          "MainForm_TabControl_SelectedIndexChanged",
          "ResetAllUserControlsAsync",
          "InvokeResetMethod",
          "SetTabVisibility",
          "SetInventoryTabVisibility",
          "SetRemoveTabVisibility",
          "SetTransferTabVisibility",
          "SetFocusForCurrentTab",
          "ShowTabLoadingProgressAsync",
          "HideTabLoadingProgress",
          "ProcessCmdKey",
          "OnFormClosing",
          "MainForm_MenuStrip_File_Settings_Click",
          "MainForm_MenuStrip_Exit_Click",
          "MainForm_MenuStrip_View_PersonalHistory_Click",
          "MainForm_MenuStrip_Development_DebugDashboard_Click",
          "MainForm_MenuStrip_Development_ApplicationAnalyzer_Click",
          "MainForm_MenuStrip_Development_MAUIMigrationAssessment_Click",
          "MainForm_MenuStrip_Development_Conversion_Click",
          "MainForm_MenuStrip_Help_GettingStarted_Click",
          "MainForm_MenuStrip_Help_UserGuide_Click",
          "MainForm_MenuStrip_Help_KeyboardShortcuts_Click",
          "MainForm_MenuStrip_Help_About_Click",
          "OpenHelpFile",
          "viewerToolStripMenuItem_Click",
          "repoComplianceScannerToolStripMenuItem_Click"
        ],
        "Properties": {
          "ConnectionRecoveryManager": "Service_ConnectionRecoveryManager",
          "ProgressHelper": "Helper_StoredProcedureProgress?"
        },
        "Dependencies": [
          "System.ComponentModel",
          "System.Diagnostics",
          "System.Reflection",
          "Microsoft.Win32",
          "MTM_Inventory_Application.Controls.MainForm",
          "MTM_Inventory_Application.Controls.Shared",
          "MTM_Inventory_Application.Core",
          "MTM_Inventory_Application.Data",
          "MTM_Inventory_Application.Forms.ErrorDialog",
          "MTM_Inventory_Application.Forms.Settings",
          "MTM_Inventory_Application.Helpers",
          "MTM_Inventory_Application.Logging",
          "MTM_Inventory_Application.Models",
          "MTM_Inventory_Application.Services",
          "MySql.Data.MySqlClient",
          "System.Windows.Forms.Timer"
        ],
        "Purpose": ""
      },
      {
        "Name": "SettingsForm",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Forms\\Settings\\SettingsForm.cs",
        "Namespace": "MTM_Inventory_Application.Forms.Settings",
        "BaseClass": "Form",
        "Controls": [],
        "Events": [],
        "Methods": [
          "InitializeCategoryTreeView",
          "InitializeUserControls",
          "InitializeForm",
          "ApplyPrivileges",
          "CategoryTreeView_AfterSelect",
          "ShowPanel",
          "UpdateStatus",
          "OnFormClosing",
          "ShowProgress",
          "UpdateProgress",
          "ShowError",
          "ShowSuccess",
          "HideProgress",
          "ProcessStoredProcedureResult",
          "ProcessStoredProcedureResult"
        ],
        "Properties": {
          "ProgressHelper": "Helper_StoredProcedureProgress"
        },
        "Dependencies": [
          "System.Reflection",
          "MTM_Inventory_Application.Controls.SettingsForm",
          "MTM_Inventory_Application.Core",
          "MTM_Inventory_Application.Models",
          "MTM_Inventory_Application.Helpers",
          "MTM_Inventory_Application.Data",
          "MTM_Inventory_Application.Services"
        ],
        "Purpose": ""
      },
      {
        "Name": "SplashScreenForm",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Forms\\Splash\\SplashScreenForm.cs",
        "Namespace": "MTM_Inventory_Application.Forms.Splash",
        "BaseClass": "Form",
        "Controls": [],
        "Events": [],
        "Methods": [
          "ShowSplash",
          "UpdateProgress",
          "CompleteSplashAsync",
          "ApplyTheme",
          "SetVisibleCore",
          "OnPaintBackground"
        ],
        "Properties": {},
        "Dependencies": [
          "System.Drawing.Imaging",
          "MTM_Inventory_Application.Core",
          "MTM_Inventory_Application.Models",
          "MTM_Inventory_Application.Services"
        ],
        "Purpose": ""
      },
      {
        "Name": "Transactions",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Forms\\Transactions\\Transactions.cs",
        "Namespace": "MTM_Inventory_Application.Forms.Transactions",
        "BaseClass": "Form",
        "Controls": [],
        "Events": [
          "Transactions_Button_SidePanel_Click",
          "Transfer_Button_BranchHistory_Click",
          "Transactions_Button_Print_Click"
        ],
        "Methods": [
          "SetProgressControls",
          "InitializeSmartSearch",
          "InitializeSearchPerformance",
          "LoadTransactionsAsync",
          "DisplaySearchResultsAsync",
          "DisplayGridViewAsync",
          "DisplayChartViewAsync",
          "DisplayTimelineViewAsync",
          "CreateChartViewInDataGrid",
          "CreateTimelineViewInDataGrid",
          "GetTransactionTypeIcon",
          "OnFormLoadAsync",
          "LoadUserCombosAsync",
          "LoadBuildingCombo",
          "LoadPartComboAsync",
          "SetupDateRangeDefaults",
          "WireUpEvents",
          "Transactions_EnableSearchButtonIfValid",
          "Transactions_Button_SidePanel_Click",
          "Transactions_DataGridView_Transactions_SelectionChanged",
          "Transfer_Button_BranchHistory_Click",
          "Transactions_Button_Print_Click",
          "ResetFilters",
          "HandleSmartSearchAsync",
          "BuildSearchTermsDictionary",
          "UpdateAnalyticsDashboardAsync",
          "CalculateTransactionAnalytics",
          "ParseSearchInput",
          "SplitSearchTerms",
          "GetSelectedTransactionTypes",
          "GetSelectedTimeRange",
          "GetSelectedLocations",
          "OnSmartSearchTextChanged",
          "ClearSearchResults",
          "PerformDebouncedSearchAsync",
          "HandleFilterChangeAsync",
          "HandleViewModeChangeAsync",
          "ApplyModernStyling",
          "ApplyModernButtonStyles",
          "ApplyModernButtonStyle",
          "ApplyHeaderGradientWithTheme",
          "ApplyCustomDataGridStyling",
          "ApplyRowStyling",
          "SetupSortCombo",
          "SetupDataGrid",
          "SetupDataGridColumns",
          "SetupHistoryDataGrid",
          "UpdateResultsStatistics",
          "CalculateTotalPages",
          "UpdatePagingButtons",
          "Dispose"
        ],
        "Properties": {
          "CurrentPage": "int",
          "IsAdmin": "bool",
          "DisplayedTransactions": "IReadOnlyList<Model_Transactions>",
          "SearchTerms": "string[]",
          "GeneralTerms": "List<string>",
          "SpecificPartId": "string?",
          "SpecificUser": "string?",
          "SpecificLocation": "string?",
          "SpecificOperation": "string?",
          "SpecificDate": "DateTime?",
          "SpecificQuantity": "int?",
          "ID": "int",
          "TransactionType": "TransactionType",
          "BatchNumber": "string?",
          "PartID": "string?",
          "FromLocation": "string?",
          "ToLocation": "string?",
          "Operation": "string?",
          "Quantity": "int",
          "Notes": "string?",
          "User": "string?",
          "ItemType": "string?",
          "DateTime": "DateTime"
        },
        "Dependencies": [
          "System.ComponentModel",
          "System.Data",
          "System.Text",
          "MySql.Data.MySqlClient",
          "MTM_Inventory_Application.Core",
          "MTM_Inventory_Application.Data",
          "MTM_Inventory_Application.Helpers",
          "MTM_Inventory_Application.Models",
          "System.Drawing.Printing",
          "MTM_Inventory_Application.Controls.Shared",
          "MTM_Inventory_Application.Services",
          "System.Drawing.Drawing2D"
        ],
        "Purpose": ""
      },
      {
        "Name": "DependencyChartConverterForm",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Forms\\Development\\DependencyChartConverter\\DependencyChartConverterWinForm.cs",
        "Namespace": "MTM_Inventory_Application.Forms.Development.DependencyChartConverter",
        "BaseClass": "Form",
        "Controls": [],
        "Events": [
          "btnSelectBasePath_Click",
          "btnConvertCharts_Click"
        ],
        "Methods": [
          "InitializeForm",
          "btnSelectBasePath_Click",
          "btnConvertCharts_Click",
          "PerformConversion",
          "GetMarkdownFiles",
          "ConvertFile",
          "LoadTemplate",
          "ParseMarkdownChart",
          "RenderHtml",
          "ValidateInputs",
          "ValidateDirectories",
          "ExtractBasicInfo",
          "ExtractDependencies",
          "ExtractComplianceInfo",
          "ExtractRefactorActions",
          "CalculateDependencyCount",
          "RenderDependencies",
          "RenderComplianceItems",
          "RenderRefactorActions",
          "Dispose"
        ],
        "Properties": {
          "IsInitialized": "bool"
        },
        "Dependencies": [
          "System",
          "System.Collections.Generic",
          "System.IO",
          "System.Runtime.CompilerServices",
          "System.Text.RegularExpressions",
          "System.Windows.Forms",
          "MTM_Inventory_Application.Core",
          "MTM_Inventory_Application.Models",
          "MTM_Inventory_Application.Services"
        ],
        "Purpose": ""
      },
      {
        "Name": "DependencyChartViewerForm",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Forms\\Development\\DependencyChartViewer\\DependencyChartViewerForm.cs",
        "Namespace": "MTM_Inventory_Application.Forms.Development.DependencyChartConverter",
        "BaseClass": "Form",
        "Controls": [],
        "Events": [
          "btnSelectHtmlDir_Click",
          "btnOpenExternal_Click"
        ],
        "Methods": [
          "InitializeForm",
          "DependencyChartViewerForm_Load",
          "SafeWebBrowserInitialization",
          "IsWebBrowserControlFunctional",
          "TryMinimalSafeConfiguration",
          "SafelyAccessWebBrowserProperty",
          "DisableWebBrowserAndShowFallback",
          "btnSelectHtmlDir_Click",
          "btnOpenExternal_Click",
          "listHtmlFiles_SelectedIndexChanged",
          "LoadHtmlFiles",
          "GetHtmlFilesFromDirectory",
          "IsValidHtmlFile",
          "OpenFileInExternalBrowser",
          "LoadHtmlFileInBrowser",
          "LoadHtmlContentSafely",
          "TestWebBrowserAccess",
          "TryFallbackLoadingMethods",
          "ShowWebBrowserError",
          "ContainsPotentiallyMaliciousContent",
          "IsValidFileIndex",
          "UpdateFileCount",
          "ProcessCmdKey",
          "Dispose"
        ],
        "Properties": {
          "HasFilesLoaded": "bool",
          "FileCount": "int"
        },
        "Dependencies": [
          "System",
          "System.Collections.Generic",
          "System.Diagnostics",
          "System.IO",
          "System.Runtime.CompilerServices",
          "System.Runtime.InteropServices",
          "System.Threading.Tasks",
          "System.Windows.Forms",
          "MTM_Inventory_Application.Core",
          "MTM_Inventory_Application.Logging",
          "MTM_Inventory_Application.Models",
          "MTM_Inventory_Application.Services"
        ],
        "Purpose": ""
      },
      {
        "Name": "MainFormControlHelper",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Forms\\MainForm\\Classes\\MainFormControlHelper.cs",
        "Namespace": "",
        "BaseClass": "",
        "Controls": [],
        "Events": [],
        "Methods": [
          "ClearAllTextBoxes",
          "ResetComboBox",
          "ResetTextBox",
          "SetActiveControl",
          "AdjustQuantityByKey_Transfers",
          "AdjustQuantityByKey_Quantity",
          "ResetRichTextBox"
        ],
        "Properties": {},
        "Dependencies": [
          "MTM_Inventory_Application.Models"
        ],
        "Purpose": ""
      },
      {
        "Name": "MainFormTabResetHelper",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Forms\\MainForm\\Classes\\MainFormTabResetHelper.cs",
        "Namespace": "",
        "BaseClass": "",
        "Controls": [],
        "Events": [],
        "Methods": [
          "ResetRemoveTab",
          "ResetTransferTab"
        ],
        "Properties": {},
        "Dependencies": [],
        "Purpose": ""
      },
      {
        "Name": "MainFormUserSettingsHelper",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Forms\\MainForm\\Classes\\MainFormUserSettingsHelper.cs",
        "Namespace": "",
        "BaseClass": "",
        "Controls": [],
        "Events": [],
        "Methods": [
          "LoadUserSettingsAsync"
        ],
        "Properties": {},
        "Dependencies": [
          "System.Diagnostics",
          "MTM_Inventory_Application.Data",
          "MTM_Inventory_Application.Models"
        ],
        "Purpose": ""
      }
    ],
    "Controls": [
      {
        "Name": "Control_ConnectionStrengthControl",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\Addons\\Control_ConnectionStrengthControl.cs",
        "Properties": [
          "Strength: int",
          "Ping: int"
        ],
        "Events": [],
        "Methods": [
          "ConnectionStrengthControl_MouseHover",
          "OnParentChanged",
          "ConnectionStrengthControl_Paint",
          "GetBarColor",
          "UpdateToolTip",
          "SyncBackgroundWithParent"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_AdvancedInventory",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\MainForm\\Control_AdvancedInventory.cs",
        "Properties": [
          "MainFormInstance: Forms.MainForm.MainForm?"
        ],
        "Events": [
          "AdvancedInventory_Single_Button_Reset_Click",
          "AdvancedInventory_Single_Button_Save_Click",
          "AdvancedInventory_Single_Button_Send_Click",
          "AdvancedInventory_Button_Normal_Click",
          "AdvancedInventory_MultiLoc_Button_Reset_Click",
          "AdvancedInventory_MultiLoc_Button_AddLoc_Click",
          "AdvancedInventory_MultiLoc_Button_SaveAll_Click",
          "AdvancedInventory_Import_Button_OpenExcel_Click",
          "AdvancedInventory_Import_Button_ImportExcel_Click",
          "AdvancedInventory_Import_Button_Save_Click",
          "AdvancedInventory_MultiLoc_Label_Notes_Click"
        ],
        "Methods": [
          "SetProgressControls",
          "OnLoad",
          "LoadAllComboBoxesAsync",
          "WireUpEvents",
          "InventoryTextBoxQty_TextChanged",
          "UpdateSingleSaveButtonState",
          "UpdateMultiSaveButtonState",
          "ValidateQtyTextBox",
          "ProcessCmdKey",
          "AdvancedInventory_Single_HardResetAsync",
          "AdvancedInventory_Single_SoftReset",
          "AdvancedInventory_Single_Button_Reset_Click",
          "AdvancedInventory_Single_Button_Save_Click",
          "AdvancedInventory_Single_Button_Send_Click",
          "AdvancedInventory_Button_Normal_Click",
          "AdvancedInventory_MultiLoc_HardResetAsync",
          "AdvancedInventory_MultiLoc_SoftReset",
          "AdvancedInventory_MultiLoc_Button_Reset_Click",
          "AdvancedInventory_MultiLoc_Button_AddLoc_Click",
          "AdvancedInventory_MultiLoc_Button_SaveAll_Click",
          "GetWipAppExcelUserFolderAsync",
          "GetUserExcelFilePathAsync",
          "AdvancedInventory_Import_Button_OpenExcel_Click",
          "AdvancedInventory_Import_Button_ImportExcel_Click",
          "AdvancedInventory_Import_Button_Save_Click",
          "RefreshImportDataGridView",
          "AdvancedInventory_MultiLoc_Label_Notes_Click"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_AdvancedRemove",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\MainForm\\Control_AdvancedRemove.cs",
        "Properties": [
          "MainFormInstance: Forms.MainForm.MainForm?"
        ],
        "Events": [
          "Control_AdvancedRemove_Button_Normal_Click",
          "Control_AdvancedRemove_Button_Search_Click",
          "Control_AdvancedRemove_Button_Delete_Click",
          "Control_AdvancedRemove_Button_Reset_Click",
          "Control_AdvancedRemove_Button_Undo_Click",
          "Control_AdvancedRemove_Button_Print_Click",
          "Control_AdvancedRemove_Button_SidePanel_Click"
        ],
        "Methods": [
          "SetProgressControls",
          "Control_AdvancedRemove_Button_Normal_Click",
          "Control_AdvancedRemove_Initialize",
          "ApplyStandardComboBoxProperties",
          "LoadComboBoxesAsync",
          "WireUpComboBoxEvents",
          "Control_AdvancedRemove_Button_Search_Click",
          "Control_AdvancedRemove_Button_Delete_Click",
          "Control_AdvancedRemove_HardReset",
          "Control_AdvancedRemove_SoftReset",
          "Control_AdvancedRemove_Button_Reset_Click",
          "Control_AdvancedRemove_Button_Undo_Click",
          "Control_AdvancedRemove_Button_Print_Click",
          "Control_AdvancedRemove_Update_ButtonStates",
          "ProcessCmdKey",
          "Control_AdvancedRemove_Button_SidePanel_Click"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_InventoryTab",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\MainForm\\Control_InventoryTab.cs",
        "Properties": [
          "MainFormInstance: Forms.MainForm.MainForm?"
        ],
        "Events": [
          "Control_InventoryTab_Button_AdvancedEntry_Click",
          "Control_InventoryTab_Button_Reset_Click",
          "Control_InventoryTab_Button_Save_Click_Async",
          "Control_InventoryTab_Button_Toggle_RightPanel_Click"
        ],
        "Methods": [
          "SetProgressControls",
          "ApplyPrivileges",
          "Control_InventoryTab_OnStartup_LoadDataComboBoxesAsync",
          "ProcessCmdKey",
          "Control_InventoryTab_Button_AdvancedEntry_Click",
          "Control_InventoryTab_Button_Reset_Click",
          "Control_InventoryTab_HardReset",
          "Control_InventoryTab_SoftReset",
          "Control_InventoryTab_Button_Save_Click_Async",
          "AddToLast10TransactionsIfUniqueAsync",
          "Control_InventoryTab_Button_Toggle_RightPanel_Click",
          "Control_InventoryTab_ComboBox_Location_SelectedIndexChanged",
          "Control_InventoryTab_ComboBox_Operation_SelectedIndexChanged",
          "Control_InventoryTab_ComboBox_Part_SelectedIndexChanged",
          "Control_InventoryTab_TextBox_Quantity_TextChanged",
          "Control_InventoryTab_Update_SaveButtonState",
          "Control_InventoryTab_OnStartup_WireUpEvents",
          "SetVersionLabel"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_QuickButtons",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\MainForm\\Control_QuickButtons.cs",
        "Properties": [
          "MainFormInstance: Forms.MainForm.MainForm?",
          "PartId: string",
          "Operation: string",
          "Quantity: int"
        ],
        "Events": [
          "QuickButton_Click",
          "MenuItemEdit_Click",
          "MenuItemRemove_Click",
          "MenuItemReorder_Click",
          "BtnEdit_Click"
        ],
        "Methods": [
          "SetProgressControls",
          "LoadLast10Transactions",
          "RefreshButtonLayout",
          "TruncateTextToFitSingleLine",
          "SetComboBoxText",
          "SetTextBoxText",
          "QuickButton_Click",
          "MenuItemEdit_Click",
          "MenuItemRemove_Click",
          "MenuItemReorder_Click",
          "ListView_SelectedIndexChanged",
          "BtnEdit_Click",
          "ListView_MouseDown",
          "ListView_ItemDrag",
          "ListView_DragEnter",
          "ListView_DragDrop",
          "ListView_KeyDown",
          "GetButtonOrder"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_RemoveTab",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\MainForm\\Control_RemoveTab.cs",
        "Properties": [
          "MainFormInstance: Forms.MainForm.MainForm?"
        ],
        "Events": [
          "Control_RemoveTab_Button_Delete_Click",
          "Control_RemoveTab_Button_Undo_Click",
          "Control_RemoveTab_Button_Reset_Click",
          "Control_RemoveTab_Button_AdvancedItemRemoval_Click",
          "Control_RemoveTab_Button_Normal_Click",
          "Control_RemoveTab_Button_Search_Click",
          "Control_RemoveTab_Button_Print_Click",
          "Control_RemoveTab_Button_Toggle_RightPanel_Click",
          "Control_RemoveTab_Button_ShowAll_Click"
        ],
        "Methods": [
          "SetProgressControls",
          "ApplyPrivileges",
          "Control_RemoveTab_Initialize",
          "Control_RemoveTab_OnStartup_LoadComboBoxesAsync",
          "Control_RemoveTab_OnStartup_LoadDataComboBoxesAsync",
          "ProcessCmdKey",
          "Control_RemoveTab_Button_Delete_Click",
          "Control_RemoveTab_Button_Undo_Click",
          "Control_RemoveTab_Button_Reset_Click",
          "Control_RemoveTab_HardReset",
          "Control_RemoveTab_SoftReset",
          "Control_RemoveTab_Button_AdvancedItemRemoval_Click",
          "Control_RemoveTab_Button_Normal_Click",
          "Control_RemoveTab_Button_Search_Click",
          "Control_RemoveTab_Button_Print_Click",
          "Control_RemoveTab_ComboBox_Operation_SelectedIndexChanged",
          "Control_RemoveTab_ComboBox_Part_SelectedIndexChanged",
          "Control_RemoveTab_Update_ButtonStates",
          "Control_RemoveTab_OnStartup_WireUpEvents",
          "Control_RemoveTab_Button_Toggle_RightPanel_Click",
          "Control_RemoveTab_Button_ShowAll_Click",
          "GetSelectedItemsToDelete"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_TransferTab",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\MainForm\\Control_TransferTab.cs",
        "Properties": [
          "MainFormInstance: Forms.MainForm.MainForm?"
        ],
        "Events": [
          "Control_TransferTab_Button_Reset_Click",
          "Control_TransferTab_Button_Search_Click",
          "Control_TransferTab_Button_Save_ClickAsync",
          "Control_TransferTab_Button_Print_Click",
          "Control_TransferTab_Button_Toggle_RightPanel_Click",
          "Control_TransferTab_Button_Toggle_Split_Click"
        ],
        "Methods": [
          "SetProgressControls",
          "Control_TransferTab_Initialize",
          "ProcessCmdKey",
          "Control_TransferTab_OnStartup_LoadComboBoxesAsync",
          "Control_TransferTab_OnStartup_LoadDataComboBoxesAsync",
          "Control_TransferTab_Button_Reset_Click",
          "Control_TransferTab_HardReset",
          "Control_TransferTab_SoftReset",
          "Control_TransferTab_Button_Search_Click",
          "Control_TransferTab_Button_Save_ClickAsync",
          "Control_TransferTab_Button_Print_Click",
          "TransferSingleRowAsync",
          "TransferMultipleRowsAsync",
          "Control_TransferTab_ComboBox_Operation_SelectedIndexChanged",
          "Control_TransferTab_ComboBox_Part_SelectedIndexChanged",
          "Control_TransferTab_Update_ButtonStates",
          "Control_TransferTab_OnStartup_WireUpEvents",
          "Control_TransferTab_DataGridView_Main_SelectionChanged",
          "Control_TransferTab_Button_Toggle_RightPanel_Click",
          "ApplyPrivileges",
          "SetComboBoxForeColor",
          "splitContainer1_SplitterMoved",
          "Control_TransferTab_Button_Toggle_Split_Click"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_About",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\SettingsForm\\Control_About.cs",
        "Properties": [],
        "Events": [],
        "Methods": [
          "Control_About_LoadControl",
          "LoadChangelogAsync",
          "GetChangelogPdfPathAsync",
          "ShowFallbackContent",
          "ShowErrorContent",
          "CleanupTempFiles",
          "CleanupAllTempFiles"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_Add_ItemType",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\SettingsForm\\Control_Add_ItemType.cs",
        "Properties": [],
        "Events": [
          "Control_Add_ItemType_Button_Save_Click",
          "Control_Add_ItemType_Button_Clear_Click"
        ],
        "Methods": [
          "OnLoad",
          "Control_Add_ItemType_Button_Save_Click",
          "Control_Add_ItemType_Button_Clear_Click",
          "ClearForm"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_Add_Location",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\SettingsForm\\Control_Add_Location.cs",
        "Properties": [],
        "Events": [
          "Control_Add_Location_Button_Save_Click",
          "Control_Add_Location_Button_Clear_Click"
        ],
        "Methods": [
          "LoadBuildingOptions",
          "OnLoad",
          "Control_Add_Location_Button_Save_Click",
          "Control_Add_Location_Button_Clear_Click",
          "ClearForm"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_Add_Operation",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\SettingsForm\\Control_Add_Operation.cs",
        "Properties": [],
        "Events": [
          "Control_Add_Operation_Button_Save_Click",
          "Control_Add_Operation_Button_Clear_Click"
        ],
        "Methods": [
          "SetProgressControls",
          "OnLoad",
          "Control_Add_Operation_Button_Save_Click",
          "Control_Add_Operation_Button_Clear_Click",
          "ClearForm"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_Add_PartID",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\SettingsForm\\Control_Add_PartID.cs",
        "Properties": [
          "Display: string",
          "FullName: string",
          "FileName: string"
        ],
        "Events": [
          "SaveButton_Click",
          "CancelButton_Click"
        ],
        "Methods": [
          "LoadPartTypes",
          "OnLoad",
          "SaveButton_Click",
          "AddPartAsync",
          "CancelButton_Click",
          "ClearForm",
          "ToString"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_Add_User",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\SettingsForm\\Control_Add_User.cs",
        "Properties": [],
        "Events": [
          "Control_Add_User_Button_Save_Click",
          "Control_Add_User_Button_Clear_Click"
        ],
        "Methods": [
          "SetProgressControls",
          "OnLoad",
          "Control_Add_User_TextBox_NoSpaces_KeyPress",
          "Control_Add_User_CheckBox_ViewHidePasswords_CheckedChanged",
          "Control_Add_User_CheckBox_VisualAccess_CheckedChanged",
          "Control_Add_User_Button_Save_Click",
          "Control_Add_User_Button_Clear_Click",
          "ClearForm",
          "ShowProgress",
          "UpdateProgress",
          "HideProgress",
          "UpdateStatus",
          "ShowError",
          "ShowSuccess"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_Database",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\SettingsForm\\Control_Database.cs",
        "Properties": [],
        "Events": [
          "SaveButton_Click",
          "ResetButton_Click"
        ],
        "Methods": [
          "OnLoad",
          "LoadDatabaseSettingsAsync",
          "SaveDatabaseSettingsAsync",
          "SaveButton_Click",
          "ResetButton_Click"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_Edit_ItemType",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\SettingsForm\\Control_Edit_ItemType.cs",
        "Properties": [],
        "Events": [
          "SaveButton_Click",
          "CancelButton_Click"
        ],
        "Methods": [
          "LoadItemTypes",
          "OnLoad",
          "ItemTypesComboBox_SelectedIndexChanged",
          "SaveButton_Click",
          "CancelButton_Click",
          "LoadItemTypeData",
          "SetFormEnabled",
          "ClearForm"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_Edit_Location",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\SettingsForm\\Control_Edit_Location.cs",
        "Properties": [],
        "Events": [
          "SaveButton_Click",
          "CancelButton_Click"
        ],
        "Methods": [
          "LoadBuildingOptions",
          "LoadLocations",
          "OnLoad",
          "LocationsComboBox_SelectedIndexChanged",
          "SaveButton_Click",
          "CancelButton_Click",
          "ClearForm",
          "EnableControls"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_Edit_Operation",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\SettingsForm\\Control_Edit_Operation.cs",
        "Properties": [],
        "Events": [
          "SaveButton_Click",
          "CancelButton_Click"
        ],
        "Methods": [
          "LoadOperations",
          "OnLoad",
          "OperationsComboBox_SelectedIndexChanged",
          "SaveButton_Click",
          "CancelButton_Click",
          "ClearForm",
          "EnableControls"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_Edit_PartID",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\SettingsForm\\Control_Edit_PartID.cs",
        "Properties": [],
        "Events": [
          "SaveButton_Click",
          "CancelButton_Click"
        ],
        "Methods": [
          "LoadPartTypes",
          "LoadParts",
          "OnLoad",
          "Control_Edit_PartID_ComboBox_Part_SelectedIndexChanged",
          "SaveButton_Click",
          "CancelButton_Click",
          "LoadPartData",
          "SetFormEnabled",
          "UpdatePartAsync",
          "ClearForm",
          "Dispose"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_Edit_User",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\SettingsForm\\Control_Edit_User.cs",
        "Properties": [],
        "Events": [
          "Control_Edit_User_Button_Save_Click",
          "Control_Edit_User_Button_Clear_Click"
        ],
        "Methods": [
          "OnLoad",
          "LoadUsersAsync",
          "Control_Edit_User_TextBox_NoSpaces_KeyPress",
          "Control_Edit_User_CheckBox_ViewHidePasswords_CheckedChanged",
          "Control_Edit_User_CheckBox_VisualAccess_CheckedChanged",
          "Control_Edit_User_ComboBox_Users_SelectedIndexChanged",
          "Control_Edit_User_Button_Save_Click",
          "Control_Edit_User_Button_Clear_Click"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_Remove_ItemType",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\SettingsForm\\Control_Remove_ItemType.cs",
        "Properties": [],
        "Events": [
          "RemoveButton_Click",
          "CancelButton_Click"
        ],
        "Methods": [
          "OnLoad",
          "LoadItemTypes",
          "ItemTypesComboBox_SelectedIndexChanged",
          "RemoveButton_Click",
          "CancelButton_Click",
          "LoadItemTypeData",
          "SetFormEnabled",
          "ClearForm"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_Remove_Location",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\SettingsForm\\Control_Remove_Location.cs",
        "Properties": [],
        "Events": [
          "RemoveButton_Click",
          "CancelButton_Click"
        ],
        "Methods": [
          "OnLoad",
          "LoadLocations",
          "LocationsComboBox_SelectedIndexChanged",
          "RemoveButton_Click",
          "CancelButton_Click",
          "ClearForm",
          "EnableControls"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_Remove_Operation",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\SettingsForm\\Control_Remove_Operation.cs",
        "Properties": [],
        "Events": [
          "RemoveButton_Click",
          "CancelButton_Click"
        ],
        "Methods": [
          "OnLoad",
          "LoadOperations",
          "OperationsComboBox_SelectedIndexChanged",
          "RemoveButton_Click",
          "CancelButton_Click",
          "ClearForm",
          "EnableControls"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_Remove_PartID",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\SettingsForm\\Control_Remove_PartID.cs",
        "Properties": [],
        "Events": [
          "RemoveButton_Click",
          "CancelButton_Click"
        ],
        "Methods": [
          "OnLoad",
          "LoadParts",
          "PartsComboBox_SelectedIndexChanged",
          "RemoveButton_Click",
          "CancelButton_Click",
          "LoadPartData",
          "SetFormEnabled",
          "ClearForm"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_Remove_User",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\SettingsForm\\Control_Remove_User.cs",
        "Properties": [],
        "Events": [
          "RemoveUserControl_Button_Remove_Click"
        ],
        "Methods": [
          "SetProgressControls",
          "LoadUsersAsync",
          "RemoveUserControl_ComboBox_Users_SelectedIndexChanged",
          "RemoveUserControl_Button_Remove_Click",
          "ShowProgress",
          "UpdateProgress",
          "HideProgress",
          "UpdateStatus"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_Shortcuts",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\SettingsForm\\Control_Shortcuts.cs",
        "Properties": [],
        "Events": [
          "Control_Shortcuts_Button_Save_Click"
        ],
        "Methods": [
          "LoadShortcuts",
          "ShortcutsDataGridView_CellValidating",
          "ShortcutsDataGridView_CellValueChanged",
          "ShortcutsDataGridView_CellBeginEdit",
          "IsShortcutConflict",
          "GetShortcutGroup",
          "Control_Shortcuts_Button_Save_Click"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "Control_Theme",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\SettingsForm\\Control_Theme.cs",
        "Properties": [],
        "Events": [
          "SaveButton_Click",
          "PreviewButton_Click"
        ],
        "Methods": [
          "LoadThemeSettingsAsync",
          "SaveButton_Click",
          "PreviewButton_Click"
        ],
        "Purpose": "",
        "IsCustomControl": true
      },
      {
        "Name": "ColumnOrderDialog",
        "Type": "Form",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\Shared\\ColumnOrderDialog.cs",
        "Properties": [],
        "Events": [],
        "Methods": [
          "InitializeDialog",
          "InitializeColumnData",
          "InitializeControls",
          "SetupEventHandlers",
          "ApplyTheming",
          "ListBox_MouseDown",
          "ListBox_MouseMove",
          "ListBox_DragOver",
          "ListBox_DragDrop",
          "ListBox_KeyDown",
          "GetColumnOrder"
        ],
        "Purpose": "/// Dialog for reordering DataGridView columns via drag-and-drop\r\n    ///",
        "IsCustomControl": false
      },
      {
        "Name": "Control_ProgressBarUserControl",
        "Type": "UserControl",
        "ParentForm": "",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Controls\\Shared\\Control_ProgressBarUserControl.cs",
        "Properties": [
          "ProgressValue: int",
          "StatusText: string",
          "ShowLoadingImage: bool"
        ],
        "Events": [],
        "Methods": [
          "InitializeControls",
          "EnableCancel",
          "LayoutControls",
          "LoadingImage_Paint",
          "UpdateStatusText",
          "ShowProgress",
          "HideProgress",
          "UpdateProgress",
          "CompleteProgressAsync",
          "ApplyTheme",
          "OnResize"
        ],
        "Purpose": "",
        "IsCustomControl": true
      }
    ],
    "Layouts": [],
    "Navigation": {
      "MenuItems": [
        "is"
      ],
      "TabPages": [],
      "NavigationMethods": [],
      "NavigationFlow": {}
    },
    "UIMetrics": {
      "TotalForms": 14,
      "TotalControls": 28,
      "CustomControlsCount": 27,
      "FormsWithEvents": 9,
      "AnalysisTimestamp": "2025-08-16T17:49:38.6915561-05:00"
    }
  },
  "DatabaseAnalysis": {
    "Tables": [
      {
        "Name": "app_themes",
        "Columns": [
          {
            "Name": "ThemeName",
            "DataType": "varchar",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "SettingsJson",
            "DataType": "json",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          }
        ],
        "Indexes": [],
        "ForeignKeys": [],
        "Purpose": "Table structure for table `app_themes`"
      },
      {
        "Name": "debug_matching",
        "Columns": [
          {
            "Name": "id",
            "DataType": "int",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "in_id",
            "DataType": "int",
            "IsNullable": true,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          }
        ],
        "Indexes": [],
        "ForeignKeys": [],
        "Purpose": "Table structure for table `debug_matching`"
      },
      {
        "Name": "inv_inventory",
        "Columns": [
          {
            "Name": "ID",
            "DataType": "int",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "PartID",
            "DataType": "varchar",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "Location",
            "DataType": "varchar",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "Operation",
            "DataType": "varchar",
            "IsNullable": true,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          }
        ],
        "Indexes": [],
        "ForeignKeys": [],
        "Purpose": "Table structure for table `inv_inventory`"
      },
      {
        "Name": "inv_inventory_batch_seq",
        "Columns": [
          {
            "Name": "last_batch_number",
            "DataType": "bigint",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "current_match",
            "DataType": "int",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          }
        ],
        "Indexes": [],
        "ForeignKeys": [],
        "Purpose": "Table structure for table `inv_inventory_batch_seq`"
      },
      {
        "Name": "inv_transaction",
        "Columns": [
          {
            "Name": "ID",
            "DataType": "int",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "TransactionType",
            "DataType": "enum",
            "IsNullable": true,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "BatchNumber",
            "DataType": "varchar",
            "IsNullable": true,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          }
        ],
        "Indexes": [],
        "ForeignKeys": [],
        "Purpose": "Table structure for table `inv_transaction`"
      },
      {
        "Name": "log_changelog",
        "Columns": [
          {
            "Name": "Version",
            "DataType": "varchar",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "Notes",
            "DataType": "longtext",
            "IsNullable": true,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          }
        ],
        "Indexes": [],
        "ForeignKeys": [],
        "Purpose": "Table structure for table `log_changelog`"
      },
      {
        "Name": "log_error",
        "Columns": [
          {
            "Name": "ID",
            "DataType": "int",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "User",
            "DataType": "varchar",
            "IsNullable": true,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          }
        ],
        "Indexes": [],
        "ForeignKeys": [],
        "Purpose": "Table structure for table `log_error`"
      },
      {
        "Name": "md_item_types",
        "Columns": [
          {
            "Name": "ID",
            "DataType": "int",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "ItemType",
            "DataType": "varchar",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "IssuedBy",
            "DataType": "varchar",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          }
        ],
        "Indexes": [],
        "ForeignKeys": [],
        "Purpose": "Table structure for table `md_item_types`"
      },
      {
        "Name": "md_locations",
        "Columns": [
          {
            "Name": "ID",
            "DataType": "int",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "Location",
            "DataType": "varchar",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "Building",
            "DataType": "varchar",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "IssuedBy",
            "DataType": "varchar",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          }
        ],
        "Indexes": [],
        "ForeignKeys": [],
        "Purpose": "Table structure for table `md_locations`"
      },
      {
        "Name": "md_operation_numbers",
        "Columns": [
          {
            "Name": "ID",
            "DataType": "int",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "Operation",
            "DataType": "varchar",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "IssuedBy",
            "DataType": "varchar",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          }
        ],
        "Indexes": [],
        "ForeignKeys": [],
        "Purpose": "Table structure for table `md_operation_numbers`"
      },
      {
        "Name": "md_part_ids",
        "Columns": [
          {
            "Name": "ID",
            "DataType": "int",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "PartID",
            "DataType": "varchar",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "Customer",
            "DataType": "varchar",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "Description",
            "DataType": "varchar",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "IssuedBy",
            "DataType": "varchar",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "ItemType",
            "DataType": "varchar",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "Operations",
            "DataType": "json",
            "IsNullable": true,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          }
        ],
        "Indexes": [],
        "ForeignKeys": [],
        "Purpose": "Table structure for table `md_part_ids`"
      },
      {
        "Name": "migration_debug_log",
        "Columns": [
          {
            "Name": "id",
            "DataType": "int",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "message",
            "DataType": "varchar",
            "IsNullable": true,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          }
        ],
        "Indexes": [],
        "ForeignKeys": [],
        "Purpose": "Table structure for table `migration_debug_log`"
      },
      {
        "Name": "sys_last_10_transactions",
        "Columns": [
          {
            "Name": "ID",
            "DataType": "int",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "User",
            "DataType": "varchar",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "PartID",
            "DataType": "varchar",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "Operation",
            "DataType": "varchar",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "Quantity",
            "DataType": "int",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "ReceiveDate",
            "DataType": "datetime",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          }
        ],
        "Indexes": [],
        "ForeignKeys": [],
        "Purpose": "Table structure for table `sys_last_10_transactions`"
      },
      {
        "Name": "sys_roles",
        "Columns": [
          {
            "Name": "ID",
            "DataType": "int",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "RoleName",
            "DataType": "varchar",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "Description",
            "DataType": "varchar",
            "IsNullable": true,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          }
        ],
        "Indexes": [],
        "ForeignKeys": [],
        "Purpose": "Table structure for table `sys_roles`"
      },
      {
        "Name": "sys_user_roles",
        "Columns": [
          {
            "Name": "UserID",
            "DataType": "int",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "RoleID",
            "DataType": "int",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "AssignedBy",
            "DataType": "varchar",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "AssignedAt",
            "DataType": "datetime",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          }
        ],
        "Indexes": [],
        "ForeignKeys": [],
        "Purpose": "Table structure for table `sys_user_roles`"
      },
      {
        "Name": "usr_ui_settings",
        "Columns": [
          {
            "Name": "UserId",
            "DataType": "varchar",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "SettingsJson",
            "DataType": "json",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "ShortcutsJson",
            "DataType": "json",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "UpdatedAt",
            "DataType": "datetime",
            "IsNullable": true,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          }
        ],
        "Indexes": [],
        "ForeignKeys": [],
        "Purpose": "Table structure for table `usr_ui_settings`"
      },
      {
        "Name": "usr_users",
        "Columns": [
          {
            "Name": "ID",
            "DataType": "int",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "User",
            "DataType": "varchar",
            "IsNullable": false,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          },
          {
            "Name": "Full",
            "DataType": "Name",
            "IsNullable": true,
            "IsPrimaryKey": false,
            "IsAutoIncrement": false,
            "DefaultValue": ""
          }
        ],
        "Indexes": [],
        "ForeignKeys": [],
        "Purpose": "Table structure for table `usr_users`"
      }
    ],
    "StoredProcedures": [
      {
        "Name": "sys_VerifyDatabaseSchema",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\00_StoredProcedure_Verification_System.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "TEXT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Procedure to verify all required tables exist with correct structure",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE sys_VerifyDatabaseSchema(\n    OUT p_Status INT,\n    OUT p_ErrorMsg TEXT\n)\nBEGIN\n    DECLARE v_TableCount INT DEFAULT 0;\n    DECLARE v_MissingTables TEXT DEFAULT '';\n    DECLARE v_Expected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred during schema verification';\n    END;\n    \n    -- Expected core tables from UpdatedDatabase.sql analysis\n    SET v_Expected = 17;\n    \n    -- Check for each required table\n    SELECT COUNT(*) INTO v_TableCount\n    FROM INFORMATION_SCHEMA.TABLES \n    WHERE TABLE_SCHEMA = DATABASE()\n    AND TABLE_NAME IN (\n        'app_themes',\n        'debug_matching', \n        'inv_inventory',\n        'inv_inventory_batch_seq',\n        'inv_transaction',\n        'usr_users',\n        'usr_ui_settings', \n        'sys_user_roles',\n        'sys_roles',\n        'md_part_ids',\n        'md_locations', \n        'md_operation_numbers',\n        'md_item_types',\n        'log_error_log',\n        'log_changelog',\n        'sys_quick_buttons',\n        'sys_last_10_transactions'\n    );\n    \n    IF v_TableCount < v_Expected THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Missing tables detected. Found ', v_TableCount, ' of ', v_Expected, ' required tables');\n    ELSE\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Schema validation passed. All ', v_TableCount, ' required tables found');\n    END IF;\n    \n    -- Return detailed table information\n    SELECT \n        TABLE_NAME as TableName,\n        ENGINE as Engine,\n        TABLE_COLLATION as Collation,\n        CREATE_TIME as Created,\n        TABLE_COMMENT as Comment,\n        TABLE_ROWS as ApproxRows\n    FROM INFORMATION_SCHEMA.TABLES \n    WHERE TABLE_SCHEMA = DATABASE()\n    ORDER BY TABLE_NAME;\n    \nEND $$"
      },
      {
        "Name": "sys_VerifyTableColumns",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\00_StoredProcedure_Verification_System.sql",
        "Parameters": [
          {
            "Name": "p_TableName",
            "DataType": "VARCHAR(64)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "TEXT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Procedure to verify critical table column structures match UpdatedDatabase.sql",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE sys_VerifyTableColumns(\n    IN p_TableName VARCHAR(64),\n    OUT p_Status INT,\n    OUT p_ErrorMsg TEXT\n)\nBEGIN\n    DECLARE v_ColumnCount INT DEFAULT 0;\n    DECLARE v_ExpectedColumns TEXT DEFAULT '';\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while verifying columns for table: ', p_TableName);\n    END;\n    \n    -- Define expected columns for key tables based on UpdatedDatabase.sql\n    CASE p_TableName\n        WHEN 'inv_inventory' THEN\n            SET v_ExpectedColumns = 'ID,PartID,Location,Operation,Quantity,ItemType,ReceiveDate,LastUpdated,User,BatchNumber,Notes';\n        WHEN 'inv_transaction' THEN  \n            SET v_ExpectedColumns = 'ID,TransactionType,BatchNumber,PartID,FromLocation,ToLocation,Operation,Quantity,Notes,User,ItemType,ReceiveDate';\n        WHEN 'app_themes' THEN\n            SET v_ExpectedColumns = 'ThemeName,SettingsJson';\n        WHEN 'debug_matching' THEN\n            SET v_ExpectedColumns = 'id,in_id,in_part,in_loc,in_batch,out_id,out_part,out_loc,out_batch,matched_at';\n        WHEN 'usr_users' THEN\n            SET v_ExpectedColumns = 'UserID,User,Full Name,Shift,VitsUser,Pin,LastShownVersion,HideChangeLog,Theme_Name,Theme_FontSize';\n        WHEN 'md_part_ids' THEN\n            SET v_ExpectedColumns = 'PartID,Description,CreatedDate';\n        WHEN 'md_locations' THEN\n            SET v_ExpectedColumns = 'LocationID,Location,Description,IsActive';\n        WHEN 'md_operation_numbers' THEN\n            SET v_ExpectedColumns = 'OperationID,OperationNumber,Description,IsActive';\n        WHEN 'sys_last_10_transactions' THEN\n            SET v_ExpectedColumns = 'Position,User,PartID,Operation,Quantity,ReceiveDate';\n        ELSE\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('Unknown table for verification: ', p_TableName);\n    END CASE;\n    \n    -- Return column information for manual verification\n    SELECT \n        COLUMN_NAME as ColumnName,\n        DATA_TYPE as DataType,\n        IS_NULLABLE as Nullable,\n        COLUMN_DEFAULT as DefaultValue,\n        CHARACTER_MAXIMUM_LENGTH as MaxLength,\n        COLUMN_KEY as KeyType,\n        EXTRA as Extra\n    FROM INFORMATION_SCHEMA.COLUMNS\n    WHERE TABLE_SCHEMA = DATABASE()\n    AND TABLE_NAME = p_TableName\n    ORDER BY ORDINAL_POSITION;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Column verification completed for table: ', p_TableName);\n    \nEND $$"
      },
      {
        "Name": "sys_GetStoredProcedureInventory",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\00_StoredProcedure_Verification_System.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "TEXT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Procedure to list all stored procedures and their status",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE sys_GetStoredProcedureInventory(\n    OUT p_Status INT,\n    OUT p_ErrorMsg TEXT\n)\nBEGIN\n    DECLARE v_ProcCount INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving procedure inventory';\n    END;\n    \n    SELECT COUNT(*) INTO v_ProcCount\n    FROM INFORMATION_SCHEMA.ROUTINES \n    WHERE ROUTINE_SCHEMA = DATABASE()\n    AND ROUTINE_TYPE = 'PROCEDURE';\n    \n    -- Return detailed procedure information\n    SELECT \n        ROUTINE_NAME as ProcedureName,\n        CREATED as Created,\n        LAST_ALTERED as LastModified,\n        SQL_DATA_ACCESS as DataAccess,\n        SECURITY_TYPE as SecurityType,\n        ROUTINE_COMMENT as Comment,\n        DEFINER as Definer\n    FROM INFORMATION_SCHEMA.ROUTINES \n    WHERE ROUTINE_SCHEMA = DATABASE()\n    AND ROUTINE_TYPE = 'PROCEDURE'\n    ORDER BY ROUTINE_NAME;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Procedure inventory completed. Found ', v_ProcCount, ' stored procedures');\n    \nEND $$"
      },
      {
        "Name": "test_InventoryProcedures",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\00_StoredProcedure_Verification_System.sql",
        "Parameters": [
          {
            "Name": "p_TestsPassed",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_TestsFailed",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "TEXT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Test procedure for inventory management procedures",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE test_InventoryProcedures(\n    OUT p_TestsPassed INT,\n    OUT p_TestsFailed INT,\n    OUT p_ErrorMsg TEXT\n)\nBEGIN\n    DECLARE v_Status INT DEFAULT 0;\n    DECLARE v_Message VARCHAR(255) DEFAULT '';\n    DECLARE v_TestResult BOOLEAN DEFAULT FALSE;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_TestsFailed = p_TestsFailed + 1;\n        SET p_ErrorMsg = CONCAT(p_ErrorMsg, 'CRITICAL ERROR in inventory procedure testing; ');\n    END;\n    \n    SET p_TestsPassed = 0;\n    SET p_TestsFailed = 0;\n    SET p_ErrorMsg = '';\n    \n    -- Test 1: inv_inventory_Add_Item procedure\n    BEGIN\n        DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET v_TestResult = FALSE;\n        SET v_TestResult = TRUE;\n        \n        CALL inv_inventory_Add_Item(\n            'TEST_PART_001', 'TEST_LOC', '99', 1, 'WIP', \n            'TEST_USER', NULL, 'Test item for verification',\n            v_Status, v_Message\n        );\n        \n        IF v_TestResult = TRUE AND v_Status = 0 THEN\n            SET p_TestsPassed = p_TestsPassed + 1;\n        ELSE\n            SET p_TestsFailed = p_TestsFailed + 1;\n            SET p_ErrorMsg = CONCAT(p_ErrorMsg, 'inv_inventory_Add_Item: ', v_Message, '; ');\n        END IF;\n    END;\n    \n    -- Test 2: inv_inventory_Remove_Item procedure  \n    BEGIN\n        DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET v_TestResult = FALSE;\n        SET v_TestResult = TRUE;\n        \n        CALL inv_inventory_Remove_Item(\n            'TEST_PART_001', 'TEST_LOC', '99', 1, 'WIP',\n            'TEST_USER', NULL, 'Test removal',\n            v_Status, v_Message\n        );\n        \n        IF v_TestResult = TRUE AND v_Status >= 0 THEN\n            SET p_TestsPassed = p_TestsPassed + 1;\n        ELSE\n            SET p_TestsFailed = p_TestsFailed + 1;\n            SET p_ErrorMsg = CONCAT(p_ErrorMsg, 'inv_inventory_Remove_Item: ', v_Message, '; ');\n        END IF;\n    END;\n    \n    -- Test 3: inv_transactions_SmartSearch procedure\n    BEGIN\n        DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET v_TestResult = FALSE;\n        SET v_TestResult = TRUE;\n        \n        CALL inv_transactions_SmartSearch(\n            'TEST_USER', TRUE, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \n            NULL, NOW() - INTERVAL 1 DAY, NOW(), NULL, NULL, 1, 10,\n            v_Status, v_Message\n        );\n        \n        IF v_TestResult = TRUE AND v_Status = 0 THEN\n            SET p_TestsPassed = p_TestsPassed + 1;\n        ELSE\n            SET p_TestsFailed = p_TestsFailed + 1;\n            SET p_ErrorMsg = CONCAT(p_ErrorMsg, 'inv_transactions_SmartSearch: ', v_Message, '; ');\n        END IF;\n    END;\n    \n    -- Clean up test data\n    DELETE FROM inv_inventory WHERE PartID = 'TEST_PART_001' AND User = 'TEST_USER';\n    DELETE FROM inv_transaction WHERE PartID = 'TEST_PART_001' AND User = 'TEST_USER';\n    \nEND $$"
      },
      {
        "Name": "sys_RunCompleteVerification",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\00_StoredProcedure_Verification_System.sql",
        "Parameters": [
          {
            "Name": "p_OverallStatus",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Summary",
            "DataType": "TEXT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Master verification procedure that runs all checks",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE sys_RunCompleteVerification(\n    OUT p_OverallStatus INT,\n    OUT p_Summary TEXT\n)\nBEGIN\n    DECLARE v_SchemaStatus INT DEFAULT 0;\n    DECLARE v_SchemaMsg TEXT DEFAULT '';\n    DECLARE v_ProcStatus INT DEFAULT 0;\n    DECLARE v_ProcMsg TEXT DEFAULT '';\n    DECLARE v_TestsPassed INT DEFAULT 0;\n    DECLARE v_TestsFailed INT DEFAULT 0;\n    DECLARE v_TestMsg TEXT DEFAULT '';\n    \n    SET p_Summary = 'MTM STORED PROCEDURE VERIFICATION REPORT\\n';\n    SET p_Summary = CONCAT(p_Summary, '==========================================\\n');\n    SET p_Summary = CONCAT(p_Summary, 'Verification Date: ', NOW(), '\\n\\n');\n    \n    -- Step 1: Schema Verification\n    CALL sys_VerifyDatabaseSchema(v_SchemaStatus, v_SchemaMsg);\n    SET p_Summary = CONCAT(p_Summary, '1. SCHEMA VERIFICATION: ');\n    IF v_SchemaStatus = 0 THEN\n        SET p_Summary = CONCAT(p_Summary, 'PASSED\\n   ', v_SchemaMsg, '\\n\\n');\n    ELSE\n        SET p_Summary = CONCAT(p_Summary, 'FAILED\\n   ', v_SchemaMsg, '\\n\\n');\n    END IF;\n    \n    -- Step 2: Procedure Inventory\n    CALL sys_GetStoredProcedureInventory(v_ProcStatus, v_ProcMsg);\n    SET p_Summary = CONCAT(p_Summary, '2. PROCEDURE INVENTORY: ');\n    IF v_ProcStatus = 0 THEN\n        SET p_Summary = CONCAT(p_Summary, 'COMPLETED\\n   ', v_ProcMsg, '\\n\\n');\n    ELSE\n        SET p_Summary = CONCAT(p_Summary, 'FAILED\\n   ', v_ProcMsg, '\\n\\n');\n    END IF;\n    \n    -- Step 3: Procedure Testing\n    CALL test_InventoryProcedures(v_TestsPassed, v_TestsFailed, v_TestMsg);\n    SET p_Summary = CONCAT(p_Summary, '3. PROCEDURE TESTING:\\n');\n    SET p_Summary = CONCAT(p_Summary, '   Tests Passed: ', v_TestsPassed, '\\n');\n    SET p_Summary = CONCAT(p_Summary, '   Tests Failed: ', v_TestsFailed, '\\n');\n    IF v_TestsFailed > 0 THEN\n        SET p_Summary = CONCAT(p_Summary, '   Errors: ', v_TestMsg, '\\n');\n    END IF;\n    SET p_Summary = CONCAT(p_Summary, '\\n');\n    \n    -- Overall Status\n    IF v_SchemaStatus = 0 AND v_ProcStatus = 0 AND v_TestsFailed = 0 THEN\n        SET p_OverallStatus = 0;\n        SET p_Summary = CONCAT(p_Summary, 'OVERALL RESULT: ALL SYSTEMS VERIFIED ✓\\n');\n    ELSE\n        SET p_OverallStatus = 1;\n        SET p_Summary = CONCAT(p_Summary, 'OVERALL RESULT: ISSUES DETECTED - REVIEW REQUIRED ⚠\\n');\n    END IF;\n    \n    SET p_Summary = CONCAT(p_Summary, '==========================================');\n    \nEND $$"
      },
      {
        "Name": "usr_ui_settings_Delete_ByUserId",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\01_User_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(64)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Delete user UI settings by user ID (for clean user removal)",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE PROCEDURE usr_ui_settings_Delete_ByUserId(\n    IN p_UserId VARCHAR(64),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting user settings for user: ', p_UserId);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    DELETE FROM usr_ui_settings WHERE UserId = p_UserId;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('User settings deleted successfully for user: ', p_UserId);\n    \n    COMMIT;\nEND $$"
      },
      {
        "Name": "usr_users_GetFullName_ByUser",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\01_User_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get user full name by username with status reporting",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE PROCEDURE usr_users_GetFullName_ByUser(\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving full name for user: ', p_User);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_User);\n    ELSE\n        SELECT `Full Name` FROM usr_users WHERE User = p_User LIMIT 1;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Full name retrieved successfully for user: ', p_User);\n    END IF;\nEND $$"
      },
      {
        "Name": "usr_ui_settings_GetSettingsJson_ByUserId",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\01_User_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get user interface settings JSON by user ID with status reporting (MySQL 5.7 Compatible)",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE PROCEDURE usr_ui_settings_GetSettingsJson_ByUserId(\n    IN p_UserId VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving settings for user: ', p_UserId);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_ui_settings WHERE UserId = p_UserId;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('No settings found for user: ', p_UserId);\n        SELECT NULL as SettingsJson;\n    ELSE\n        SELECT SettingsJson FROM usr_ui_settings WHERE UserId = p_UserId LIMIT 1;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Settings retrieved successfully for user: ', p_UserId);\n    END IF;\nEND $$"
      },
      {
        "Name": "usr_users_GetUserSetting_ByUserAndField",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\01_User_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Field",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get specific user setting by user and field name (legacy support)",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE PROCEDURE usr_users_GetUserSetting_ByUserAndField(\n    IN p_User VARCHAR(100), \n    IN p_Field VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_FieldValue TEXT DEFAULT NULL;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving setting ', p_Field, ' for user: ', p_User);\n    END;\n    \n    -- Check if user exists\n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_User);\n        SELECT NULL as FieldValue;\n    ELSE\n        -- Use fixed field names instead of dynamic SQL for MySQL 5.7.24 compatibility\n        CASE p_Field\n            WHEN 'LastShownVersion' THEN SELECT LastShownVersion INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'HideChangeLog' THEN SELECT HideChangeLog INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'Theme_Name' THEN SELECT Theme_Name INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'Theme_FontSize' THEN SELECT CAST(Theme_FontSize AS CHAR) INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'VisualUserName' THEN SELECT VisualUserName INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'VisualPassword' THEN SELECT VisualPassword INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'WipServerAddress' THEN SELECT WipServerAddress INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'WIPDatabase' THEN SELECT WIPDatabase INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'WipServerPort' THEN SELECT WipServerPort INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'FullName' THEN SELECT `Full Name` INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'Shift' THEN SELECT Shift INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'Pin' THEN SELECT Pin INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            ELSE SET v_FieldValue = NULL;\n        END CASE;\n        \n        SELECT v_FieldValue as FieldValue;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Setting ', p_Field, ' retrieved successfully for user: ', p_User);\n    END IF;\nEND $$"
      },
      {
        "Name": "usr_users_SetUserSetting_ByUserAndField",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\01_User_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Field",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Value",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Set specific user setting by user and field name (dynamic field updates)",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE PROCEDURE usr_users_SetUserSetting_ByUserAndField(\n    IN p_User VARCHAR(100), \n    IN p_Field VARCHAR(100), \n    IN p_Value TEXT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while setting ', p_Field, ' for user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Check if user exists, if not create basic user record\n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    \n    IF v_Count = 0 THEN\n        -- Create basic user record with required fields\n        INSERT INTO usr_users (User, `Full Name`) \n        VALUES (p_User, p_User);\n    END IF;\n    \n    -- Use fixed field names instead of dynamic SQL for MySQL 5.7.24 compatibility\n    CASE p_Field\n        WHEN 'LastShownVersion' THEN \n            UPDATE usr_users SET LastShownVersion = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'HideChangeLog' THEN \n            UPDATE usr_users SET HideChangeLog = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'Theme_Name' THEN \n            UPDATE usr_users SET Theme_Name = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'Theme_FontSize' THEN \n            UPDATE usr_users SET Theme_FontSize = CAST(p_Value AS UNSIGNED), ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'VisualUserName' THEN \n            UPDATE usr_users SET VisualUserName = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'VisualPassword' THEN \n            UPDATE usr_users SET VisualPassword = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'WipServerAddress' THEN \n            UPDATE usr_users SET WipServerAddress = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'WIPDatabase' THEN \n            UPDATE usr_users SET WIPDatabase = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'WipServerPort' THEN \n            UPDATE usr_users SET WipServerPort = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'FullName' THEN \n            UPDATE usr_users SET `Full Name` = p_Value WHERE User = p_User;\n        WHEN 'Shift' THEN \n            UPDATE usr_users SET Shift = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'Pin' THEN \n            UPDATE usr_users SET Pin = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        ELSE \n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('Unknown field: ', p_Field);\n            ROLLBACK;\n    END CASE;\n    \n    IF p_Status IS NULL THEN\n        SET v_RowsAffected = ROW_COUNT();\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Setting ', p_Field, ' updated successfully for user: ', p_User, ' (Rows affected: ', v_RowsAffected, ')');\n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "usr_user_roles_GetRoleId_ByUserId",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\01_User_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_UserID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get user role ID by user ID with status reporting",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE PROCEDURE usr_user_roles_GetRoleId_ByUserId(\n    IN p_UserID INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving role for user ID: ', p_UserID);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM sys_user_roles WHERE UserID = p_UserID;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('No role assignment found for user ID: ', p_UserID);\n        SELECT NULL as RoleID;\n    ELSE\n        SELECT RoleID FROM sys_user_roles WHERE UserID = p_UserID LIMIT 1;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Role retrieved successfully for user ID: ', p_UserID);\n    END IF;\nEND $$"
      },
      {
        "Name": "usr_users_Add_User",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\01_User_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_FullName",
            "DataType": "VARCHAR(200)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Shift",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_VitsUser",
            "DataType": "TINYINT(1)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_LastShownVersion",
            "DataType": "VARCHAR(20)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_HideChangeLog",
            "DataType": "VARCHAR(10)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Theme_Name",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Theme_FontSize",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_VisualUserName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_VisualPassword",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_WipServerAddress",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_WIPDatabase",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_WipServerPort",
            "DataType": "VARCHAR(10)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Add new user with all required fields (MySQL 5.7 Compatible)",
        "UsedByClasses": [
          "Control_Add_User",
          "Dao_User"
        ],
        "Body": "CREATE PROCEDURE usr_users_Add_User(\n    IN p_User VARCHAR(100),\n    IN p_FullName VARCHAR(200),\n    IN p_Shift VARCHAR(50),\n    IN p_VitsUser TINYINT(1), -- MySQL 5.7 compatible boolean\n    IN p_Pin VARCHAR(20),\n    IN p_LastShownVersion VARCHAR(20),\n    IN p_HideChangeLog VARCHAR(10),\n    IN p_Theme_Name VARCHAR(50),\n    IN p_Theme_FontSize INT,\n    IN p_VisualUserName VARCHAR(100),\n    IN p_VisualPassword VARCHAR(100),\n    IN p_WipServerAddress VARCHAR(100),\n    IN p_WIPDatabase VARCHAR(100),\n    IN p_WipServerPort VARCHAR(10),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while creating user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Check if user already exists\n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    \n    IF v_Count > 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User already exists: ', p_User);\n        ROLLBACK;\n    ELSE\n        INSERT INTO usr_users (\n            User, `Full Name`, Shift, VitsUser, Pin,\n            LastShownVersion, HideChangeLog, Theme_Name, Theme_FontSize,\n            VisualUserName, VisualPassword, WipServerAddress, \n            WIPDatabase, WipServerPort\n        ) VALUES (\n            p_User, p_FullName, p_Shift, p_VitsUser, p_Pin,\n            p_LastShownVersion, p_HideChangeLog, p_Theme_Name, p_Theme_FontSize,\n            p_VisualUserName, p_VisualPassword, p_WipServerAddress,\n            p_WIPDatabase, p_WipServerPort\n        );\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('User created successfully: ', p_User);\n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "usr_users_Update_User",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\01_User_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_FullName",
            "DataType": "VARCHAR(200)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Shift",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Pin",
            "DataType": "VARCHAR(20)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_VisualUserName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_VisualPassword",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Update existing user",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE PROCEDURE usr_users_Update_User(\n    IN p_User VARCHAR(100),\n    IN p_FullName VARCHAR(200),\n    IN p_Shift VARCHAR(50),\n    IN p_Pin VARCHAR(20),\n    IN p_VisualUserName VARCHAR(100),\n    IN p_VisualPassword VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Check if user exists\n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_User);\n        ROLLBACK;\n    ELSE\n        UPDATE usr_users \n        SET `Full Name` = p_FullName,\n            Shift = p_Shift,\n            Pin = p_Pin,\n            VisualUserName = p_VisualUserName,\n            VisualPassword = p_VisualPassword\n        WHERE User = p_User;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('User updated successfully: ', p_User);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No changes made to user: ', p_User);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "usr_users_Delete_User",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\01_User_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Delete user by username",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE PROCEDURE usr_users_Delete_User(\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Check if user exists\n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_User);\n        ROLLBACK;\n    ELSE\n        DELETE FROM usr_users WHERE User = p_User;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('User deleted successfully: ', p_User);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('Failed to delete user: ', p_User);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "usr_users_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\01_User_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get all users with status reporting",
        "UsedByClasses": [
          "Dao_User",
          "Helper_UI_ComboBoxes"
        ],
        "Body": "CREATE PROCEDURE usr_users_Get_All(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving all users';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users;\n    SELECT * FROM usr_users ORDER BY `Full Name`;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' users successfully');\nEND $$"
      },
      {
        "Name": "usr_users_Get_ByUser",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\01_User_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get user by username with status reporting",
        "UsedByClasses": [
          "Control_Add_User",
          "Dao_User"
        ],
        "Body": "CREATE PROCEDURE usr_users_Get_ByUser(\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving user: ', p_User);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_User);\n        SELECT NULL as User, NULL as `Full Name`; -- Return empty result set with structure\n    ELSE\n        SELECT * FROM usr_users WHERE User = p_User LIMIT 1;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('User retrieved successfully: ', p_User);\n    END IF;\nEND $$"
      },
      {
        "Name": "usr_users_Exists",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\01_User_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Check if user exists with status reporting",
        "UsedByClasses": [
          "Control_Add_User",
          "Dao_User"
        ],
        "Body": "CREATE PROCEDURE usr_users_Exists(\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while checking user existence: ', p_User);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    SELECT v_Count as UserExists;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('User existence check completed for: ', p_User, ' (Exists: ', IF(v_Count > 0, 'Yes', 'No'), ')');\nEND $$"
      },
      {
        "Name": "usr_ui_settings_SetThemeJson",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\01_User_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ThemeJson",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Set theme JSON settings (MySQL 5.7.8+ supports JSON)",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE PROCEDURE usr_ui_settings_SetThemeJson(\n    IN p_UserId VARCHAR(100),\n    IN p_ThemeJson TEXT, -- Use TEXT for broader compatibility\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while setting theme JSON';\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    INSERT INTO usr_ui_settings (UserId, SettingsJson, CreatedDate, ModifiedDate)\n    VALUES (p_UserId, p_ThemeJson, NOW(), NOW())\n    ON DUPLICATE KEY UPDATE \n        SettingsJson = p_ThemeJson,\n        ModifiedDate = NOW();\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = 'Theme JSON updated successfully';\n    \n    COMMIT;\nEND $$"
      },
      {
        "Name": "usr_ui_settings_SetJsonSetting",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\01_User_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_DgvName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_SettingJson",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Set JSON setting for grid views",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE PROCEDURE usr_ui_settings_SetJsonSetting(\n    IN p_UserId VARCHAR(100),\n    IN p_DgvName VARCHAR(100),\n    IN p_SettingJson TEXT, -- Use TEXT for broader compatibility\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while setting JSON setting';\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    INSERT INTO usr_ui_settings (UserId, DgvName, SettingsJson, CreatedDate, ModifiedDate)\n    VALUES (p_UserId, p_DgvName, p_SettingJson, NOW(), NOW())\n    ON DUPLICATE KEY UPDATE \n        SettingsJson = p_SettingJson,\n        ModifiedDate = NOW();\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = 'JSON setting updated successfully';\n    \n    COMMIT;\nEND $$"
      },
      {
        "Name": "usr_ui_settings_GetJsonSetting",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\01_User_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_SettingJson",
            "DataType": "TEXT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get JSON setting for grid views with status reporting",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE PROCEDURE usr_ui_settings_GetJsonSetting(\n    IN p_UserId VARCHAR(100),\n    OUT p_SettingJson TEXT, -- Use TEXT for broader compatibility\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while getting JSON setting';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_ui_settings WHERE UserId = p_UserId;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('No settings found for user: ', p_UserId);\n        SET p_SettingJson = NULL;\n    ELSE\n        SELECT SettingsJson INTO p_SettingJson\n        FROM usr_ui_settings \n        WHERE UserId = p_UserId \n        LIMIT 1;\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('JSON setting retrieved successfully for user: ', p_UserId);\n    END IF;\nEND $$"
      },
      {
        "Name": "usr_ui_settings_GetShortcutsJson",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\01_User_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ShortcutsJson",
            "DataType": "TEXT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get shortcuts JSON with status reporting",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE PROCEDURE usr_ui_settings_GetShortcutsJson(\n    IN p_UserId VARCHAR(100),\n    OUT p_ShortcutsJson TEXT, -- Use TEXT for broader compatibility\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while getting shortcuts JSON';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_ui_settings WHERE UserId = p_UserId;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('No shortcuts found for user: ', p_UserId);\n        SET p_ShortcutsJson = NULL;\n    ELSE\n        SELECT ShortcutsJson INTO p_ShortcutsJson\n        FROM usr_ui_settings \n        WHERE UserId = p_UserId \n        LIMIT 1;\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Shortcuts JSON retrieved successfully for user: ', p_UserId);\n    END IF;\nEND $$"
      },
      {
        "Name": "usr_ui_settings_SetShortcutsJson",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\01_User_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ShortcutsJson",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Set shortcuts JSON",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE PROCEDURE usr_ui_settings_SetShortcutsJson(\n    IN p_UserId VARCHAR(100),\n    IN p_ShortcutsJson TEXT, -- Use TEXT for broader compatibility\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while setting shortcuts JSON';\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    INSERT INTO usr_ui_settings (UserId, ShortcutsJson, CreatedDate, ModifiedDate)\n    VALUES (p_UserId, p_ShortcutsJson, NOW(), NOW())\n    ON DUPLICATE KEY UPDATE \n        ShortcutsJson = p_ShortcutsJson,\n        ModifiedDate = NOW();\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = 'Shortcuts JSON updated successfully';\n    \n    COMMIT;\nEND $$"
      },
      {
        "Name": "sys_user_roles_Add",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\02_System_Role_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_UserID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_RoleID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_AssignedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Add user role assignment with status reporting",
        "UsedByClasses": [
          "Control_Add_User",
          "Dao_User"
        ],
        "Body": "CREATE PROCEDURE sys_user_roles_Add(\n    IN p_UserID INT,\n    IN p_RoleID INT,\n    IN p_AssignedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_UserCount INT DEFAULT 0;\n    DECLARE v_RoleCount INT DEFAULT 0;\n    DECLARE v_ExistingCount INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding role assignment for user ID: ', p_UserID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Validate user exists\n    SELECT COUNT(*) INTO v_UserCount FROM usr_users WHERE ID = p_UserID;\n    IF v_UserCount = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User ID not found: ', p_UserID);\n        ROLLBACK;\n    ELSE\n        -- Validate role exists  \n        SELECT COUNT(*) INTO v_RoleCount FROM sys_roles WHERE ID = p_RoleID;\n        IF v_RoleCount = 0 THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('Role ID not found: ', p_RoleID);\n            ROLLBACK;\n        ELSE\n            -- Check if assignment already exists\n            SELECT COUNT(*) INTO v_ExistingCount FROM sys_user_roles WHERE UserID = p_UserID AND RoleID = p_RoleID;\n            IF v_ExistingCount > 0 THEN\n                SET p_Status = 1;\n                SET p_ErrorMsg = CONCAT('Role assignment already exists for user ID: ', p_UserID);\n                ROLLBACK;\n            ELSE\n                INSERT INTO sys_user_roles (UserID, RoleID, AssignedBy, AssignedDate)\n                VALUES (p_UserID, p_RoleID, p_AssignedBy, NOW());\n                \n                SET p_Status = 0;\n                SET p_ErrorMsg = CONCAT('Role assignment added successfully for user ID: ', p_UserID);\n                COMMIT;\n            END IF;\n        END IF;\n    END IF;\nEND $$"
      },
      {
        "Name": "sys_user_roles_Update",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\02_System_Role_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_UserID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_NewRoleID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_AssignedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Update user role assignment with status reporting",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE PROCEDURE sys_user_roles_Update(\n    IN p_UserID INT,\n    IN p_NewRoleID INT,\n    IN p_AssignedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_UserCount INT DEFAULT 0;\n    DECLARE v_RoleCount INT DEFAULT 0;\n    DECLARE v_ExistingCount INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating role assignment for user ID: ', p_UserID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Validate user exists\n    SELECT COUNT(*) INTO v_UserCount FROM usr_users WHERE ID = p_UserID;\n    IF v_UserCount = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User ID not found: ', p_UserID);\n        ROLLBACK;\n    ELSE\n        -- Validate new role exists\n        SELECT COUNT(*) INTO v_RoleCount FROM sys_roles WHERE ID = p_NewRoleID;\n        IF v_RoleCount = 0 THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('Role ID not found: ', p_NewRoleID);\n            ROLLBACK;\n        ELSE\n            -- Check if user has any role assignment\n            SELECT COUNT(*) INTO v_ExistingCount FROM sys_user_roles WHERE UserID = p_UserID;\n            IF v_ExistingCount = 0 THEN\n                -- Insert new role assignment\n                INSERT INTO sys_user_roles (UserID, RoleID, AssignedBy, AssignedDate)\n                VALUES (p_UserID, p_NewRoleID, p_AssignedBy, NOW());\n                \n                SET p_Status = 0;\n                SET p_ErrorMsg = CONCAT('New role assignment created for user ID: ', p_UserID);\n            ELSE\n                -- Update existing role assignment\n                UPDATE sys_user_roles \n                SET RoleID = p_NewRoleID,\n                    AssignedBy = p_AssignedBy,\n                    AssignedDate = NOW()\n                WHERE UserID = p_UserID;\n                \n                SET v_RowsAffected = ROW_COUNT();\n                \n                IF v_RowsAffected > 0 THEN\n                    SET p_Status = 0;\n                    SET p_ErrorMsg = CONCAT('Role assignment updated successfully for user ID: ', p_UserID);\n                ELSE\n                    SET p_Status = 2;\n                    SET p_ErrorMsg = CONCAT('No changes made to role assignment for user ID: ', p_UserID);\n                END IF;\n            END IF;\n            \n            COMMIT;\n        END IF;\n    END IF;\nEND $$"
      },
      {
        "Name": "sys_user_roles_Delete",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\02_System_Role_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_UserID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_RoleID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Delete user role assignment with status reporting",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE PROCEDURE sys_user_roles_Delete(\n    IN p_UserID INT,\n    IN p_RoleID INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_ExistingCount INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting role assignment for user ID: ', p_UserID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Check if assignment exists\n    SELECT COUNT(*) INTO v_ExistingCount FROM sys_user_roles WHERE UserID = p_UserID AND RoleID = p_RoleID;\n    IF v_ExistingCount = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Role assignment not found for user ID: ', p_UserID, ' and role ID: ', p_RoleID);\n        ROLLBACK;\n    ELSE\n        DELETE FROM sys_user_roles WHERE UserID = p_UserID AND RoleID = p_RoleID;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Role assignment deleted successfully for user ID: ', p_UserID);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('Failed to delete role assignment for user ID: ', p_UserID);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "sys_roles_Get_ById",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\02_System_Role_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_ID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get role information by ID",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE PROCEDURE sys_roles_Get_ById(\n    IN p_ID INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving role with ID: ', p_ID);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM sys_roles WHERE ID = p_ID;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Role not found with ID: ', p_ID);\n        SELECT NULL as ID, NULL as RoleName, NULL as Description;\n    ELSE\n        SELECT * FROM sys_roles WHERE ID = p_ID LIMIT 1;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Role retrieved successfully with ID: ', p_ID);\n    END IF;\nEND $$"
      },
      {
        "Name": "sys_SetUserAccessType",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\02_System_Role_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_UserName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_AccessType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Set user access type with status reporting",
        "UsedByClasses": [
          "Dao_System",
          "Program"
        ],
        "Body": "CREATE PROCEDURE sys_SetUserAccessType(\n    IN p_UserName VARCHAR(100),\n    IN p_AccessType VARCHAR(50),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_UserCount INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while setting access type for user: ', p_UserName);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Check if user exists\n    SELECT COUNT(*) INTO v_UserCount FROM usr_users WHERE User = p_UserName;\n    IF v_UserCount = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_UserName);\n        ROLLBACK;\n    ELSE\n        -- Update user access type\n        UPDATE usr_users \n        SET AccessType = p_AccessType, \n            ModifiedDate = NOW() \n        WHERE User = p_UserName;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Access type updated successfully for user: ', p_UserName);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No changes made to access type for user: ', p_UserName);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "sys_GetUserAccessType",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\02_System_Role_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get user access type information",
        "UsedByClasses": [
          "Dao_System",
          "Program"
        ],
        "Body": "CREATE PROCEDURE sys_GetUserAccessType(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving user access information';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users;\n    \n    -- Return user access information\n    SELECT \n        ID,\n        User,\n        `Full Name`,\n        AccessType,\n        VitsUser,\n        CreatedDate,\n        ModifiedDate\n    FROM usr_users \n    ORDER BY `Full Name`;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved user access information for ', v_Count, ' users');\nEND $$"
      },
      {
        "Name": "sys_GetUserIdByName",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\02_System_Role_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_UserName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get user ID by username",
        "UsedByClasses": [
          "Dao_System"
        ],
        "Body": "CREATE PROCEDURE sys_GetUserIdByName(\n    IN p_UserName VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_UserID INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving user ID for: ', p_UserName);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_UserName;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_UserName);\n        SELECT NULL as UserID;\n    ELSE\n        SELECT ID INTO v_UserID FROM usr_users WHERE User = p_UserName LIMIT 1;\n        SELECT v_UserID as UserID;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('User ID retrieved successfully for: ', p_UserName);\n    END IF;\nEND $$"
      },
      {
        "Name": "sys_GetRoleIdByName",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\02_System_Role_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_RoleName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get role ID by role name",
        "UsedByClasses": [
          "Dao_System"
        ],
        "Body": "CREATE PROCEDURE sys_GetRoleIdByName(\n    IN p_RoleName VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RoleID INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving role ID for: ', p_RoleName);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM sys_roles WHERE RoleName = p_RoleName;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Role not found: ', p_RoleName);\n        SELECT NULL as RoleID;\n    ELSE\n        SELECT ID INTO v_RoleID FROM sys_roles WHERE RoleName = p_RoleName LIMIT 1;\n        SELECT v_RoleID as RoleID;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Role ID retrieved successfully for: ', p_RoleName);\n    END IF;\nEND $$"
      },
      {
        "Name": "md_part_ids_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\03_Master_Data_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get all part IDs with status reporting",
        "UsedByClasses": [
          "Dao_Part",
          "Helper_UI_ComboBoxes"
        ],
        "Body": "CREATE PROCEDURE md_part_ids_Get_All(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving all part IDs';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_part_ids;\n    SELECT * FROM md_part_ids ORDER BY PartID;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' part IDs successfully');\nEND $$"
      },
      {
        "Name": "md_part_ids_Get_ByPartID",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\03_Master_Data_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get part ID by specific part ID",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE md_part_ids_Get_ByPartID(\n    IN p_PartID VARCHAR(300),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving part ID: ', p_PartID);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_part_ids WHERE PartID = p_PartID;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Part ID not found: ', p_PartID);\n        SELECT NULL as PartID, NULL as ItemType;\n    ELSE\n        SELECT * FROM md_part_ids WHERE PartID = p_PartID LIMIT 1;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Part ID retrieved successfully: ', p_PartID);\n    END IF;\nEND $$"
      },
      {
        "Name": "md_part_ids_GetItemType_ByPartID",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\03_Master_Data_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get item type by part ID",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE PROCEDURE md_part_ids_GetItemType_ByPartID(\n    IN p_PartID VARCHAR(300),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving item type for part ID: ', p_PartID);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_part_ids WHERE PartID = p_PartID;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Part ID not found: ', p_PartID);\n        SELECT NULL as ItemType;\n    ELSE\n        SELECT ItemType FROM md_part_ids WHERE PartID = p_PartID LIMIT 1;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Item type retrieved successfully for part ID: ', p_PartID);\n    END IF;\nEND $$"
      },
      {
        "Name": "md_part_ids_Exists_ByPartID",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\03_Master_Data_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Check if part ID exists",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE md_part_ids_Exists_ByPartID(\n    IN p_PartID VARCHAR(300),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while checking part ID existence: ', p_PartID);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_part_ids WHERE PartID = p_PartID;\n    SELECT v_Count as PartExists;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Part ID existence check completed for: ', p_PartID, ' (Exists: ', IF(v_Count > 0, 'Yes', 'No'), ')');\nEND $$"
      },
      {
        "Name": "md_part_ids_Add_PartID",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\03_Master_Data_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Add new part ID",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE md_part_ids_Add_PartID(\n    IN p_PartID VARCHAR(300),\n    IN p_ItemType VARCHAR(50),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding part ID: ', p_PartID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Check if part ID already exists\n    SELECT COUNT(*) INTO v_Count FROM md_part_ids WHERE PartID = p_PartID;\n    \n    IF v_Count > 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Part ID already exists: ', p_PartID);\n        ROLLBACK;\n    ELSE\n        INSERT INTO md_part_ids (PartID, ItemType, IssuedBy)\n        VALUES (p_PartID, p_ItemType, p_IssuedBy);\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Part ID added successfully: ', p_PartID);\n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "md_part_ids_Update_PartID",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\03_Master_Data_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_OldPartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_NewPartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Update existing part ID",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE md_part_ids_Update_PartID(\n    IN p_OldPartID VARCHAR(300),\n    IN p_NewPartID VARCHAR(300),\n    IN p_ItemType VARCHAR(50),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating part ID: ', p_OldPartID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Check if old part ID exists\n    SELECT COUNT(*) INTO v_Count FROM md_part_ids WHERE PartID = p_OldPartID;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Part ID not found: ', p_OldPartID);\n        ROLLBACK;\n    ELSE\n        UPDATE md_part_ids \n        SET PartID = p_NewPartID,\n            ItemType = p_ItemType,\n            IssuedBy = p_IssuedBy\n        WHERE PartID = p_OldPartID;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Part ID updated successfully from ', p_OldPartID, ' to ', p_NewPartID);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No changes made to part ID: ', p_OldPartID);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "md_part_ids_Delete_ByPartID",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\03_Master_Data_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Delete part ID",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE md_part_ids_Delete_ByPartID(\n    IN p_PartID VARCHAR(300),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting part ID: ', p_PartID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Check if part ID exists\n    SELECT COUNT(*) INTO v_Count FROM md_part_ids WHERE PartID = p_PartID;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Part ID not found: ', p_PartID);\n        ROLLBACK;\n    ELSE\n        DELETE FROM md_part_ids WHERE PartID = p_PartID;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Part ID deleted successfully: ', p_PartID);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('Failed to delete part ID: ', p_PartID);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "md_operation_numbers_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\03_Master_Data_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get all operation numbers with status reporting",
        "UsedByClasses": [
          "Dao_Operation",
          "Helper_UI_ComboBoxes"
        ],
        "Body": "CREATE PROCEDURE md_operation_numbers_Get_All(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving all operations';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_operation_numbers;\n    SELECT * FROM md_operation_numbers ORDER BY Operation;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' operations successfully');\nEND $$"
      },
      {
        "Name": "md_operation_numbers_Exists_ByOperation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\03_Master_Data_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Check if operation exists",
        "UsedByClasses": [
          "Control_Add_Operation",
          "Dao_Operation"
        ],
        "Body": "CREATE PROCEDURE md_operation_numbers_Exists_ByOperation(\n    IN p_Operation VARCHAR(50),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while checking operation existence: ', p_Operation);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_operation_numbers WHERE Operation = p_Operation;\n    SELECT v_Count as OperationExists;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Operation existence check completed for: ', p_Operation, ' (Exists: ', IF(v_Count > 0, 'Yes', 'No'), ')');\nEND $$"
      },
      {
        "Name": "md_operation_numbers_Add_Operation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\03_Master_Data_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Add new operation",
        "UsedByClasses": [
          "Control_Add_Operation",
          "Dao_Operation"
        ],
        "Body": "CREATE PROCEDURE md_operation_numbers_Add_Operation(\n    IN p_Operation VARCHAR(50),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding operation: ', p_Operation);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Check if operation already exists\n    SELECT COUNT(*) INTO v_Count FROM md_operation_numbers WHERE Operation = p_Operation;\n    \n    IF v_Count > 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Operation already exists: ', p_Operation);\n        ROLLBACK;\n    ELSE\n        INSERT INTO md_operation_numbers (Operation, IssuedBy)\n        VALUES (p_Operation, p_IssuedBy);\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Operation added successfully: ', p_Operation);\n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "md_operation_numbers_Update_Operation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\03_Master_Data_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_OldOperation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_NewOperation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Update existing operation",
        "UsedByClasses": [
          "Dao_Operation"
        ],
        "Body": "CREATE PROCEDURE md_operation_numbers_Update_Operation(\n    IN p_OldOperation VARCHAR(50),\n    IN p_NewOperation VARCHAR(50),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating operation: ', p_OldOperation);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Check if old operation exists\n    SELECT COUNT(*) INTO v_Count FROM md_operation_numbers WHERE Operation = p_OldOperation;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Operation not found: ', p_OldOperation);\n        ROLLBACK;\n    ELSE\n        UPDATE md_operation_numbers \n        SET Operation = p_NewOperation,\n            IssuedBy = p_IssuedBy\n        WHERE Operation = p_OldOperation;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Operation updated successfully from ', p_OldOperation, ' to ', p_NewOperation);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No changes made to operation: ', p_OldOperation);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "md_operation_numbers_Delete_ByOperation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\03_Master_Data_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Delete operation",
        "UsedByClasses": [
          "Dao_Operation"
        ],
        "Body": "CREATE PROCEDURE md_operation_numbers_Delete_ByOperation(\n    IN p_Operation VARCHAR(50),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting operation: ', p_Operation);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Check if operation exists\n    SELECT COUNT(*) INTO v_Count FROM md_operation_numbers WHERE Operation = p_Operation;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Operation not found: ', p_Operation);\n        ROLLBACK;\n    ELSE\n        DELETE FROM md_operation_numbers WHERE Operation = p_Operation;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Operation deleted successfully: ', p_Operation);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('Failed to delete operation: ', p_Operation);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "md_locations_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\03_Master_Data_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get all locations with status reporting",
        "UsedByClasses": [
          "Dao_Location",
          "Helper_UI_ComboBoxes"
        ],
        "Body": "CREATE PROCEDURE md_locations_Get_All(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving all locations';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_locations;\n    SELECT * FROM md_locations ORDER BY Location;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' locations successfully');\nEND $$"
      },
      {
        "Name": "md_locations_Exists_ByLocation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\03_Master_Data_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Location",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Check if location exists",
        "UsedByClasses": [
          "Dao_Location"
        ],
        "Body": "CREATE PROCEDURE md_locations_Exists_ByLocation(\n    IN p_Location VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while checking location existence: ', p_Location);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_locations WHERE Location = p_Location;\n    SELECT v_Count as LocationExists;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Location existence check completed for: ', p_Location, ' (Exists: ', IF(v_Count > 0, 'Yes', 'No'), ')');\nEND $$"
      },
      {
        "Name": "md_locations_Add_Location",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\03_Master_Data_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Location",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Building",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Add new location",
        "UsedByClasses": [
          "Dao_Location"
        ],
        "Body": "CREATE PROCEDURE md_locations_Add_Location(\n    IN p_Location VARCHAR(100),\n    IN p_Building VARCHAR(100),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding location: ', p_Location);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Check if location already exists\n    SELECT COUNT(*) INTO v_Count FROM md_locations WHERE Location = p_Location;\n    \n    IF v_Count > 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Location already exists: ', p_Location);\n        ROLLBACK;\n    ELSE\n        INSERT INTO md_locations (Location, Building, IssuedBy)\n        VALUES (p_Location, p_Building, p_IssuedBy);\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Location added successfully: ', p_Location);\n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "md_locations_Update_Location",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\03_Master_Data_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_OldLocation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_NewLocation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Building",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Update existing location",
        "UsedByClasses": [
          "Dao_Location"
        ],
        "Body": "CREATE PROCEDURE md_locations_Update_Location(\n    IN p_OldLocation VARCHAR(100),\n    IN p_NewLocation VARCHAR(100),\n    IN p_Building VARCHAR(100),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating location: ', p_OldLocation);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Check if old location exists\n    SELECT COUNT(*) INTO v_Count FROM md_locations WHERE Location = p_OldLocation;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Location not found: ', p_OldLocation);\n        ROLLBACK;\n    ELSE\n        UPDATE md_locations \n        SET Location = p_NewLocation,\n            Building = p_Building,\n            IssuedBy = p_IssuedBy\n        WHERE Location = p_OldLocation;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Location updated successfully from ', p_OldLocation, ' to ', p_NewLocation);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No changes made to location: ', p_OldLocation);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "md_locations_Delete_ByLocation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\03_Master_Data_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Location",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Delete location",
        "UsedByClasses": [
          "Dao_Location"
        ],
        "Body": "CREATE PROCEDURE md_locations_Delete_ByLocation(\n    IN p_Location VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting location: ', p_Location);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Check if location exists\n    SELECT COUNT(*) INTO v_Count FROM md_locations WHERE Location = p_Location;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Location not found: ', p_Location);\n        ROLLBACK;\n    ELSE\n        DELETE FROM md_locations WHERE Location = p_Location;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Location deleted successfully: ', p_Location);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('Failed to delete location: ', p_Location);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "md_item_types_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\03_Master_Data_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get all item types with status reporting",
        "UsedByClasses": [
          "Dao_ItemType",
          "Helper_UI_ComboBoxes"
        ],
        "Body": "CREATE PROCEDURE md_item_types_Get_All(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving all item types';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_item_types;\n    SELECT * FROM md_item_types ORDER BY ItemType;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' item types successfully');\nEND $$"
      },
      {
        "Name": "md_item_types_GetDistinct",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\03_Master_Data_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get distinct item types for dropdown lists",
        "UsedByClasses": [
          "Dao_Part"
        ],
        "Body": "CREATE PROCEDURE md_item_types_GetDistinct(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving distinct item types';\n    END;\n    \n    SELECT COUNT(DISTINCT ItemType) INTO v_Count FROM md_item_types;\n    SELECT DISTINCT ItemType FROM md_item_types ORDER BY ItemType;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' distinct item types successfully');\nEND $$"
      },
      {
        "Name": "md_item_types_Exists_ByItemType",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\03_Master_Data_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Check if item type exists",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE md_item_types_Exists_ByItemType(\n    IN p_ItemType VARCHAR(50),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while checking item type existence: ', p_ItemType);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_item_types WHERE ItemType = p_ItemType;\n    SELECT v_Count as ItemTypeExists;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Item type existence check completed for: ', p_ItemType, ' (Exists: ', IF(v_Count > 0, 'Yes', 'No'), ')');\nEND $$"
      },
      {
        "Name": "md_item_types_Add_ItemType",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\03_Master_Data_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Add new item type",
        "UsedByClasses": [
          "Dao_ItemType"
        ],
        "Body": "CREATE PROCEDURE md_item_types_Add_ItemType(\n    IN p_ItemType VARCHAR(50),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding item type: ', p_ItemType);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Check if item type already exists\n    SELECT COUNT(*) INTO v_Count FROM md_item_types WHERE ItemType = p_ItemType;\n    \n    IF v_Count > 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Item type already exists: ', p_ItemType);\n        ROLLBACK;\n    ELSE\n        INSERT INTO md_item_types (ItemType, IssuedBy)\n        VALUES (p_ItemType, p_IssuedBy);\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Item type added successfully: ', p_ItemType);\n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "md_item_types_Update_ItemType",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\03_Master_Data_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_OldItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_NewItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Update existing item type",
        "UsedByClasses": [
          "Dao_ItemType"
        ],
        "Body": "CREATE PROCEDURE md_item_types_Update_ItemType(\n    IN p_OldItemType VARCHAR(50),\n    IN p_NewItemType VARCHAR(50),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating item type: ', p_OldItemType);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Check if old item type exists\n    SELECT COUNT(*) INTO v_Count FROM md_item_types WHERE ItemType = p_OldItemType;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Item type not found: ', p_OldItemType);\n        ROLLBACK;\n    ELSE\n        UPDATE md_item_types \n        SET ItemType = p_NewItemType,\n            IssuedBy = p_IssuedBy\n        WHERE ItemType = p_OldItemType;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Item type updated successfully from ', p_OldItemType, ' to ', p_NewItemType);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No changes made to item type: ', p_OldItemType);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "md_item_types_Delete_ByItemType",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\03_Master_Data_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Delete item type",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE md_item_types_Delete_ByItemType(\n    IN p_ItemType VARCHAR(50),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting item type: ', p_ItemType);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Check if item type exists\n    SELECT COUNT(*) INTO v_Count FROM md_item_types WHERE ItemType = p_ItemType;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Item type not found: ', p_ItemType);\n        ROLLBACK;\n    ELSE\n        DELETE FROM md_item_types WHERE ItemType = p_ItemType;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Item type deleted successfully: ', p_ItemType);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('Failed to delete item type: ', p_ItemType);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "inv_inventory_Add_Item",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\04_Inventory_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Location",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Quantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_BatchNumber",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Notes",
            "DataType": "VARCHAR(1000)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_inventory_Add_Item`(\n    IN p_PartID VARCHAR(300),\n    IN p_Location VARCHAR(100),\n    IN p_Operation VARCHAR(100),\n    IN p_Quantity INT,\n    IN p_ItemType VARCHAR(100),\n    IN p_User VARCHAR(100),\n    IN p_BatchNumber VARCHAR(100),\n    IN p_Notes VARCHAR(1000),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_NextBatchNumber VARCHAR(20);\n    DECLARE v_ErrorMessage TEXT DEFAULT '';\n    DECLARE v_CurrentMax INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        GET DIAGNOSTICS CONDITION 1 v_ErrorMessage = MESSAGE_TEXT;\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding inventory item for part: ', p_PartID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    CREATE TABLE IF NOT EXISTS inv_inventory_batch_seq (\n        last_batch_number INT(11) NOT NULL DEFAULT 0,\n        created_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        updated_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n    \n    IF (SELECT COUNT(*) FROM inv_inventory_batch_seq) = 0 THEN\n        SELECT COALESCE(MAX(CAST(CASE \n            WHEN BatchNumber IS NOT NULL AND BatchNumber REGEXP '^[0-9]+$' \n            THEN BatchNumber ELSE '0' END AS UNSIGNED)), 0) INTO v_CurrentMax FROM inv_inventory;\n        INSERT INTO inv_inventory_batch_seq (last_batch_number) VALUES (v_CurrentMax);\n    END IF;\n    \n    UPDATE inv_inventory_batch_seq SET last_batch_number = last_batch_number + 1 WHERE TRUE;\n    SELECT last_batch_number INTO @nextBatch FROM inv_inventory_batch_seq LIMIT 1;\n    SET v_NextBatchNumber = LPAD(@nextBatch, 10, '0');\n    \n    IF p_Quantity <= 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Quantity must be greater than zero';\n        ROLLBACK;\n    ELSE\n        INSERT INTO inv_inventory (PartID, Location, Operation, Quantity, ItemType, User, BatchNumber, Notes, ReceiveDate, LastUpdated)\n        VALUES (p_PartID, p_Location, p_Operation, p_Quantity, p_ItemType, p_User, v_NextBatchNumber, p_Notes, NOW(), NOW());\n        \n        INSERT INTO inv_transaction (TransactionType, BatchNumber, PartID, FromLocation, ToLocation, Operation, Quantity, Notes, User, ItemType, ReceiveDate)\n        VALUES ('IN', v_NextBatchNumber, p_PartID, p_Location, NULL, p_Operation, p_Quantity, p_Notes, p_User, p_ItemType, NOW());\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('New inventory batch created successfully for part: ', p_PartID, ' with batch: ', v_NextBatchNumber, ', quantity: ', p_Quantity);\n        COMMIT;\n    END IF;\nEND$$"
      },
      {
        "Name": "inv_inventory_Remove_Item",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\04_Inventory_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Location",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Quantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_BatchNumber",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Notes",
            "DataType": "VARCHAR(1000)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE PROCEDURE inv_inventory_Remove_Item(\n    IN p_PartID VARCHAR(300),\n    IN p_Location VARCHAR(100),\n    IN p_Operation VARCHAR(100),\n    IN p_Quantity INT,\n    IN p_ItemType VARCHAR(100),\n    IN p_User VARCHAR(100),\n    IN p_BatchNumber VARCHAR(100),\n    IN p_Notes VARCHAR(1000),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    DECLARE v_ErrorMessage TEXT DEFAULT '';\n    DECLARE v_RecordCount INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        GET DIAGNOSTICS CONDITION 1 v_ErrorMessage = MESSAGE_TEXT;\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while removing inventory item for part: ', p_PartID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    IF p_Quantity <= 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Quantity must be greater than zero';\n        ROLLBACK;\n    ELSE\n        SELECT COUNT(*) INTO v_RecordCount FROM inv_inventory WHERE PartID = p_PartID AND Location = p_Location AND Operation = p_Operation;\n          \n        IF v_RecordCount = 0 THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('No inventory records found for PartID: ', p_PartID, ', Location: ', p_Location, ', Operation: ', p_Operation);\n        ELSE\n            DELETE FROM inv_inventory WHERE PartID = p_PartID AND Location = p_Location AND Operation = p_Operation AND Quantity = p_Quantity\n                AND (p_BatchNumber IS NULL OR p_BatchNumber = '' OR BatchNumber = p_BatchNumber)\n                AND (p_Notes IS NULL OR p_Notes = '' OR Notes IS NULL OR Notes = '' OR Notes = p_Notes) LIMIT 1;\n            \n            SET v_RowsAffected = ROW_COUNT();\n            \n            IF v_RowsAffected = 0 THEN\n                DELETE FROM inv_inventory WHERE PartID = p_PartID AND Location = p_Location AND Operation = p_Operation AND Quantity = p_Quantity LIMIT 1;\n                SET v_RowsAffected = ROW_COUNT();\n            END IF;\n            \n            IF v_RowsAffected > 0 THEN\n                INSERT INTO inv_transaction (TransactionType, PartID, FromLocation, Operation, Quantity, ItemType, User, BatchNumber, Notes, ReceiveDate)\n                VALUES ('OUT', p_PartID, p_Location, p_Operation, p_Quantity, p_ItemType, p_User, p_BatchNumber, p_Notes, NOW());\n                \n                SET p_Status = 0;\n                SET p_ErrorMsg = CONCAT('Inventory item removed successfully for part: ', p_PartID, ', quantity: ', p_Quantity);\n            ELSE\n                SET p_Status = 1;\n                SET p_ErrorMsg = CONCAT('No matching inventory item found for removal. Found ', v_RecordCount, ' records for PartID: ', p_PartID, ', Location: ', p_Location, ', Operation: ', p_Operation, ' but none matched Quantity: ', p_Quantity);\n            END IF;\n        END IF;\n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "inv_inventory_Transfer_Part",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\04_Inventory_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_BatchNumber",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_NewLocation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE PROCEDURE inv_inventory_Transfer_Part(\n    IN p_BatchNumber VARCHAR(300),\n    IN p_PartID VARCHAR(300),\n    IN p_Operation VARCHAR(100),\n    IN p_NewLocation VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    DECLARE v_ErrorMessage TEXT DEFAULT '';\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        GET DIAGNOSTICS CONDITION 1 v_ErrorMessage = MESSAGE_TEXT;\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while transferring part: ', p_PartID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    IF EXISTS (SELECT 1 FROM inv_inventory WHERE BatchNumber = p_BatchNumber AND PartID = p_PartID AND Operation = p_Operation) THEN\n        UPDATE inv_inventory SET Location = p_NewLocation, LastUpdated = NOW() WHERE BatchNumber = p_BatchNumber AND PartID = p_PartID AND Operation = p_Operation;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Part transferred successfully to ', p_NewLocation);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No transfer occurred for part: ', p_PartID);\n        END IF;\n    ELSE\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('No inventory found for part: ', p_PartID, ', batch: ', p_BatchNumber, ', operation: ', p_Operation);\n    END IF;\n    COMMIT;\nEND $$"
      },
      {
        "Name": "inv_inventory_transfer_quantity",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\04_Inventory_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_BatchNumber",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_TransferQuantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_OriginalQuantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_NewLocation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE PROCEDURE inv_inventory_transfer_quantity(\n    IN p_BatchNumber VARCHAR(300),\n    IN p_PartID VARCHAR(300),\n    IN p_Operation VARCHAR(100),\n    IN p_TransferQuantity INT,\n    IN p_OriginalQuantity INT,\n    IN p_NewLocation VARCHAR(100),\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_ErrorMessage TEXT DEFAULT '';\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        GET DIAGNOSTICS CONDITION 1 v_ErrorMessage = MESSAGE_TEXT;\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while transferring quantity for part: ', p_PartID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    IF p_TransferQuantity <= 0 OR p_TransferQuantity > p_OriginalQuantity THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Invalid transfer quantity';\n        ROLLBACK;\n    ELSE\n        UPDATE inv_inventory SET Quantity = Quantity - p_TransferQuantity, LastUpdated = NOW()\n        WHERE BatchNumber = p_BatchNumber AND PartID = p_PartID AND Operation = p_Operation AND Quantity = p_OriginalQuantity;\n        \n        INSERT INTO inv_inventory (BatchNumber, PartID, Operation, Quantity, Location, User, ItemType, ReceiveDate, LastUpdated)\n        SELECT p_BatchNumber, p_PartID, p_Operation, p_TransferQuantity, p_NewLocation, p_User, ItemType, NOW(), NOW()\n        FROM inv_inventory WHERE BatchNumber = p_BatchNumber AND PartID = p_PartID AND Operation = p_Operation LIMIT 1;\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Quantity transferred successfully from original location to ', p_NewLocation);\n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "inv_inventory_GetNextBatchNumber",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\04_Inventory_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_inventory_GetNextBatchNumber`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_ErrorMessage TEXT DEFAULT '';\n    DECLARE v_NextBatchNumber VARCHAR(20) DEFAULT '0000000001';\n    DECLARE v_CurrentMax INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        GET DIAGNOSTICS CONDITION 1 v_ErrorMessage = MESSAGE_TEXT;\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while generating next batch number';\n        INSERT IGNORE INTO log_error (User, Severity, ErrorType, ErrorMessage, StackTrace, ModuleName, MethodName, AdditionalInfo, MachineName, OSVersion, AppVersion, ErrorTime)\n        VALUES ('SYSTEM', 'Error', 'DatabaseError', CONCAT('inv_inventory_GetNextBatchNumber failed: ', v_ErrorMessage), v_ErrorMessage,\n        'inv_inventory_GetNextBatchNumber', 'GetNextBatchNumber', 'Error generating next batch number', 'Database Server', 'MySQL 5.7.24', '5.0.1.2', NOW());\n    END;\n    \n    CREATE TABLE IF NOT EXISTS inv_inventory_batch_seq (\n        last_batch_number INT(11) NOT NULL DEFAULT 0,\n        created_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        updated_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n    \n    IF (SELECT COUNT(*) FROM inv_inventory_batch_seq) = 0 THEN\n        SELECT COALESCE(MAX(CAST(CASE WHEN BatchNumber IS NOT NULL AND BatchNumber REGEXP '^[0-9]+$' \n        THEN BatchNumber ELSE '0' END AS UNSIGNED)), 0) INTO v_CurrentMax FROM inv_inventory;\n        INSERT INTO inv_inventory_batch_seq (last_batch_number) VALUES (v_CurrentMax);\n    END IF;\n    \n    SELECT LPAD(COALESCE(last_batch_number + 1, 1), 10, '0') INTO v_NextBatchNumber FROM inv_inventory_batch_seq LIMIT 1;\n    \n    IF v_NextBatchNumber IS NULL OR v_NextBatchNumber = '0000000000' THEN\n        SELECT LPAD(COALESCE(MAX(CAST(CASE WHEN BatchNumber IS NOT NULL AND BatchNumber REGEXP '^[0-9]+$' \n        THEN BatchNumber ELSE '0' END AS UNSIGNED)), 0) + 1, 10, '0') INTO v_NextBatchNumber FROM inv_inventory;\n        \n        IF v_NextBatchNumber IS NULL OR v_NextBatchNumber = '0000000000' THEN\n            SET v_NextBatchNumber = '0000000001';\n        END IF;\n    END IF;\n    \n    SELECT v_NextBatchNumber as NextBatchNumber;\n    SET p_Status = 0;\n    SET p_ErrorMsg = 'Next batch number generated successfully';\nEND$$"
      },
      {
        "Name": "inv_inventory_Get_ByPartID",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\04_Inventory_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE PROCEDURE inv_inventory_Get_ByPartID(\n    IN p_PartID VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_ErrorMessage TEXT DEFAULT '';\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        GET DIAGNOSTICS CONDITION 1 v_ErrorMessage = MESSAGE_TEXT;\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving inventory for part: ', p_PartID);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM inv_inventory WHERE PartID = p_PartID;\n    SELECT * FROM inv_inventory WHERE PartID = p_PartID ORDER BY Location, Operation;\n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' inventory records for part: ', p_PartID);\nEND $$"
      },
      {
        "Name": "inv_inventory_Get_ByPartIDAndOperation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\04_Inventory_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE PROCEDURE inv_inventory_Get_ByPartIDAndOperation(\n    IN p_PartID VARCHAR(100),\n    IN p_Operation VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_ErrorMessage TEXT DEFAULT '';\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        GET DIAGNOSTICS CONDITION 1 v_ErrorMessage = MESSAGE_TEXT;\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving inventory for part: ', p_PartID, ', operation: ', p_Operation);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM inv_inventory WHERE PartID = p_PartID AND Operation = p_Operation;\n    SELECT * FROM inv_inventory WHERE PartID = p_PartID AND Operation = p_Operation ORDER BY Location;\n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' inventory records for part: ', p_PartID, ', operation: ', p_Operation);\nEND $$"
      },
      {
        "Name": "inv_inventory_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\04_Inventory_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Control_RemoveTab"
        ],
        "Body": "CREATE PROCEDURE inv_inventory_Get_All(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_ErrorMessage TEXT DEFAULT '';\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        GET DIAGNOSTICS CONDITION 1 v_ErrorMessage = MESSAGE_TEXT;\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving all inventory';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM inv_inventory;\n    SELECT * FROM inv_inventory ORDER BY PartID, Location, Operation;\n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' inventory records successfully');\nEND $$"
      },
      {
        "Name": "inv_transaction_Add",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\04_Inventory_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_TransactionType",
            "DataType": "ENUM('IN','OUT','TRANSFER')",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_BatchNumber",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_FromLocation",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ToLocation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Quantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Notes",
            "DataType": "VARCHAR(1000)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ReceiveDate",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_History"
        ],
        "Body": "CREATE PROCEDURE inv_transaction_Add(\n    IN p_TransactionType ENUM('IN','OUT','TRANSFER'),\n    IN p_PartID VARCHAR(300),\n    IN p_BatchNumber VARCHAR(100),\n    IN p_FromLocation VARCHAR(300),\n    IN p_ToLocation VARCHAR(100),\n    IN p_Operation VARCHAR(100),\n    IN p_Quantity INT,\n    IN p_Notes VARCHAR(1000),\n    IN p_User VARCHAR(100),\n    IN p_ItemType VARCHAR(100),\n    IN p_ReceiveDate DATETIME,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_ErrorMessage TEXT DEFAULT '';\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        GET DIAGNOSTICS CONDITION 1 v_ErrorMessage = MESSAGE_TEXT;\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding transaction: ', v_ErrorMessage);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    INSERT INTO inv_transaction (TransactionType, PartID, BatchNumber, FromLocation, ToLocation, Operation, Quantity, Notes, User, ItemType, ReceiveDate)\n    VALUES (p_TransactionType, p_PartID, p_BatchNumber, p_FromLocation, p_ToLocation, p_Operation, p_Quantity, p_Notes, p_User, p_ItemType, p_ReceiveDate);\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = 'Transaction added successfully';\n    COMMIT;\nEND $$"
      },
      {
        "Name": "inv_transactions_Search",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\04_Inventory_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_UserName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IsAdmin",
            "DataType": "BOOLEAN",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_BatchNumber",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_FromLocation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ToLocation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_TransactionType",
            "DataType": "VARCHAR(20)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Quantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Notes",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_FromDate",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ToDate",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_SortColumn",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_SortDescending",
            "DataType": "BOOLEAN",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Page",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_PageSize",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Transactions"
        ],
        "Body": "CREATE PROCEDURE inv_transactions_Search(\n    IN p_UserName VARCHAR(100),\n    IN p_IsAdmin BOOLEAN,\n    IN p_PartID VARCHAR(300),\n    IN p_BatchNumber VARCHAR(50),\n    IN p_FromLocation VARCHAR(100),\n    IN p_ToLocation VARCHAR(100),\n    IN p_Operation VARCHAR(100),\n    IN p_TransactionType VARCHAR(20),\n    IN p_Quantity INT,\n    IN p_Notes TEXT,\n    IN p_ItemType VARCHAR(100),\n    IN p_FromDate DATETIME,\n    IN p_ToDate DATETIME,\n    IN p_SortColumn VARCHAR(50),\n    IN p_SortDescending BOOLEAN,\n    IN p_Page INT,\n    IN p_PageSize INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_ErrorMessage VARCHAR(255) DEFAULT '';\n    DECLARE v_Offset INT DEFAULT 0;\n    DECLARE v_OrderBy VARCHAR(100) DEFAULT '';\n    DECLARE v_SortDirection VARCHAR(4) DEFAULT 'ASC';\n    DECLARE v_WhereClause TEXT DEFAULT '';\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        GET DIAGNOSTICS CONDITION 1 v_ErrorMessage = MESSAGE_TEXT;\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Transaction search failed: ', v_ErrorMessage);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    IF p_Page < 1 THEN SET p_Page = 1; END IF;\n    IF p_PageSize < 1 OR p_PageSize > 1000 THEN SET p_PageSize = 20; END IF;\n    SET v_Offset = (p_Page - 1) * p_PageSize;\n    SET v_SortDirection = IF(p_SortDescending = TRUE, 'DESC', 'ASC');\n    \n    CASE LOWER(COALESCE(p_SortColumn, 'receivedate'))\n        WHEN 'receivedate' THEN SET v_OrderBy = CONCAT('ReceiveDate ', v_SortDirection);\n        WHEN 'quantity' THEN SET v_OrderBy = CONCAT('Quantity ', v_SortDirection);\n        WHEN 'user' THEN SET v_OrderBy = CONCAT('User ', v_SortDirection);\n        WHEN 'itemtype' THEN SET v_OrderBy = CONCAT('ItemType ', v_SortDirection);\n        WHEN 'partid' THEN SET v_OrderBy = CONCAT('PartID ', v_SortDirection);\n        WHEN 'operation' THEN SET v_OrderBy = CONCAT('Operation ', v_SortDirection);\n        ELSE SET v_OrderBy = CONCAT('ReceiveDate ', v_SortDirection);\n    END CASE;\n    \n    SET v_WhereClause = 'WHERE 1=1 ';\n    \n    IF NOT p_IsAdmin AND p_UserName IS NOT NULL AND LENGTH(TRIM(p_UserName)) > 0 THEN\n        SET v_WhereClause = CONCAT(v_WhereClause, 'AND User = ''', REPLACE(p_UserName, '''', ''''''), ''' ');\n    END IF;\n    \n    IF p_PartID IS NOT NULL AND LENGTH(TRIM(p_PartID)) > 0 THEN\n        SET v_WhereClause = CONCAT(v_WhereClause, 'AND PartID = ''', REPLACE(p_PartID, '''', ''''''), ''' ');\n    END IF;\n    \n    IF p_BatchNumber IS NOT NULL AND LENGTH(TRIM(p_BatchNumber)) > 0 THEN\n        SET v_WhereClause = CONCAT(v_WhereClause, 'AND BatchNumber = ''', REPLACE(p_BatchNumber, '''', ''''''), ''' ');\n    END IF;\n    \n    IF p_FromLocation IS NOT NULL AND LENGTH(TRIM(p_FromLocation)) > 0 THEN\n        SET v_WhereClause = CONCAT(v_WhereClause, 'AND FromLocation = ''', REPLACE(p_FromLocation, '''', ''''''), ''' ');\n    END IF;\n    \n    IF p_ToLocation IS NOT NULL AND LENGTH(TRIM(p_ToLocation)) > 0 THEN\n        SET v_WhereClause = CONCAT(v_WhereClause, 'AND ToLocation = ''', REPLACE(p_ToLocation, '''', ''''''), ''' ');\n    END IF;\n    \n    IF p_Operation IS NOT NULL AND LENGTH(TRIM(p_Operation)) > 0 THEN\n        SET v_WhereClause = CONCAT(v_WhereClause, 'AND Operation = ''', REPLACE(p_Operation, '''', ''''''), ''' ');\n    END IF;\n    \n    IF p_TransactionType IS NOT NULL AND LENGTH(TRIM(p_TransactionType)) > 0 THEN\n        SET v_WhereClause = CONCAT(v_WhereClause, 'AND TransactionType = ''', REPLACE(p_TransactionType, '''', ''''''), ''' ');\n    END IF;\n    \n    IF p_Quantity IS NOT NULL THEN\n        SET v_WhereClause = CONCAT(v_WhereClause, 'AND Quantity = ', p_Quantity, ' ');\n    END IF;\n    \n    IF p_Notes IS NOT NULL AND LENGTH(TRIM(p_Notes)) > 0 THEN\n        SET v_WhereClause = CONCAT(v_WhereClause, 'AND Notes LIKE ''%', REPLACE(p_Notes, '''', ''''''), '%'' ');\n    END IF;\n    \n    IF p_ItemType IS NOT NULL AND LENGTH(TRIM(p_ItemType)) > 0 THEN\n        SET v_WhereClause = CONCAT(v_WhereClause, 'AND ItemType = ''', REPLACE(p_ItemType, '''', ''''''), ''' ');\n    END IF;\n    \n    IF p_FromDate IS NOT NULL THEN\n        SET v_WhereClause = CONCAT(v_WhereClause, 'AND ReceiveDate >= ''', p_FromDate, ''' ');\n    END IF;\n    \n    IF p_ToDate IS NOT NULL THEN\n        SET v_WhereClause = CONCAT(v_WhereClause, 'AND ReceiveDate <= ''', p_ToDate, ''' ');\n    END IF;\n    \n    SET @sql = CONCAT(\n        'SELECT ID, TransactionType, BatchNumber, PartID, FromLocation, ToLocation, ',\n        'Operation, Quantity, Notes, User, ItemType, ReceiveDate ',\n        'FROM inv_transaction ',\n        v_WhereClause,\n        'ORDER BY ', v_OrderBy, ' ',\n        'LIMIT ', v_Offset, ', ', p_PageSize\n    );\n    \n    PREPARE stmt FROM @sql;\n    EXECUTE stmt;\n    DEALLOCATE PREPARE stmt;\n    COMMIT;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Transaction search completed successfully for user: ', COALESCE(p_UserName, 'ALL'));\nEND$$"
      },
      {
        "Name": "inv_transactions_SmartSearch",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\04_Inventory_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_WhereClause",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Page",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_PageSize",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Transactions"
        ],
        "Body": "CREATE PROCEDURE inv_transactions_SmartSearch(\n    IN p_WhereClause TEXT,\n    IN p_Page INT,\n    IN p_PageSize INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_ErrorMessage VARCHAR(255) DEFAULT '';\n    DECLARE v_Offset INT DEFAULT 0;\n    DECLARE v_FinalWhereClause TEXT DEFAULT '';\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        GET DIAGNOSTICS CONDITION 1 v_ErrorMessage = MESSAGE_TEXT;\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Smart search failed: ', v_ErrorMessage);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Parameter validation\n    IF p_Page < 1 THEN SET p_Page = 1; END IF;\n    IF p_PageSize < 1 OR p_PageSize > 1000 THEN SET p_PageSize = 20; END IF;\n    SET v_Offset = (p_Page - 1) * p_PageSize;\n    \n    -- Build final WHERE clause\n    IF p_WhereClause IS NOT NULL AND LENGTH(TRIM(p_WhereClause)) > 0 THEN\n        SET v_FinalWhereClause = CONCAT('WHERE ', TRIM(p_WhereClause));\n    ELSE\n        SET v_FinalWhereClause = 'WHERE 1=1';\n    END IF;\n    \n    -- Build and execute dynamic query\n    SET @sql = CONCAT(\n        'SELECT ID, TransactionType, BatchNumber, PartID, FromLocation, ToLocation, ',\n        'Operation, Quantity, Notes, User, ItemType, ReceiveDate ',\n        'FROM inv_transaction ',\n        v_FinalWhereClause, ' ',\n        'ORDER BY ReceiveDate DESC ',\n        'LIMIT ', v_Offset, ', ', p_PageSize\n    );\n    \n    PREPARE stmt FROM @sql;\n    EXECUTE stmt;\n    DEALLOCATE PREPARE stmt;\n    COMMIT;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = 'Smart search completed successfully';\nEND$$"
      },
      {
        "Name": "inv_transactions_GetAnalytics",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\04_Inventory_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_UserName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IsAdmin",
            "DataType": "BOOLEAN",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_FromDate",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ToDate",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Transactions"
        ],
        "Body": "CREATE PROCEDURE inv_transactions_GetAnalytics(\n    IN p_UserName VARCHAR(100),\n    IN p_IsAdmin BOOLEAN,\n    IN p_FromDate DATETIME,\n    IN p_ToDate DATETIME,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_ErrorMessage VARCHAR(255) DEFAULT '';\n    DECLARE v_WhereClause TEXT DEFAULT '';\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        GET DIAGNOSTICS CONDITION 1 v_ErrorMessage = MESSAGE_TEXT;\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Analytics generation failed: ', v_ErrorMessage);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    SET v_WhereClause = 'WHERE 1=1 ';\n    \n    IF NOT p_IsAdmin AND p_UserName IS NOT NULL AND LENGTH(TRIM(p_UserName)) > 0 THEN\n        SET v_WhereClause = CONCAT(v_WhereClause, 'AND User = ''', REPLACE(p_UserName, '''', ''''''), ''' ');\n    END IF;\n    \n    IF p_FromDate IS NOT NULL THEN\n        SET v_WhereClause = CONCAT(v_WhereClause, 'AND ReceiveDate >= ''', p_FromDate, ''' ');\n    END IF;\n    \n    IF p_ToDate IS NOT NULL THEN\n        SET v_WhereClause = CONCAT(v_WhereClause, 'AND ReceiveDate <= ''', p_ToDate, ''' ');\n    END IF;\n    \n    SET @sql = CONCAT(\n        'SELECT ',\n        '    COUNT(*) as TotalTransactions, ',\n        '    SUM(CASE WHEN TransactionType = ''IN'' THEN 1 ELSE 0 END) as InTransactions, ',\n        '    SUM(CASE WHEN TransactionType = ''OUT'' THEN 1 ELSE 0 END) as OutTransactions, ',\n        '    SUM(CASE WHEN TransactionType = ''TRANSFER'' THEN 1 ELSE 0 END) as TransferTransactions, ',\n        '    COALESCE(SUM(Quantity), 0) as TotalQuantity, ',\n        '    COUNT(DISTINCT PartID) as UniquePartIds, ',\n        '    COUNT(DISTINCT User) as ActiveUsers, ',\n        '    COALESCE((SELECT PartID FROM inv_transaction t2 ', v_WhereClause, ' GROUP BY PartID ORDER BY SUM(Quantity) DESC LIMIT 1), '''') as TopPartId, ',\n        '    COALESCE((SELECT User FROM inv_transaction t3 ', v_WhereClause, ' GROUP BY User ORDER BY COUNT(*) DESC LIMIT 1), '''') as TopUser ',\n        'FROM inv_transaction t1 ',\n        v_WhereClause\n    );\n    \n    PREPARE stmt FROM @sql;\n    EXECUTE stmt;\n    DEALLOCATE PREPARE stmt;\n    COMMIT;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Transaction analytics generated successfully for user: ', COALESCE(p_UserName, 'ALL'));\nEND$$"
      },
      {
        "Name": "log_error_Add_Error",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\05_Error_Log_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Severity",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorType",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMessage",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_StackTrace",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ModuleName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_MethodName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_AdditionalInfo",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_MachineName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_OSVersion",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_AppVersion",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorTime",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Log error to database with comprehensive error information",
        "UsedByClasses": [
          "Dao_ErrorLog"
        ],
        "Body": "CREATE PROCEDURE log_error_Add_Error(\n    IN p_User VARCHAR(100),\n    IN p_Severity VARCHAR(50),\n    IN p_ErrorType VARCHAR(100),\n    IN p_ErrorMessage TEXT,\n    IN p_StackTrace TEXT,\n    IN p_ModuleName VARCHAR(100),\n    IN p_MethodName VARCHAR(100),\n    IN p_AdditionalInfo TEXT,\n    IN p_MachineName VARCHAR(100),\n    IN p_OSVersion VARCHAR(100),\n    IN p_AppVersion VARCHAR(50),\n    IN p_ErrorTime DATETIME,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        ROLLBACK;\n        GET DIAGNOSTICS CONDITION 1\n            @sqlstate = RETURNED_SQLSTATE, \n            @errno = MYSQL_ERRNO, \n            @text = MESSAGE_TEXT;\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while logging error for user: ', p_User, ' - ', @text);\n    END;\n\n    START TRANSACTION;\n\n    -- Input validation\n    IF p_User IS NULL OR p_User = '' THEN\n        SET p_User = 'Unknown';\n    END IF;\n\n    IF p_Severity IS NULL OR p_Severity = '' THEN\n        SET p_Severity = 'Error';\n    END IF;\n\n    IF p_ErrorTime IS NULL THEN\n        SET p_ErrorTime = NOW();\n    END IF;\n\n    -- Insert error log record\n    INSERT INTO log_error (\n        User, Severity, ErrorType, ErrorMessage, StackTrace, \n        ModuleName, MethodName, AdditionalInfo, MachineName, \n        OSVersion, AppVersion, ErrorTime\n    ) VALUES (\n        p_User, p_Severity, p_ErrorType, p_ErrorMessage, p_StackTrace,\n        p_ModuleName, p_MethodName, p_AdditionalInfo, p_MachineName,\n        p_OSVersion, p_AppVersion, p_ErrorTime\n    );\n\n    IF ROW_COUNT() > 0 THEN\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Error logged successfully for user: ', p_User);\n    ELSE\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Warning: Error log entry was not created for user: ', p_User);\n    END IF;\n\n    COMMIT;\nEND $$"
      },
      {
        "Name": "log_error_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\05_Error_Log_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get all error log entries",
        "UsedByClasses": [
          "Dao_ErrorLog"
        ],
        "Body": "CREATE PROCEDURE log_error_Get_All(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving all error logs';\n    END;\n\n    SELECT COUNT(*) INTO v_Count FROM log_error;\n    \n    SELECT \n        ID,\n        User,\n        ErrorMessage,\n        StackTrace,\n        MethodName,\n        ErrorType,\n        LoggedDate\n    FROM log_error \n    ORDER BY LoggedDate DESC;\n\n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' error log entries successfully');\nEND $$"
      },
      {
        "Name": "log_error_Get_ByUser",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\05_Error_Log_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get error log entries by user",
        "UsedByClasses": [
          "Dao_ErrorLog"
        ],
        "Body": "CREATE PROCEDURE log_error_Get_ByUser(\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving error logs for user: ', p_User);\n    END;\n\n    -- Input validation\n    IF p_User IS NULL OR p_User = '' THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'User parameter is required';\n    ELSE\n        SELECT COUNT(*) INTO v_Count FROM log_error WHERE User = p_User;\n        \n        SELECT * FROM log_error \n        WHERE User = p_User \n        ORDER BY ErrorTime DESC;\n\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' error log entries for user: ', p_User);\n    END IF;\nEND $$"
      },
      {
        "Name": "log_error_Get_ByDateRange",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\05_Error_Log_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_StartDate",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_EndDate",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get error log entries by date range",
        "UsedByClasses": [
          "Dao_ErrorLog"
        ],
        "Body": "CREATE PROCEDURE log_error_Get_ByDateRange(\n    IN p_StartDate DATETIME,\n    IN p_EndDate DATETIME,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving error logs for date range: ', \n                               DATE_FORMAT(p_StartDate, '%Y-%m-%d'), ' to ', DATE_FORMAT(p_EndDate, '%Y-%m-%d'));\n    END;\n\n    -- Input validation\n    IF p_StartDate IS NULL OR p_EndDate IS NULL THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Start date and end date parameters are required';\n    ELSEIF p_StartDate > p_EndDate THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Start date must be less than or equal to end date';\n    ELSE\n        SELECT COUNT(*) INTO v_Count FROM log_error \n        WHERE ErrorTime BETWEEN p_StartDate AND p_EndDate;\n        \n        SELECT * FROM log_error \n        WHERE ErrorTime BETWEEN p_StartDate AND p_EndDate \n        ORDER BY ErrorTime DESC;\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' error log entries between ', \n                               DATE_FORMAT(p_StartDate, '%Y-%m-%d %H:%i:%s'), ' and ', \n                               DATE_FORMAT(p_EndDate, '%Y-%m-%d %H:%i:%s'));\n    END IF;\nEND $$"
      },
      {
        "Name": "log_error_Get_Unique",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\05_Error_Log_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get unique error combinations (method name + error message)",
        "UsedByClasses": [
          "Dao_ErrorLog"
        ],
        "Body": "CREATE PROCEDURE log_error_Get_Unique(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving unique error combinations';\n    END;\n\n    SELECT COUNT(DISTINCT CONCAT(IFNULL(MethodName, ''), '|', IFNULL(ErrorMessage, ''))) \n    INTO v_Count FROM log_error \n    WHERE MethodName IS NOT NULL AND ErrorMessage IS NOT NULL;\n\n    SELECT DISTINCT MethodName, ErrorMessage \n    FROM log_error \n    WHERE MethodName IS NOT NULL AND ErrorMessage IS NOT NULL\n    ORDER BY MethodName, ErrorMessage;\n\n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' unique error combinations successfully');\nEND $$"
      },
      {
        "Name": "log_error_Delete_ById",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\05_Error_Log_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Id",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Delete error log entry by ID",
        "UsedByClasses": [
          "Dao_ErrorLog"
        ],
        "Body": "CREATE PROCEDURE log_error_Delete_ById(\n    IN p_Id INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        ROLLBACK;\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting error log entry with ID: ', p_Id);\n    END;\n\n    START TRANSACTION;\n\n    -- Input validation\n    IF p_Id IS NULL OR p_Id <= 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Valid ID parameter is required';\n        ROLLBACK;\n    ELSE\n        -- Check if record exists\n        SELECT COUNT(*) INTO v_Count FROM log_error WHERE ID = p_Id;\n        \n        IF v_Count = 0 THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('Error log entry with ID ', p_Id, ' not found');\n            ROLLBACK;\n        ELSE\n            DELETE FROM log_error WHERE ID = p_Id;\n            SET v_RowsAffected = ROW_COUNT();\n            \n            IF v_RowsAffected > 0 THEN\n                SET p_Status = 0;\n                SET p_ErrorMsg = CONCAT('Error log entry with ID ', p_Id, ' deleted successfully');\n            ELSE\n                SET p_Status = 2;\n                SET p_ErrorMsg = CONCAT('Error log entry with ID ', p_Id, ' was not deleted');\n            END IF;\n            \n            COMMIT;\n        END IF;\n    END IF;\nEND $$"
      },
      {
        "Name": "log_error_Delete_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\05_Error_Log_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Delete all error log entries",
        "UsedByClasses": [
          "Dao_ErrorLog"
        ],
        "Body": "CREATE PROCEDURE log_error_Delete_All(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        ROLLBACK;\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while deleting all error log entries';\n    END;\n\n    START TRANSACTION;\n\n    -- Get count before deletion\n    SELECT COUNT(*) INTO v_Count FROM log_error;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'No error log entries found to delete';\n        ROLLBACK;\n    ELSE\n        DELETE FROM log_error;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Successfully deleted ', v_RowsAffected, ' error log entries');\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = 'No error log entries were deleted';\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "sys_last_10_transactions_Get_ByUser",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\06_Quick_Button_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get user's last 10 transactions with status reporting",
        "UsedByClasses": [
          "Control_QuickButtons"
        ],
        "Body": "CREATE PROCEDURE sys_last_10_transactions_Get_ByUser(\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving quick buttons for user: ', p_User);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM sys_last_10_transactions WHERE User = p_User;\n    \n    SELECT \n        Position,\n        User,\n        PartID,\n        Operation,\n        Quantity,\n        ReceiveDate  -- FIXED: Changed from DateTime to ReceiveDate to match actual table structure\n    FROM sys_last_10_transactions \n    WHERE User = p_User \n    ORDER BY Position;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' quick buttons for user: ', p_User);\nEND $$"
      },
      {
        "Name": "sys_last_10_transactions_Update_ByUserAndPosition",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\06_Quick_Button_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Position",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Quantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Update quick button at specific position",
        "UsedByClasses": [
          "Dao_QuickButtons"
        ],
        "Body": "CREATE PROCEDURE sys_last_10_transactions_Update_ByUserAndPosition(\n    IN p_User VARCHAR(100),\n    IN p_Position INT,\n    IN p_PartID VARCHAR(300),\n    IN p_Operation VARCHAR(50),\n    IN p_Quantity INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating quick button at position ', p_Position, ' for user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Validate position range\n    IF p_Position < 1 OR p_Position > 10 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Invalid position: ', p_Position, '. Position must be between 1 and 10.');\n        ROLLBACK;\n    ELSE\n        -- Check if position exists for user\n        SELECT COUNT(*) INTO v_Count FROM sys_last_10_transactions WHERE User = p_User AND Position = p_Position;\n        \n        IF v_Count = 0 THEN\n            -- Insert new record - FIXED: Changed DateTime to ReceiveDate\n            INSERT INTO sys_last_10_transactions (User, Position, PartID, Operation, Quantity, ReceiveDate)\n            VALUES (p_User, p_Position, p_PartID, p_Operation, p_Quantity, NOW());\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Quick button created at position ', p_Position, ' for user: ', p_User);\n        ELSE\n            -- Update existing record - FIXED: Changed DateTime to ReceiveDate\n            UPDATE sys_last_10_transactions \n            SET PartID = p_PartID,\n                Operation = p_Operation,\n                Quantity = p_Quantity,\n                ReceiveDate = NOW()\n            WHERE User = p_User AND Position = p_Position;\n            \n            SET v_RowsAffected = ROW_COUNT();\n            \n            IF v_RowsAffected > 0 THEN\n                SET p_Status = 0;\n                SET p_ErrorMsg = CONCAT('Quick button updated at position ', p_Position, ' for user: ', p_User);\n            ELSE\n                SET p_Status = 2;\n                SET p_ErrorMsg = CONCAT('No changes made to quick button at position ', p_Position, ' for user: ', p_User);\n            END IF;\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "sys_last_10_transactions_RemoveAndShift_ByUser",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\06_Quick_Button_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Position",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Remove quick button and shift remaining positions up",
        "UsedByClasses": [
          "Dao_QuickButtons"
        ],
        "Body": "CREATE PROCEDURE sys_last_10_transactions_RemoveAndShift_ByUser(\n    IN p_User VARCHAR(100),\n    IN p_Position INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while removing quick button at position ', p_Position, ' for user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Validate position range\n    IF p_Position < 1 OR p_Position > 10 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Invalid position: ', p_Position, '. Position must be between 1 and 10.');\n        ROLLBACK;\n    ELSE\n        -- Check if position exists for user\n        SELECT COUNT(*) INTO v_Count FROM sys_last_10_transactions WHERE User = p_User AND Position = p_Position;\n        \n        IF v_Count = 0 THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('No quick button found at position ', p_Position, ' for user: ', p_User);\n            ROLLBACK;\n        ELSE\n            -- Delete the record at specified position\n            DELETE FROM sys_last_10_transactions WHERE User = p_User AND Position = p_Position;\n            SET v_RowsAffected = ROW_COUNT();\n            \n            -- Shift remaining positions up\n            UPDATE sys_last_10_transactions \n            SET Position = Position - 1 \n            WHERE User = p_User AND Position > p_Position;\n            \n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Quick button removed from position ', p_Position, ' and remaining positions shifted up for user: ', p_User);\n            COMMIT;\n        END IF;\n    END IF;\nEND $$"
      },
      {
        "Name": "sys_last_10_transactions_Add_AtPosition",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\06_Quick_Button_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Position",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Quantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Add quick button at specific position (shifts existing positions down)",
        "UsedByClasses": [
          "Dao_QuickButtons"
        ],
        "Body": "CREATE PROCEDURE sys_last_10_transactions_Add_AtPosition(\n    IN p_User VARCHAR(100),\n    IN p_Position INT,\n    IN p_PartID VARCHAR(300),\n    IN p_Operation VARCHAR(50),\n    IN p_Quantity INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding quick button at position ', p_Position, ' for user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Validate position range\n    IF p_Position < 1 OR p_Position > 10 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Invalid position: ', p_Position, '. Position must be between 1 and 10.');\n        ROLLBACK;\n    ELSE\n        -- Shift existing positions down to make room\n        UPDATE sys_last_10_transactions \n        SET Position = Position + 1 \n        WHERE User = p_User AND Position >= p_Position AND Position < 10;\n        \n        -- Remove position 10 if it exists (bumped out)\n        DELETE FROM sys_last_10_transactions WHERE User = p_User AND Position = 10;\n        \n        -- Insert new record at specified position - FIXED: Changed DateTime to ReceiveDate\n        INSERT INTO sys_last_10_transactions (User, Position, PartID, Operation, Quantity, ReceiveDate)\n        VALUES (p_User, p_Position, p_PartID, p_Operation, p_Quantity, NOW());\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Quick button added at position ', p_Position, ' for user: ', p_User);\n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "sys_last_10_transactions_Move",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\06_Quick_Button_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_FromPosition",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ToPosition",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Move quick button from one position to another",
        "UsedByClasses": [
          "Dao_QuickButtons"
        ],
        "Body": "CREATE PROCEDURE sys_last_10_transactions_Move(\n    IN p_User VARCHAR(100),\n    IN p_FromPosition INT,\n    IN p_ToPosition INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_PartID VARCHAR(300);\n    DECLARE v_Operation VARCHAR(50);\n    DECLARE v_Quantity INT;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while moving quick button from position ', p_FromPosition, ' to ', p_ToPosition, ' for user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Validate position ranges\n    IF p_FromPosition < 1 OR p_FromPosition > 10 OR p_ToPosition < 1 OR p_ToPosition > 10 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Invalid positions. From: ', p_FromPosition, ', To: ', p_ToPosition, '. Positions must be between 1 and 10.');\n        ROLLBACK;\n    ELSEIF p_FromPosition = p_ToPosition THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Source and destination positions cannot be the same.';\n        ROLLBACK;\n    ELSE\n        -- Check if source position exists\n        SELECT COUNT(*), PartID, Operation, Quantity \n        INTO v_Count, v_PartID, v_Operation, v_Quantity\n        FROM sys_last_10_transactions \n        WHERE User = p_User AND Position = p_FromPosition;\n        \n        IF v_Count = 0 THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('No quick button found at position ', p_FromPosition, ' for user: ', p_User);\n            ROLLBACK;\n        ELSE\n            -- Delete source position\n            DELETE FROM sys_last_10_transactions WHERE User = p_User AND Position = p_FromPosition;\n            \n            -- Shift positions based on move direction\n            IF p_ToPosition < p_FromPosition THEN\n                -- Moving up: shift positions down\n                UPDATE sys_last_10_transactions \n                SET Position = Position + 1 \n                WHERE User = p_User AND Position >= p_ToPosition AND Position < p_FromPosition;\n            ELSE\n                -- Moving down: shift positions up\n                UPDATE sys_last_10_transactions \n                SET Position = Position - 1 \n                WHERE User = p_User AND Position > p_FromPosition AND Position <= p_ToPosition;\n            END IF;\n            \n            -- Insert at new position - FIXED: Changed DateTime to ReceiveDate\n            INSERT INTO sys_last_10_transactions (User, Position, PartID, Operation, Quantity, ReceiveDate)\n            VALUES (p_User, p_ToPosition, v_PartID, v_Operation, v_Quantity, NOW());\n            \n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Quick button moved from position ', p_FromPosition, ' to ', p_ToPosition, ' for user: ', p_User);\n            COMMIT;\n        END IF;\n    END IF;\nEND $$"
      },
      {
        "Name": "sys_last_10_transactions_DeleteAll_ByUser",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\06_Quick_Button_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Delete all quick buttons for user",
        "UsedByClasses": [
          "Dao_QuickButtons"
        ],
        "Body": "CREATE PROCEDURE sys_last_10_transactions_DeleteAll_ByUser(\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting all quick buttons for user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    SELECT COUNT(*) INTO v_Count FROM sys_last_10_transactions WHERE User = p_User;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('No quick buttons found for user: ', p_User);\n        ROLLBACK;\n    ELSE\n        DELETE FROM sys_last_10_transactions WHERE User = p_User;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Deleted ', v_RowsAffected, ' quick buttons for user: ', p_User);\n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "sys_last_10_transactions_AddOrShift_ByUser",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\06_Quick_Button_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Quantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Add or shift quick button (smart positioning)",
        "UsedByClasses": [
          "Dao_QuickButtons"
        ],
        "Body": "CREATE PROCEDURE sys_last_10_transactions_AddOrShift_ByUser(\n    IN p_User VARCHAR(100),\n    IN p_PartID VARCHAR(300),\n    IN p_Operation VARCHAR(50),\n    IN p_Quantity INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_ExistingPosition INT DEFAULT 0;\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding/shifting quick button for user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- FIXED: Check if PartID and Operation combination already exists (ignore Quantity)\n    -- Only PartID and Operation matter for uniqueness, Quantity is not a factor\n    SELECT Position INTO v_ExistingPosition\n    FROM sys_last_10_transactions \n    WHERE User = p_User AND PartID = p_PartID AND Operation = p_Operation\n    LIMIT 1;\n    \n    IF v_ExistingPosition > 0 THEN\n        -- Update existing button with new quantity and move to position 1\n        UPDATE sys_last_10_transactions \n        SET Quantity = p_Quantity, ReceiveDate = NOW()\n        WHERE User = p_User AND Position = v_ExistingPosition;\n        \n        -- Move existing to position 1 (if not already there)\n        IF v_ExistingPosition != 1 THEN\n            CALL sys_last_10_transactions_Move(p_User, v_ExistingPosition, 1, @move_status, @move_msg);\n        END IF;\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Updated existing quick button quantity and moved to position 1 for user: ', p_User);\n    ELSE\n        -- Add new at position 1 (shifts others down)\n        CALL sys_last_10_transactions_Add_AtPosition(p_User, 1, p_PartID, p_Operation, p_Quantity, @add_status, @add_msg);\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Added new quick button at position 1 for user: ', p_User);\n    END IF;\n    \n    COMMIT;\nEND $$"
      },
      {
        "Name": "log_changelog_Get_Current",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\07_Changelog_Version_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get current version information with status reporting (by highest version number)",
        "UsedByClasses": [
          "Service_Timer_VersionChecker"
        ],
        "Body": "CREATE PROCEDURE log_changelog_Get_Current(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving current version information';\n    END;\n    \n    -- Check if changelog table has any entries\n    SELECT COUNT(*) INTO v_Count FROM log_changelog;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'No version information found in changelog';\n        SELECT \n            'Unknown' as Version,\n            'No changelog entries found' as Description,\n            NULL as ReleaseDate,\n            'System' as CreatedBy,\n            NOW() as CreatedDate;\n    ELSE\n        -- Get the highest version number (semantic version ordering)\n        -- This query sorts versions properly handling semantic versioning (e.g., 1.0.0, 1.0.1, 1.1.0, 2.0.0)\n        SELECT \n            Version,\n            Description,\n            ReleaseDate,\n            CreatedBy,\n            CreatedDate\n        FROM log_changelog \n        ORDER BY \n            -- Convert version to sortable format for proper semantic version comparison\n            CAST(SUBSTRING_INDEX(Version, '.', 1) AS UNSIGNED) DESC,\n            CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(Version, '.', 2), '.', -1) AS UNSIGNED) DESC,\n            CAST(SUBSTRING_INDEX(Version, '.', -1) AS UNSIGNED) DESC,\n            -- Fallback to string comparison for non-standard version formats\n            Version DESC,\n            -- Use CreatedDate as final tiebreaker\n            CreatedDate DESC\n        LIMIT 1;\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = 'Current version (highest version number) retrieved successfully';\n    END IF;\nEND $$"
      },
      {
        "Name": "log_changelog_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\07_Changelog_Version_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get all changelog entries with status reporting (ordered by highest version first)",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE log_changelog_Get_All(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving changelog entries';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM log_changelog;\n    \n    SELECT \n        ID,\n        Version,\n        Description,\n        ReleaseDate,\n        CreatedBy,\n        CreatedDate,\n        ModifiedDate\n    FROM log_changelog \n    ORDER BY \n        -- Sort by highest version number first (semantic version ordering)\n        CAST(SUBSTRING_INDEX(Version, '.', 1) AS UNSIGNED) DESC,\n        CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(Version, '.', 2), '.', -1) AS UNSIGNED) DESC,\n        CAST(SUBSTRING_INDEX(Version, '.', -1) AS UNSIGNED) DESC,\n        -- Fallback to string comparison for non-standard version formats\n        Version DESC,\n        -- Use CreatedDate as final tiebreaker\n        CreatedDate DESC;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' changelog entries successfully (ordered by highest version)');\nEND $$"
      },
      {
        "Name": "log_changelog_Add_Entry",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\07_Changelog_Version_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Version",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Description",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ReleaseDate",
            "DataType": "DATE",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_CreatedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Add new changelog entry with status reporting",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE log_changelog_Add_Entry(\n    IN p_Version VARCHAR(50),\n    IN p_Description TEXT,\n    IN p_ReleaseDate DATE,\n    IN p_CreatedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding changelog entry for version: ', p_Version);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Check if this version already exists\n    SELECT COUNT(*) INTO v_Count FROM log_changelog WHERE Version = p_Version;\n    \n    IF v_Count > 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Version already exists in changelog: ', p_Version);\n        ROLLBACK;\n    ELSE\n        INSERT INTO log_changelog (\n            Version,\n            Description,\n            ReleaseDate,\n            CreatedBy,\n            CreatedDate\n        ) VALUES (\n            p_Version,\n            p_Description,\n            p_ReleaseDate,\n            p_CreatedBy,\n            NOW()\n        );\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Changelog entry added successfully for version: ', p_Version);\n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "log_changelog_Initialize_Default_Data",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\07_Changelog_Version_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Initialize default data if table is empty (MySQL 5.7.24 Compatible)",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE log_changelog_Initialize_Default_Data(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while initializing default changelog data';\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Check if table is empty\n    SELECT COUNT(*) INTO v_Count FROM log_changelog;\n    \n    IF v_Count = 0 THEN\n        -- Insert multiple sample versions to demonstrate version ordering\n        INSERT INTO log_changelog (Version, Description, ReleaseDate, CreatedBy, CreatedDate) VALUES\n        ('1.0.0', 'MTM Inventory Application - Initial Release with uniform parameter naming system, MySQL 5.7.24 compatibility, and comprehensive stored procedure architecture.', CURDATE(), 'SYSTEM', NOW()),\n        ('1.0.1', 'Bug fixes and performance improvements for version checking system.', CURDATE(), 'SYSTEM', NOW()),\n        ('1.1.0', 'Added enhanced error handling and improved user interface feedback.', CURDATE(), 'SYSTEM', NOW());\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = 'Default changelog data initialized successfully with sample versions';\n    ELSE\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Changelog table already contains ', v_Count, ' entries - skipping initialization');\n    END IF;\n    \n    COMMIT;\nEND $$"
      },
      {
        "Name": "app_themes_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\08_Theme_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get all themes from app_themes table (direct table query as stored procedure)",
        "UsedByClasses": [
          "handles"
        ],
        "Body": "CREATE PROCEDURE app_themes_Get_All(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving themes';\n    END;\n    \n    -- Simply return all rows from app_themes table (like the old Helper_Database_Core.ExecuteDataTable approach)\n    SELECT * FROM app_themes ORDER BY ThemeName;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = 'Themes retrieved successfully';\nEND $$"
      },
      {
        "Name": "app_themes_Get_ByName",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\08_Theme_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_ThemeName",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get specific theme by name with status reporting",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE app_themes_Get_ByName(\n    IN p_ThemeName VARCHAR(50),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving theme: ', p_ThemeName);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM app_themes WHERE ThemeName = p_ThemeName;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Theme not found: ', p_ThemeName);\n        -- Return empty result set with structure\n        SELECT NULL as ThemeName, NULL as SettingsJson LIMIT 0;\n    ELSE\n        SELECT \n            ID,\n            ThemeName,\n            DisplayName,\n            SettingsJson,\n            IsDefault,\n            IsActive,\n            Description,\n            CreatedDate,\n            CreatedBy,\n            ModifiedDate,\n            ModifiedBy,\n            VERSION\n        FROM app_themes \n        WHERE ThemeName = p_ThemeName AND IsActive = 1\n        LIMIT 1;\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Theme retrieved successfully: ', p_ThemeName);\n    END IF;\nEND $$"
      },
      {
        "Name": "app_themes_Add_Theme",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\08_Theme_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_ThemeName",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_DisplayName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_SettingsJson",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Description",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_CreatedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Add new theme with validation",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE app_themes_Add_Theme(\n    IN p_ThemeName VARCHAR(50),\n    IN p_DisplayName VARCHAR(100),\n    IN p_SettingsJson TEXT,\n    IN p_Description TEXT,\n    IN p_CreatedBy VARCHAR(100)\n)\nBEGIN\n    DECLARE p_Status INT DEFAULT 0;\n    DECLARE p_ErrorMsg VARCHAR(255) DEFAULT '';\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_ThemeId INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while creating theme: ', p_ThemeName);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Validate theme name is not empty\n    IF p_ThemeName IS NULL OR TRIM(p_ThemeName) = '' THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Theme name cannot be empty';\n        ROLLBACK;\n    -- Check if theme already exists\n    ELSEIF EXISTS(SELECT 1 FROM app_themes WHERE ThemeName = p_ThemeName) THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Theme already exists: ', p_ThemeName);\n        ROLLBACK;\n    -- Validate JSON format (basic check)\n    ELSEIF p_SettingsJson IS NULL OR TRIM(p_SettingsJson) = '' THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Theme settings JSON cannot be empty';\n        ROLLBACK;\n    ELSE\n        INSERT INTO app_themes (\n            ThemeName,\n            DisplayName,\n            SettingsJson,\n            IsDefault,\n            IsActive,\n            Description,\n            CreatedBy,\n            CreatedDate\n        ) VALUES (\n            p_ThemeName,\n            IFNULL(p_DisplayName, p_ThemeName),\n            p_SettingsJson,\n            0, -- New themes are never default\n            1, -- New themes are active by default\n            p_Description,\n            IFNULL(p_CreatedBy, 'SYSTEM'),\n            NOW()\n        );\n        \n        SET v_ThemeId = LAST_INSERT_ID();\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Theme created successfully: ', p_ThemeName, ' (ID: ', v_ThemeId, ')');\n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "app_themes_Update_Theme",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\08_Theme_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_ThemeName",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_DisplayName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_SettingsJson",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Description",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ModifiedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Update existing theme",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE app_themes_Update_Theme(\n    IN p_ThemeName VARCHAR(50),\n    IN p_DisplayName VARCHAR(100),\n    IN p_SettingsJson TEXT,\n    IN p_Description TEXT,\n    IN p_ModifiedBy VARCHAR(100)\n)\nBEGIN\n    DECLARE p_Status INT DEFAULT 0;\n    DECLARE p_ErrorMsg VARCHAR(255) DEFAULT '';\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating theme: ', p_ThemeName);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Check if theme exists and is not a default system theme\n    SELECT COUNT(*) INTO v_Count FROM app_themes WHERE ThemeName = p_ThemeName AND IsDefault = 0;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Theme not found or is a protected system theme: ', p_ThemeName);\n        ROLLBACK;\n    ELSE\n        UPDATE app_themes \n        SET DisplayName = IFNULL(p_DisplayName, DisplayName),\n            SettingsJson = IFNULL(p_SettingsJson, SettingsJson),\n            Description = p_Description,\n            ModifiedBy = IFNULL(p_ModifiedBy, 'SYSTEM'),\n            ModifiedDate = NOW(),\n            VERSION = VERSION + 1\n        WHERE ThemeName = p_ThemeName AND IsDefault = 0;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Theme updated successfully: ', p_ThemeName);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No changes made to theme: ', p_ThemeName);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "app_themes_Delete_Theme",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\08_Theme_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_ThemeName",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ModifiedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Delete theme (soft delete by setting IsActive = 0)",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE app_themes_Delete_Theme(\n    IN p_ThemeName VARCHAR(50),\n    IN p_ModifiedBy VARCHAR(100)\n)\nBEGIN\n    DECLARE p_Status INT DEFAULT 0;\n    DECLARE p_ErrorMsg VARCHAR(255) DEFAULT '';\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting theme: ', p_ThemeName);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Check if theme exists and is not a default system theme\n    SELECT COUNT(*) INTO v_Count FROM app_themes WHERE ThemeName = p_ThemeName AND IsDefault = 0 AND IsActive = 1;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Theme not found, already deleted, or is a protected system theme: ', p_ThemeName);\n        ROLLBACK;\n    ELSE\n        -- Soft delete by setting IsActive = 0\n        UPDATE app_themes \n        SET IsActive = 0,\n            ModifiedBy = IFNULL(p_ModifiedBy, 'SYSTEM'),\n            ModifiedDate = NOW()\n        WHERE ThemeName = p_ThemeName AND IsDefault = 0;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Theme deleted successfully: ', p_ThemeName);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('Failed to delete theme: ', p_ThemeName);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "app_themes_Exists",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\08_Theme_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_ThemeName",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Check if theme exists",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE app_themes_Exists(\n    IN p_ThemeName VARCHAR(50)\n)\nBEGIN\n    DECLARE p_Status INT DEFAULT 0;\n    DECLARE p_ErrorMsg VARCHAR(255) DEFAULT '';\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while checking theme existence: ', p_ThemeName);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM app_themes WHERE ThemeName = p_ThemeName AND IsActive = 1;\n    SELECT v_Count as ThemeExists;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Theme existence check completed for: ', p_ThemeName, ' (Exists: ', IF(v_Count > 0, 'Yes', 'No'), ')');\nEND $$"
      },
      {
        "Name": "app_themes_Get_UserTheme",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\08_Theme_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get user's selected theme",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE app_themes_Get_UserTheme(\n    IN p_UserId VARCHAR(100)\n)\nBEGIN\n    DECLARE p_Status INT DEFAULT 0;\n    DECLARE p_ErrorMsg VARCHAR(255) DEFAULT '';\n    DECLARE v_ThemeName VARCHAR(50) DEFAULT NULL;\n    DECLARE v_ThemeExists INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving user theme for: ', p_UserId);\n    END;\n    \n    -- Get user's theme preference from usr_users table\n    SELECT Theme_Name INTO v_ThemeName \n    FROM usr_users \n    WHERE User = p_UserId \n    LIMIT 1;\n    \n    -- If no theme set or theme doesn't exist, default to 'Default' theme\n    IF v_ThemeName IS NULL OR v_ThemeName = '' THEN\n        SET v_ThemeName = 'Default';\n    ELSE\n        -- Check if the user's preferred theme actually exists and is active\n        SELECT COUNT(*) INTO v_ThemeExists \n        FROM app_themes \n        WHERE ThemeName = v_ThemeName AND IsActive = 1;\n        \n        -- If theme doesn't exist, fall back to Default\n        IF v_ThemeExists = 0 THEN\n            SET v_ThemeName = 'Default';\n        END IF;\n    END IF;\n    \n    -- Return the theme data\n    SELECT \n        t.ID,\n        t.ThemeName,\n        t.DisplayName,\n        t.SettingsJson,\n        t.IsDefault,\n        t.Description\n    FROM app_themes t\n    WHERE t.ThemeName = v_ThemeName AND t.IsActive = 1\n    LIMIT 1;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('User theme retrieved successfully for: ', p_UserId, ' (Theme: ', v_ThemeName, ')');\nEND $$"
      },
      {
        "Name": "app_themes_Set_UserTheme",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\08_Theme_Management_Procedures.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ThemeName",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Set user's theme preference",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE PROCEDURE app_themes_Set_UserTheme(\n    IN p_UserId VARCHAR(100),\n    IN p_ThemeName VARCHAR(50)\n)\nBEGIN\n    DECLARE p_Status INT DEFAULT 0;\n    DECLARE p_ErrorMsg VARCHAR(255) DEFAULT '';\n    DECLARE v_UserExists INT DEFAULT 0;\n    DECLARE v_ThemeExists INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while setting theme for user: ', p_UserId);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- Check if user exists\n    SELECT COUNT(*) INTO v_UserExists FROM usr_users WHERE User = p_UserId;\n    \n    IF v_UserExists = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_UserId);\n        ROLLBACK;\n    ELSE\n        -- Check if theme exists and is active\n        SELECT COUNT(*) INTO v_ThemeExists FROM app_themes WHERE ThemeName = p_ThemeName AND IsActive = 1;\n        \n        IF v_ThemeExists = 0 THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('Theme not found or inactive: ', p_ThemeName);\n            ROLLBACK;\n        ELSE\n            -- Update user's theme preference\n            UPDATE usr_users \n            SET Theme_Name = p_ThemeName,\n                ModifiedDate = NOW()\n            WHERE User = p_UserId;\n            \n            SET v_RowsAffected = ROW_COUNT();\n            \n            IF v_RowsAffected > 0 THEN\n                SET p_Status = 0;\n                SET p_ErrorMsg = CONCAT('Theme set successfully for user: ', p_UserId, ' (Theme: ', p_ThemeName, ')');\n            ELSE\n                SET p_Status = 2;\n                SET p_ErrorMsg = CONCAT('No changes made for user: ', p_UserId);\n            END IF;\n            \n            COMMIT;\n        END IF;\n    END IF;\nEND $$"
      },
      {
        "Name": "test_AllSystemsComprehensive",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\99_Database_Testing_Suite.sql",
        "Parameters": [
          {
            "Name": "p_TotalTests",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_TestsPassed",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_TestsFailed",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_DetailedReport",
            "DataType": "TEXT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Master testing procedure that validates all systems",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE test_AllSystemsComprehensive(\n    OUT p_TotalTests INT,\n    OUT p_TestsPassed INT,\n    OUT p_TestsFailed INT,\n    OUT p_DetailedReport TEXT\n)\nBEGIN\n    DECLARE v_Status INT DEFAULT 0;\n    DECLARE v_Message VARCHAR(255) DEFAULT '';\n    DECLARE v_TestResult BOOLEAN DEFAULT FALSE;\n    DECLARE v_TestName VARCHAR(100) DEFAULT '';\n    \n    SET p_TotalTests = 0;\n    SET p_TestsPassed = 0;\n    SET p_TestsFailed = 0;\n    SET p_DetailedReport = 'MTM COMPREHENSIVE DATABASE TEST REPORT\\n';\n    SET p_DetailedReport = CONCAT(p_DetailedReport, '=====================================\\n');\n    SET p_DetailedReport = CONCAT(p_DetailedReport, 'Test Date: ', NOW(), '\\n\\n');\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_TestsFailed = p_TestsFailed + 1;\n        SET p_DetailedReport = CONCAT(p_DetailedReport, 'CRITICAL ERROR: Database testing failed with SQL exception\\n');\n    END;\n    \n    -- Test Category 1: Schema Validation\n    SET p_DetailedReport = CONCAT(p_DetailedReport, '1. SCHEMA VALIDATION TESTS\\n');\n    SET p_DetailedReport = CONCAT(p_DetailedReport, '==========================\\n');\n    \n    BEGIN\n        DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET v_TestResult = FALSE;\n        SET v_TestResult = TRUE;\n        SET v_TestName = 'Schema Validation';\n        \n        CALL sys_VerifyDatabaseSchema(v_Status, v_Message);\n        SET p_TotalTests = p_TotalTests + 1;\n        \n        IF v_TestResult = TRUE AND v_Status = 0 THEN\n            SET p_TestsPassed = p_TestsPassed + 1;\n            SET p_DetailedReport = CONCAT(p_DetailedReport, '✓ PASS: Schema Validation - ', v_Message, '\\n');\n        ELSE\n            SET p_TestsFailed = p_TestsFailed + 1;\n            SET p_DetailedReport = CONCAT(p_DetailedReport, '✗ FAIL: Schema Validation - ', v_Message, '\\n');\n        END IF;\n    END;\n    \n    -- Test Category 2: Core Table Column Verification\n    SET p_DetailedReport = CONCAT(p_DetailedReport, '\\n2. TABLE COLUMN VERIFICATION TESTS\\n');\n    SET p_DetailedReport = CONCAT(p_DetailedReport, '===================================\\n');\n    \n    -- Test inv_inventory table\n    BEGIN\n        DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET v_TestResult = FALSE;\n        SET v_TestResult = TRUE;\n        SET v_TestName = 'inv_inventory Table Columns';\n        \n        CALL sys_VerifyTableColumns('inv_inventory', v_Status, v_Message);\n        SET p_TotalTests = p_TotalTests + 1;\n        \n        IF v_TestResult = TRUE AND v_Status = 0 THEN\n            SET p_TestsPassed = p_TestsPassed + 1;\n            SET p_DetailedReport = CONCAT(p_DetailedReport, '✓ PASS: inv_inventory Table - ', v_Message, '\\n');\n        ELSE\n            SET p_TestsFailed = p_TestsFailed + 1;\n            SET p_DetailedReport = CONCAT(p_DetailedReport, '✗ FAIL: inv_inventory Table - ', v_Message, '\\n');\n        END IF;\n    END;\n    \n    -- Test inv_transaction table\n    BEGIN\n        DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET v_TestResult = FALSE;\n        SET v_TestResult = TRUE;\n        SET v_TestName = 'inv_transaction Table Columns';\n        \n        CALL sys_VerifyTableColumns('inv_transaction', v_Status, v_Message);\n        SET p_TotalTests = p_TotalTests + 1;\n        \n        IF v_TestResult = TRUE AND v_Status = 0 THEN\n            SET p_TestsPassed = p_TestsPassed + 1;\n            SET p_DetailedReport = CONCAT(p_DetailedReport, '✓ PASS: inv_transaction Table - ', v_Message, '\\n');\n        ELSE\n            SET p_TestsFailed = p_TestsFailed + 1;\n            SET p_DetailedReport = CONCAT(p_DetailedReport, '✗ FAIL: inv_transaction Table - ', v_Message, '\\n');\n        END IF;\n    END;\n    \n    -- Test Category 3: Inventory Procedures\n    SET p_DetailedReport = CONCAT(p_DetailedReport, '\\n3. INVENTORY PROCEDURE TESTS\\n');\n    SET p_DetailedReport = CONCAT(p_DetailedReport, '============================\\n');\n    \n    -- Test inventory add procedure\n    BEGIN\n        DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET v_TestResult = FALSE;\n        SET v_TestResult = TRUE;\n        SET v_TestName = 'Add Inventory Item';\n        \n        CALL inv_inventory_Add_Item(\n            'TEST_VERIFICATION_PART', 'TEST_LOC', '99', 1, 'WIP',\n            'SYSTEM_TEST', NULL, 'Comprehensive verification test item',\n            v_Status, v_Message\n        );\n        SET p_TotalTests = p_TotalTests + 1;\n        \n        IF v_TestResult = TRUE AND v_Status = 0 THEN\n            SET p_TestsPassed = p_TestsPassed + 1;\n            SET p_DetailedReport = CONCAT(p_DetailedReport, '✓ PASS: Add Inventory - ', v_Message, '\\n');\n        ELSE\n            SET p_TestsFailed = p_TestsFailed + 1;\n            SET p_DetailedReport = CONCAT(p_DetailedReport, '✗ FAIL: Add Inventory - ', v_Message, '\\n');\n        END IF;\n    END;\n    \n    -- Test inventory remove procedure\n    BEGIN\n        DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET v_TestResult = FALSE;\n        SET v_TestResult = TRUE;\n        SET v_TestName = 'Remove Inventory Item';\n        \n        CALL inv_inventory_Remove_Item(\n            'TEST_VERIFICATION_PART', 'TEST_LOC', '99', 1, 'SYSTEM_TEST', \n            'Comprehensive verification test removal',\n            v_Status, v_Message\n        );\n        SET p_TotalTests = p_TotalTests + 1;\n        \n        IF v_TestResult = TRUE AND v_Status >= 0 THEN  -- Status 0 = success, Status 1 = not found (acceptable)\n            SET p_TestsPassed = p_TestsPassed + 1;\n            SET p_DetailedReport = CONCAT(p_DetailedReport, '✓ PASS: Remove Inventory - ', v_Message, '\\n');\n        ELSE\n            SET p_TestsFailed = p_TestsFailed + 1;\n            SET p_DetailedReport = CONCAT(p_DetailedReport, '✗ FAIL: Remove Inventory - ', v_Message, '\\n');\n        END IF;\n    END;\n    \n    -- Test Category 4: Transaction Procedures  \n    SET p_DetailedReport = CONCAT(p_DetailedReport, '\\n4. TRANSACTION PROCEDURE TESTS\\n');\n    SET p_DetailedReport = CONCAT(p_DetailedReport, '==============================\\n');\n    \n    -- Test smart search procedure\n    BEGIN\n        DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET v_TestResult = FALSE;\n        SET v_TestResult = TRUE;\n        SET v_TestName = 'Smart Search Transactions';\n        \n        CALL inv_transactions_SmartSearch(\n            'SYSTEM_TEST', TRUE, NULL, NULL, NULL, NULL, NULL, NULL, NULL,\n            NULL, NOW() - INTERVAL 7 DAY, NOW(), NULL, NULL, 1, 10,\n            v_Status, v_Message\n        );\n        SET p_TotalTests = p_TotalTests + 1;\n        \n        IF v_TestResult = TRUE AND v_Status = 0 THEN\n            SET p_TestsPassed = p_TestsPassed + 1;\n            SET p_DetailedReport = CONCAT(p_DetailedReport, '✓ PASS: Smart Search - ', v_Message, '\\n');\n        ELSE\n            SET p_TestsFailed = p_TestsFailed + 1;\n            SET p_DetailedReport = CONCAT(p_DetailedReport, '✗ FAIL: Smart Search - ', v_Message, '\\n');\n        END IF;\n    END;\n    \n    -- Test analytics procedure\n    BEGIN\n        DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET v_TestResult = FALSE;\n        SET v_TestResult = TRUE;\n        SET v_TestName = 'Transaction Analytics';\n        \n        CALL inv_transactions_GetAnalytics(\n            'SYSTEM_TEST', TRUE, NOW() - INTERVAL 30 DAY, NOW(),\n            v_Status, v_Message\n        );\n        SET p_TotalTests = p_TotalTests + 1;\n        \n        IF v_TestResult = TRUE AND v_Status = 0 THEN\n            SET p_TestsPassed = p_TestsPassed + 1;\n            SET p_DetailedReport = CONCAT(p_DetailedReport, '✓ PASS: Analytics - ', v_Message, '\\n');\n        ELSE\n            SET p_TestsFailed = p_TestsFailed + 1;\n            SET p_DetailedReport = CONCAT(p_DetailedReport, '✗ FAIL: Analytics - ', v_Message, '\\n');\n        END IF;\n    END;\n    \n    -- Test Category 5: Theme Management Procedures\n    SET p_DetailedReport = CONCAT(p_DetailedReport, '\\n5. THEME MANAGEMENT TESTS\\n');\n    SET p_DetailedReport = CONCAT(p_DetailedReport, '=========================\\n');\n    \n    -- Test theme retrieval\n    BEGIN\n        DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET v_TestResult = FALSE;\n        SET v_TestResult = TRUE;\n        SET v_TestName = 'Get All Themes';\n        \n        CALL app_themes_Get_All(v_Status, v_Message);\n        SET p_TotalTests = p_TotalTests + 1;\n        \n        IF v_TestResult = TRUE AND v_Status = 0 THEN\n            SET p_TestsPassed = p_TestsPassed + 1;\n            SET p_DetailedReport = CONCAT(p_DetailedReport, '✓ PASS: Get Themes - ', v_Message, '\\n');\n        ELSE\n            SET p_TestsFailed = p_TestsFailed + 1;\n            SET p_DetailedReport = CONCAT(p_DetailedReport, '✗ FAIL: Get Themes - ', v_Message, '\\n');\n        END IF;\n    END;\n    \n    -- Clean up test data\n    DELETE FROM inv_inventory WHERE PartID = 'TEST_VERIFICATION_PART' AND User = 'SYSTEM_TEST';\n    DELETE FROM inv_transaction WHERE PartID = 'TEST_VERIFICATION_PART' AND User = 'SYSTEM_TEST';\n    \n    -- Generate summary\n    SET p_DetailedReport = CONCAT(p_DetailedReport, '\\n========================================\\n');\n    SET p_DetailedReport = CONCAT(p_DetailedReport, 'COMPREHENSIVE TEST SUMMARY\\n');\n    SET p_DetailedReport = CONCAT(p_DetailedReport, '========================================\\n');\n    SET p_DetailedReport = CONCAT(p_DetailedReport, 'Total Tests Run: ', p_TotalTests, '\\n');\n    SET p_DetailedReport = CONCAT(p_DetailedReport, 'Tests Passed: ', p_TestsPassed, '\\n');\n    SET p_DetailedReport = CONCAT(p_DetailedReport, 'Tests Failed: ', p_TestsFailed, '\\n');\n    \n    IF p_TestsFailed = 0 THEN\n        SET p_DetailedReport = CONCAT(p_DetailedReport, 'OVERALL RESULT: ALL TESTS PASSED ✓\\n');\n        SET p_DetailedReport = CONCAT(p_DetailedReport, 'DATABASE IS READY FOR PRODUCTION USE\\n');\n    ELSE\n        SET p_DetailedReport = CONCAT(p_DetailedReport, 'OVERALL RESULT: ', p_TestsFailed, ' TESTS FAILED ⚠\\n');\n        SET p_DetailedReport = CONCAT(p_DetailedReport, 'REVIEW FAILED TESTS BEFORE DEPLOYMENT\\n');\n    END IF;\n    \n    SET p_DetailedReport = CONCAT(p_DetailedReport, '========================================');\n    \nEND $$"
      },
      {
        "Name": "test_TableCompatibility",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\99_Database_Testing_Suite.sql",
        "Parameters": [
          {
            "Name": "p_TableName",
            "DataType": "VARCHAR(64)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "TEXT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Quick test procedure for specific table compatibility",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE test_TableCompatibility(\n    IN p_TableName VARCHAR(64),\n    OUT p_Status INT,\n    OUT p_ErrorMsg TEXT\n)\nBEGIN\n    DECLARE v_ColumnCount INT DEFAULT 0;\n    DECLARE v_TableExists BOOLEAN DEFAULT FALSE;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error while testing table: ', p_TableName);\n    END;\n    \n    -- Check if table exists\n    SELECT COUNT(*) INTO v_ColumnCount\n    FROM INFORMATION_SCHEMA.TABLES \n    WHERE TABLE_SCHEMA = DATABASE() \n    AND TABLE_NAME = p_TableName;\n    \n    IF v_ColumnCount = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Table not found: ', p_TableName);\n    ELSE\n        -- Get column count for validation\n        SELECT COUNT(*) INTO v_ColumnCount\n        FROM INFORMATION_SCHEMA.COLUMNS\n        WHERE TABLE_SCHEMA = DATABASE() \n        AND TABLE_NAME = p_TableName;\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Table verified: ', p_TableName, ' with ', v_ColumnCount, ' columns');\n        \n        -- Return column details\n        SELECT \n            COLUMN_NAME as ColumnName,\n            DATA_TYPE as DataType,\n            IS_NULLABLE as Nullable,\n            COLUMN_DEFAULT as DefaultValue,\n            CHARACTER_MAXIMUM_LENGTH as MaxLength\n        FROM INFORMATION_SCHEMA.COLUMNS\n        WHERE TABLE_SCHEMA = DATABASE() \n        AND TABLE_NAME = p_TableName\n        ORDER BY ORDINAL_POSITION;\n    END IF;\n    \nEND $$"
      },
      {
        "Name": "test_batch_generation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\BATCH_SEQUENCE_TABLE_FIX.sql",
        "Parameters": [],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE test_batch_generation()\nBEGIN\n    DECLARE v_status INT;\n    DECLARE v_error_msg VARCHAR(255);\n    \n    CALL inv_inventory_GetNextBatchNumber(v_status, v_error_msg);\n    SELECT v_status as Status, v_error_msg as Message, 'Batch generation test' as Info;\nEND $$"
      },
      {
        "Name": "inv_inventory_Add_Item",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\DEPLOY_BATCH_SEQUENCE_FIX.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Quantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_BatchNumber",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Add inventory item - ALWAYS CREATE NEW BATCH VERSION (no quantity consolidation)",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE PROCEDURE inv_inventory_Add_Item(\n    IN p_PartID VARCHAR(300),        -- Match working size\n    IN p_Location VARCHAR(100),\n    IN p_Operation VARCHAR(100),\n    IN p_Quantity INT,\n    IN p_ItemType VARCHAR(100),      -- Match working size  \n    IN p_User VARCHAR(100),\n    IN p_BatchNumber VARCHAR(100),   -- Match working size (optional)\n    IN p_Notes VARCHAR(1000),        -- Match working size\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_NextBatchNumber VARCHAR(20);\n    DECLARE v_ErrorMessage TEXT DEFAULT '';\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        GET DIAGNOSTICS CONDITION 1\n            v_ErrorMessage = MESSAGE_TEXT;\n        \n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding inventory item for part: ', p_PartID);\n        \n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    -- ALWAYS generate a new batch number for each addition (no consolidation)\n    -- This ensures each inventory addition creates a separate trackable batch\n    \n    -- ROBUST: Ensure the batch sequence table exists\n    CREATE TABLE IF NOT EXISTS inv_inventory_batch_seq (\n        last_batch_number INT(11) NOT NULL DEFAULT 0,\n        created_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        updated_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n    \n    -- ROBUST: Initialize sequence table if empty\n    INSERT IGNORE INTO inv_inventory_batch_seq (last_batch_number)\n    SELECT COALESCE(MAX(CAST(CASE \n        WHEN BatchNumber IS NOT NULL AND BatchNumber REGEXP '^[0-9]+$' \n        THEN BatchNumber \n        ELSE '0' \n    END AS UNSIGNED)), 0)\n    FROM inv_inventory;\n    \n    -- Generate next batch number\n    SELECT COALESCE(last_batch_number, 0) INTO @nextBatch FROM inv_inventory_batch_seq LIMIT 1;\n    SET @nextBatch = @nextBatch + 1;\n    SET v_NextBatchNumber = LPAD(@nextBatch, 10, '0');\n    \n    -- Update the sequence table\n    UPDATE inv_inventory_batch_seq SET last_batch_number = @nextBatch WHERE TRUE;\n    \n    -- Validate quantity\n    IF p_Quantity <= 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Quantity must be greater than zero';\n        ROLLBACK;\n    ELSE\n        -- ALWAYS INSERT NEW ROW - Never update existing quantities\n        -- Each inventory addition gets its own batch number and row\n        INSERT INTO inv_inventory (\n            PartID, Location, Operation, Quantity, ItemType, \n            User, BatchNumber, Notes, ReceiveDate, LastUpdated\n        ) VALUES (\n            p_PartID, p_Location, p_Operation, p_Quantity, p_ItemType,\n            p_User, v_NextBatchNumber, p_Notes, NOW(), NOW()\n        );\n        \n        -- Insert transaction record for audit trail\n        INSERT INTO inv_transaction (\n            TransactionType, BatchNumber, PartID, FromLocation, ToLocation,\n            Operation, Quantity, Notes, User, ItemType, ReceiveDate\n        ) VALUES (\n            'IN', v_NextBatchNumber, p_PartID, p_Location, NULL,\n            p_Operation, p_Quantity, p_Notes, p_User, p_ItemType, NOW()\n        );\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('New inventory batch created successfully for part: ', p_PartID, ' with batch: ', v_NextBatchNumber, ', quantity: ', p_Quantity);\n        COMMIT;\n    END IF;\nEND $$"
      },
      {
        "Name": "inv_inventory_GetNextBatchNumber",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\DEPLOY_BATCH_SEQUENCE_FIX.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "Get next available batch number with status reporting and error logging",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE PROCEDURE inv_inventory_GetNextBatchNumber(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_ErrorMessage TEXT DEFAULT '';\n    DECLARE v_NextBatchNumber VARCHAR(20) DEFAULT '0000000001';\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        GET DIAGNOSTICS CONDITION 1\n            v_ErrorMessage = MESSAGE_TEXT;\n        \n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while generating next batch number';\n        \n        -- Log error to log_error table if it exists\n        INSERT IGNORE INTO log_error (\n            User, Severity, ErrorType, ErrorMessage, StackTrace,\n            ModuleName, MethodName, AdditionalInfo, MachineName,\n            OSVersion, AppVersion, ErrorTime\n        ) VALUES (\n            'SYSTEM', 'Error', 'DatabaseError',\n            CONCAT('inv_inventory_GetNextBatchNumber failed: ', v_ErrorMessage),\n            v_ErrorMessage,\n            'inv_inventory_GetNextBatchNumber', 'GetNextBatchNumber',\n            'Error generating next batch number',\n            'Database Server', 'MySQL 5.7.24', '5.0.1.2', NOW()\n        );\n    END;\n    \n    -- ROBUST: Ensure the batch sequence table exists and is initialized\n    CREATE TABLE IF NOT EXISTS inv_inventory_batch_seq (\n        last_batch_number INT(11) NOT NULL DEFAULT 0,\n        created_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,\n        updated_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n    \n    -- ROBUST: Initialize sequence table if empty\n    INSERT IGNORE INTO inv_inventory_batch_seq (last_batch_number)\n    SELECT COALESCE(MAX(CAST(CASE \n        WHEN BatchNumber IS NOT NULL AND BatchNumber REGEXP '^[0-9]+$' \n        THEN BatchNumber \n        ELSE '0' \n    END AS UNSIGNED)), 0)\n    FROM inv_inventory;\n    \n    -- ROBUST: Generate next batch number using fallback methods\n    SELECT LPAD(COALESCE(last_batch_number + 1, 1), 10, '0') INTO v_NextBatchNumber\n    FROM inv_inventory_batch_seq\n    LIMIT 1;\n    \n    -- ROBUST: If sequence table is still empty, use inventory table maximum\n    IF v_NextBatchNumber IS NULL OR v_NextBatchNumber = '0000000000' THEN\n        SELECT LPAD(COALESCE(MAX(CAST(CASE \n            WHEN BatchNumber IS NOT NULL AND BatchNumber REGEXP '^[0-9]+$' \n            THEN BatchNumber \n            ELSE '0' \n        END AS UNSIGNED)), 0) + 1, 10, '0') INTO v_NextBatchNumber\n        FROM inv_inventory;\n        \n        -- ROBUST: Final fallback to default starting batch number\n        IF v_NextBatchNumber IS NULL OR v_NextBatchNumber = '0000000000' THEN\n            SET v_NextBatchNumber = '0000000001';\n        END IF;\n    END IF;\n    \n    -- Update the sequence table for next time\n    UPDATE inv_inventory_batch_seq \n    SET last_batch_number = CAST(v_NextBatchNumber AS UNSIGNED)\n    WHERE TRUE;\n    \n    -- Return the generated batch number\n    SELECT v_NextBatchNumber as NextBatchNumber;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = 'Next batch number generated successfully';\nEND $$"
      },
      {
        "Name": "test_final_batch_generation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\DEPLOY_BATCH_SEQUENCE_FIX.sql",
        "Parameters": [],
        "Purpose": "Test batch number generation",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE test_final_batch_generation()\nBEGIN\n    DECLARE v_status INT;\n    DECLARE v_error_msg VARCHAR(255);\n    \n    CALL inv_inventory_GetNextBatchNumber(v_status, v_error_msg);\n    SELECT \n        'Batch Generation Test' as Check_Type,\n        v_status as Status_Code, \n        v_error_msg as Message,\n        CASE \n            WHEN v_status = 0 THEN '? SUCCESS'\n            WHEN v_status = 1 THEN '?? WARNING'  \n            ELSE '? ERROR'\n        END as Result;\nEND $$"
      },
      {
        "Name": "test_final_batch_generation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\DEPLOY_BATCH_SEQUENCE_FIX_CMDLINE.sql",
        "Parameters": [],
        "Purpose": "Test batch number generation",
        "UsedByClasses": [],
        "Body": "CREATE PROCEDURE test_final_batch_generation()\nBEGIN\n    DECLARE v_status INT;\n    DECLARE v_error_msg VARCHAR(255);\n    \n    CALL inv_inventory_GetNextBatchNumber(v_status, v_error_msg);\n    SELECT \n        'Batch Generation Test' as Check_Type,\n        v_status as Status_Code, \n        v_error_msg as Message,\n        CASE \n            WHEN v_status = 0 THEN '? SUCCESS'\n            WHEN v_status = 1 THEN '?? WARNING'  \n            ELSE '? ERROR'\n        END as Result;\nEND $$"
      },
      {
        "Name": "app_themes_Add_Theme",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_ThemeName",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_DisplayName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_SettingsJson",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Description",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_CreatedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `app_themes_Add_Theme`(\n    IN p_ThemeName VARCHAR(50),\n    IN p_DisplayName VARCHAR(100),\n    IN p_SettingsJson TEXT,\n    IN p_Description TEXT,\n    IN p_CreatedBy VARCHAR(100)\n)\nBEGIN\n    DECLARE p_Status INT DEFAULT 0;\n    DECLARE p_ErrorMsg VARCHAR(255) DEFAULT '';\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_ThemeId INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while creating theme: ', p_ThemeName);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    IF p_ThemeName IS NULL OR TRIM(p_ThemeName) = '' THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Theme name cannot be empty';\n        ROLLBACK;\n    \n    ELSEIF EXISTS(SELECT 1 FROM app_themes WHERE ThemeName = p_ThemeName) THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Theme already exists: ', p_ThemeName);\n        ROLLBACK;\n    \n    ELSEIF p_SettingsJson IS NULL OR TRIM(p_SettingsJson) = '' THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Theme settings JSON cannot be empty';\n        ROLLBACK;\n    ELSE\n        INSERT INTO app_themes (\n            ThemeName,\n            DisplayName,\n            SettingsJson,\n            IsDefault,\n            IsActive,\n            Description,\n            CreatedBy,\n            CreatedDate\n        ) VALUES (\n            p_ThemeName,\n            IFNULL(p_DisplayName, p_ThemeName),\n            p_SettingsJson,\n            0, \n            1, \n            p_Description,\n            IFNULL(p_CreatedBy, 'SYSTEM'),\n            NOW()\n        );\n        \n        SET v_ThemeId = LAST_INSERT_ID();\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Theme created successfully: ', p_ThemeName, ' (ID: ', v_ThemeId, ')');\n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "app_themes_Delete_Theme",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_ThemeName",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ModifiedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `app_themes_Delete_Theme`(\n    IN p_ThemeName VARCHAR(50),\n    IN p_ModifiedBy VARCHAR(100)\n)\nBEGIN\n    DECLARE p_Status INT DEFAULT 0;\n    DECLARE p_ErrorMsg VARCHAR(255) DEFAULT '';\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting theme: ', p_ThemeName);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM app_themes WHERE ThemeName = p_ThemeName AND IsDefault = 0 AND IsActive = 1;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Theme not found, already deleted, or is a protected system theme: ', p_ThemeName);\n        ROLLBACK;\n    ELSE\n        \n        UPDATE app_themes \n        SET IsActive = 0,\n            ModifiedBy = IFNULL(p_ModifiedBy, 'SYSTEM'),\n            ModifiedDate = NOW()\n        WHERE ThemeName = p_ThemeName AND IsDefault = 0;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Theme deleted successfully: ', p_ThemeName);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('Failed to delete theme: ', p_ThemeName);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "app_themes_Exists",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_ThemeName",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `app_themes_Exists`(\n    IN p_ThemeName VARCHAR(50)\n)\nBEGIN\n    DECLARE p_Status INT DEFAULT 0;\n    DECLARE p_ErrorMsg VARCHAR(255) DEFAULT '';\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while checking theme existence: ', p_ThemeName);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM app_themes WHERE ThemeName = p_ThemeName AND IsActive = 1;\n    SELECT v_Count as ThemeExists;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Theme existence check completed for: ', p_ThemeName, ' (Exists: ', IF(v_Count > 0, 'Yes', 'No'), ')');\nEND ;;"
      },
      {
        "Name": "app_themes_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "handles"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `app_themes_Get_All`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving themes';\n    END;\n    \n    \n    SELECT * FROM app_themes ORDER BY ThemeName;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = 'Themes retrieved successfully';\nEND ;;"
      },
      {
        "Name": "app_themes_Get_ByName",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_ThemeName",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `app_themes_Get_ByName`(\n    IN p_ThemeName VARCHAR(50),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving theme: ', p_ThemeName);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM app_themes WHERE ThemeName = p_ThemeName;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Theme not found: ', p_ThemeName);\n        \n        SELECT NULL as ThemeName, NULL as SettingsJson LIMIT 0;\n    ELSE\n        SELECT \n            ID,\n            ThemeName,\n            DisplayName,\n            SettingsJson,\n            IsDefault,\n            IsActive,\n            Description,\n            CreatedDate,\n            CreatedBy,\n            ModifiedDate,\n            ModifiedBy,\n            VERSION\n        FROM app_themes \n        WHERE ThemeName = p_ThemeName AND IsActive = 1\n        LIMIT 1;\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Theme retrieved successfully: ', p_ThemeName);\n    END IF;\nEND ;;"
      },
      {
        "Name": "app_themes_Get_UserTheme",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `app_themes_Get_UserTheme`(\n    IN p_UserId VARCHAR(100)\n)\nBEGIN\n    DECLARE p_Status INT DEFAULT 0;\n    DECLARE p_ErrorMsg VARCHAR(255) DEFAULT '';\n    DECLARE v_ThemeName VARCHAR(50) DEFAULT NULL;\n    DECLARE v_ThemeExists INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving user theme for: ', p_UserId);\n    END;\n    \n    \n    SELECT Theme_Name INTO v_ThemeName \n    FROM usr_users \n    WHERE User = p_UserId \n    LIMIT 1;\n    \n    \n    IF v_ThemeName IS NULL OR v_ThemeName = '' THEN\n        SET v_ThemeName = 'Default';\n    ELSE\n        \n        SELECT COUNT(*) INTO v_ThemeExists \n        FROM app_themes \n        WHERE ThemeName = v_ThemeName AND IsActive = 1;\n        \n        \n        IF v_ThemeExists = 0 THEN\n            SET v_ThemeName = 'Default';\n        END IF;\n    END IF;\n    \n    \n    SELECT \n        t.ID,\n        t.ThemeName,\n        t.DisplayName,\n        t.SettingsJson,\n        t.IsDefault,\n        t.Description\n    FROM app_themes t\n    WHERE t.ThemeName = v_ThemeName AND t.IsActive = 1\n    LIMIT 1;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('User theme retrieved successfully for: ', p_UserId, ' (Theme: ', v_ThemeName, ')');\nEND ;;"
      },
      {
        "Name": "app_themes_Set_UserTheme",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ThemeName",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `app_themes_Set_UserTheme`(\n    IN p_UserId VARCHAR(100),\n    IN p_ThemeName VARCHAR(50)\n)\nBEGIN\n    DECLARE p_Status INT DEFAULT 0;\n    DECLARE p_ErrorMsg VARCHAR(255) DEFAULT '';\n    DECLARE v_UserExists INT DEFAULT 0;\n    DECLARE v_ThemeExists INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while setting theme for user: ', p_UserId);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_UserExists FROM usr_users WHERE User = p_UserId;\n    \n    IF v_UserExists = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_UserId);\n        ROLLBACK;\n    ELSE\n        \n        SELECT COUNT(*) INTO v_ThemeExists FROM app_themes WHERE ThemeName = p_ThemeName AND IsActive = 1;\n        \n        IF v_ThemeExists = 0 THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('Theme not found or inactive: ', p_ThemeName);\n            ROLLBACK;\n        ELSE\n            \n            UPDATE usr_users \n            SET Theme_Name = p_ThemeName,\n                ModifiedDate = NOW()\n            WHERE User = p_UserId;\n            \n            SET v_RowsAffected = ROW_COUNT();\n            \n            IF v_RowsAffected > 0 THEN\n                SET p_Status = 0;\n                SET p_ErrorMsg = CONCAT('Theme set successfully for user: ', p_UserId, ' (Theme: ', p_ThemeName, ')');\n            ELSE\n                SET p_Status = 2;\n                SET p_ErrorMsg = CONCAT('No changes made for user: ', p_UserId);\n            END IF;\n            \n            COMMIT;\n        END IF;\n    END IF;\nEND ;;"
      },
      {
        "Name": "app_themes_Update_Theme",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_ThemeName",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_DisplayName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_SettingsJson",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Description",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ModifiedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `app_themes_Update_Theme`(\n    IN p_ThemeName VARCHAR(50),\n    IN p_DisplayName VARCHAR(100),\n    IN p_SettingsJson TEXT,\n    IN p_Description TEXT,\n    IN p_ModifiedBy VARCHAR(100)\n)\nBEGIN\n    DECLARE p_Status INT DEFAULT 0;\n    DECLARE p_ErrorMsg VARCHAR(255) DEFAULT '';\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating theme: ', p_ThemeName);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM app_themes WHERE ThemeName = p_ThemeName AND IsDefault = 0;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Theme not found or is a protected system theme: ', p_ThemeName);\n        ROLLBACK;\n    ELSE\n        UPDATE app_themes \n        SET DisplayName = IFNULL(p_DisplayName, DisplayName),\n            SettingsJson = IFNULL(p_SettingsJson, SettingsJson),\n            Description = p_Description,\n            ModifiedBy = IFNULL(p_ModifiedBy, 'SYSTEM'),\n            ModifiedDate = NOW(),\n            VERSION = VERSION + 1\n        WHERE ThemeName = p_ThemeName AND IsDefault = 0;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Theme updated successfully: ', p_ThemeName);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No changes made to theme: ', p_ThemeName);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "inv_inventory_Add_Item",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Location",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Quantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_BatchNumber",
            "DataType": "VARCHAR(20)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Notes",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_inventory_Add_Item`(\n    IN p_PartID VARCHAR(100),\n    IN p_Location VARCHAR(100),\n    IN p_Operation VARCHAR(100),\n    IN p_Quantity INT,\n    IN p_ItemType VARCHAR(50),\n    IN p_User VARCHAR(100),\n    IN p_BatchNumber VARCHAR(20),\n    IN p_Notes TEXT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_NextBatchNumber VARCHAR(20);\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding inventory item for part: ', p_PartID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    IF p_BatchNumber IS NULL OR p_BatchNumber = '' THEN\n        SELECT LPAD(COALESCE(MAX(CAST(BatchNumber AS UNSIGNED)), 0) + 1, 10, '0') \n        INTO v_NextBatchNumber\n        FROM inv_inventory;\n        SET p_BatchNumber = v_NextBatchNumber;\n    END IF;\n    \n    \n    IF p_Quantity <= 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Quantity must be greater than zero';\n        ROLLBACK;\n    ELSE\n        \n        INSERT INTO inv_inventory (\n            PartID, Location, Operation, Quantity, ItemType, \n            User, BatchNumber, Notes, ReceiveDate, LastUpdated\n        ) VALUES (\n            p_PartID, p_Location, p_Operation, p_Quantity, p_ItemType,\n            p_User, p_BatchNumber, p_Notes, NOW(), NOW()\n        );\n        \n        \n        INSERT INTO inv_transaction (\n            PartID, Location, Operation, Quantity, ItemType,\n            User, BatchNumber, Notes, TransactionType, ReceiveDate\n        ) VALUES (\n            p_PartID, p_Location, p_Operation, p_Quantity, p_ItemType,\n            p_User, p_BatchNumber, p_Notes, 'IN', NOW()\n        );\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Inventory item added successfully for part: ', p_PartID, ' with batch: ', p_BatchNumber);\n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "inv_inventory_Fix_BatchNumbers",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_inventory_Fix_BatchNumbers`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_ProcessedRecords INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while fixing batch numbers';\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    DROP TEMPORARY TABLE IF EXISTS temp_consolidated;\n    CREATE TEMPORARY TABLE temp_consolidated (\n        PartID VARCHAR(100),\n        Location VARCHAR(100),\n        Operation VARCHAR(100),\n        ItemType VARCHAR(50),\n        User VARCHAR(100),\n        TotalQuantity INT,\n        EarliestReceiveDate DATETIME,\n        ConsolidatedBatchNumber VARCHAR(20)\n    );\n    \n    \n    INSERT INTO temp_consolidated\n    SELECT \n        PartID, Location, Operation, ItemType, User,\n        SUM(Quantity) as TotalQuantity,\n        MIN(ReceiveDate) as EarliestReceiveDate,\n        MIN(BatchNumber) as ConsolidatedBatchNumber\n    FROM inv_inventory\n    GROUP BY PartID, Location, Operation, ItemType, User\n    HAVING SUM(Quantity) > 0;\n    \n    \n    SELECT COUNT(*) INTO v_ProcessedRecords FROM temp_consolidated;\n    \n    \n    DELETE FROM inv_inventory;\n    \n    \n    INSERT INTO inv_inventory (\n        PartID, Location, Operation, Quantity, ItemType, User, \n        BatchNumber, ReceiveDate, LastUpdated\n    )\n    SELECT \n        PartID, Location, Operation, TotalQuantity, ItemType, User,\n        ConsolidatedBatchNumber, EarliestReceiveDate, NOW()\n    FROM temp_consolidated\n    WHERE TotalQuantity > 0;\n    \n    DROP TEMPORARY TABLE temp_consolidated;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Batch numbers fixed successfully, processed ', v_ProcessedRecords, ' records');\n    \n    COMMIT;\nEND ;;"
      },
      {
        "Name": "inv_inventory_GetNextBatchNumber",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_inventory_GetNextBatchNumber`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while generating next batch number';\n    END;\n    \n    SELECT LPAD(COALESCE(MAX(CAST(BatchNumber AS UNSIGNED)), 0) + 1, 10, '0') as NextBatchNumber\n    FROM inv_inventory;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = 'Next batch number generated successfully';\nEND ;;"
      },
      {
        "Name": "inv_inventory_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Control_RemoveTab"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_inventory_Get_All`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving all inventory';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM inv_inventory;\n    SELECT * FROM inv_inventory ORDER BY PartID, Location, Operation;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' inventory records successfully');\nEND ;;"
      },
      {
        "Name": "inv_inventory_Get_ByPartID",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_inventory_Get_ByPartID`(\n    IN p_PartID VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving inventory for part: ', p_PartID);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM inv_inventory WHERE PartID = p_PartID;\n    SELECT * FROM inv_inventory WHERE PartID = p_PartID ORDER BY Location, Operation;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' inventory records for part: ', p_PartID);\nEND ;;"
      },
      {
        "Name": "inv_inventory_Get_ByPartIDAndOperation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_inventory_Get_ByPartIDAndOperation`(\n    IN p_PartID VARCHAR(100),\n    IN p_Operation VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving inventory for part: ', p_PartID, ', operation: ', p_Operation);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count \n    FROM inv_inventory \n    WHERE PartID = p_PartID AND Operation = p_Operation;\n    \n    SELECT * FROM inv_inventory \n    WHERE PartID = p_PartID AND Operation = p_Operation \n    ORDER BY Location;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' inventory records for part: ', p_PartID, ', operation: ', p_Operation);\nEND ;;"
      },
      {
        "Name": "inv_inventory_Remove_Item",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Location",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Quantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_BatchNumber",
            "DataType": "VARCHAR(20)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Notes",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_inventory_Remove_Item`(\n    IN p_PartID VARCHAR(100),\n    IN p_Location VARCHAR(100),\n    IN p_Operation VARCHAR(100),\n    IN p_Quantity INT,\n    IN p_ItemType VARCHAR(50),\n    IN p_User VARCHAR(100),\n    IN p_BatchNumber VARCHAR(20),\n    IN p_Notes TEXT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_CurrentQuantity INT DEFAULT 0;\n    DECLARE v_InventoryId INT DEFAULT NULL;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while removing inventory item for part: ', p_PartID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    IF p_Quantity <= 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Quantity must be greater than zero';\n        ROLLBACK;\n    ELSE\n        \n        SELECT ID, Quantity INTO v_InventoryId, v_CurrentQuantity\n        FROM inv_inventory \n        WHERE PartID = p_PartID \n          AND Location = p_Location \n          AND Operation = p_Operation \n          AND BatchNumber = p_BatchNumber\n        LIMIT 1;\n        \n        IF v_InventoryId IS NULL THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('No matching inventory item found for part: ', p_PartID, ', batch: ', p_BatchNumber);\n            ROLLBACK;\n        ELSEIF v_CurrentQuantity < p_Quantity THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('Insufficient quantity. Available: ', v_CurrentQuantity, ', Requested: ', p_Quantity);\n            ROLLBACK;\n        ELSE\n            \n            UPDATE inv_inventory \n            SET Quantity = Quantity - p_Quantity,\n                LastUpdated = NOW()\n            WHERE ID = v_InventoryId;\n            \n            \n            DELETE FROM inv_inventory WHERE ID = v_InventoryId AND Quantity <= 0;\n            \n            \n            INSERT INTO inv_transaction (\n                PartID, Location, Operation, Quantity, ItemType,\n                User, BatchNumber, Notes, TransactionType, ReceiveDate\n            ) VALUES (\n                p_PartID, p_Location, p_Operation, p_Quantity, p_ItemType,\n                p_User, p_BatchNumber, p_Notes, 'OUT', NOW()\n            );\n            \n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Inventory item removed successfully for part: ', p_PartID, ', quantity: ', p_Quantity);\n            COMMIT;\n        END IF;\n    END IF;\nEND ;;"
      },
      {
        "Name": "inv_inventory_Search_Advanced",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Location",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_QtyMin",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_QtyMax",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Notes",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_FilterByDate",
            "DataType": "BOOLEAN",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_DateFrom",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_DateTo",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Control_AdvancedRemove"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_inventory_Search_Advanced`(\n    IN p_PartID VARCHAR(100),\n    IN p_Operation VARCHAR(100),\n    IN p_Location VARCHAR(100),\n    IN p_QtyMin INT,\n    IN p_QtyMax INT,\n    IN p_Notes TEXT,\n    IN p_User VARCHAR(100),\n    IN p_FilterByDate BOOLEAN,\n    IN p_DateFrom DATETIME,\n    IN p_DateTo DATETIME,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while searching inventory';\n    END;\n    \n    \n    SELECT * FROM inv_inventory \n    WHERE (p_PartID IS NULL OR p_PartID = '' OR PartID LIKE CONCAT('%', p_PartID, '%'))\n      AND (p_Operation IS NULL OR p_Operation = '' OR Operation LIKE CONCAT('%', p_Operation, '%'))\n      AND (p_Location IS NULL OR p_Location = '' OR Location LIKE CONCAT('%', p_Location, '%'))\n      AND (p_QtyMin IS NULL OR p_QtyMin <= 0 OR Quantity >= p_QtyMin)\n      AND (p_QtyMax IS NULL OR p_QtyMax <= 0 OR Quantity <= p_QtyMax)\n      AND (p_Notes IS NULL OR p_Notes = '' OR Notes LIKE CONCAT('%', p_Notes, '%'))\n      AND (p_User IS NULL OR p_User = '' OR User = p_User)\n      AND (p_FilterByDate = FALSE OR p_DateFrom IS NULL OR p_DateTo IS NULL \n           OR ReceiveDate BETWEEN p_DateFrom AND p_DateTo);\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM inv_inventory \n    WHERE (p_PartID IS NULL OR p_PartID = '' OR PartID LIKE CONCAT('%', p_PartID, '%'))\n      AND (p_Operation IS NULL OR p_Operation = '' OR Operation LIKE CONCAT('%', p_Operation, '%'))\n      AND (p_Location IS NULL OR p_Location = '' OR Location LIKE CONCAT('%', p_Location, '%'))\n      AND (p_QtyMin IS NULL OR p_QtyMin <= 0 OR Quantity >= p_QtyMin)\n      AND (p_QtyMax IS NULL OR p_QtyMax <= 0 OR Quantity <= p_QtyMax)\n      AND (p_Notes IS NULL OR p_Notes = '' OR Notes LIKE CONCAT('%', p_Notes, '%'))\n      AND (p_User IS NULL OR p_User = '' OR User = p_User)\n      AND (p_FilterByDate = FALSE OR p_DateFrom IS NULL OR p_DateTo IS NULL \n           OR ReceiveDate BETWEEN p_DateFrom AND p_DateTo);\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Search completed successfully, found ', v_Count, ' results');\nEND ;;"
      },
      {
        "Name": "inv_inventory_Transfer_Part",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_BatchNumber",
            "DataType": "VARCHAR(20)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_NewLocation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_inventory_Transfer_Part`(\n    IN p_BatchNumber VARCHAR(20),\n    IN p_PartID VARCHAR(100),\n    IN p_Operation VARCHAR(100),\n    IN p_NewLocation VARCHAR(100),\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    DECLARE v_OldLocation VARCHAR(100);\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while transferring part: ', p_PartID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*), MAX(Location) INTO v_Count, v_OldLocation \n    FROM inv_inventory \n    WHERE BatchNumber = p_BatchNumber \n      AND PartID = p_PartID \n      AND Operation = p_Operation;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('No inventory found for part: ', p_PartID, ', batch: ', p_BatchNumber);\n        ROLLBACK;\n    ELSE\n        \n        UPDATE inv_inventory \n        SET Location = p_NewLocation,\n            User = p_User,\n            LastUpdated = NOW()\n        WHERE BatchNumber = p_BatchNumber \n          AND PartID = p_PartID \n          AND Operation = p_Operation;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Part transferred successfully from ', v_OldLocation, ' to ', p_NewLocation);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No transfer occurred for part: ', p_PartID);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "inv_inventory_transfer_quantity",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_BatchNumber",
            "DataType": "VARCHAR(20)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_TransferQuantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_NewLocation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_inventory_transfer_quantity`(\n    IN p_BatchNumber VARCHAR(20),\n    IN p_PartID VARCHAR(100),\n    IN p_Operation VARCHAR(100),\n    IN p_TransferQuantity INT,\n    IN p_NewLocation VARCHAR(100),\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_NewBatchNumber VARCHAR(20);\n    DECLARE v_ItemType VARCHAR(50);\n    DECLARE v_OriginalLocation VARCHAR(100);\n    DECLARE v_CurrentQuantity INT DEFAULT 0;\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while transferring quantity for part: ', p_PartID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    IF p_TransferQuantity <= 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Transfer quantity must be greater than zero';\n        ROLLBACK;\n    ELSE\n        \n        SELECT COUNT(*), MAX(Location), MAX(ItemType), MAX(Quantity) \n        INTO v_Count, v_OriginalLocation, v_ItemType, v_CurrentQuantity\n        FROM inv_inventory \n        WHERE BatchNumber = p_BatchNumber \n          AND PartID = p_PartID \n          AND Operation = p_Operation;\n        \n        IF v_Count = 0 THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('No inventory found for part: ', p_PartID, ', batch: ', p_BatchNumber);\n            ROLLBACK;\n        ELSEIF v_CurrentQuantity < p_TransferQuantity THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('Insufficient quantity for transfer. Available: ', v_CurrentQuantity, ', Requested: ', p_TransferQuantity);\n            ROLLBACK;\n        ELSE\n            \n            SELECT LPAD(COALESCE(MAX(CAST(BatchNumber AS UNSIGNED)), 0) + 1, 10, '0') \n            INTO v_NewBatchNumber\n            FROM inv_inventory;\n            \n            \n            UPDATE inv_inventory \n            SET Quantity = Quantity - p_TransferQuantity,\n                LastUpdated = NOW()\n            WHERE BatchNumber = p_BatchNumber \n              AND PartID = p_PartID \n              AND Operation = p_Operation;\n            \n            \n            DELETE FROM inv_inventory \n            WHERE BatchNumber = p_BatchNumber \n              AND PartID = p_PartID \n              AND Operation = p_Operation \n              AND Quantity <= 0;\n            \n            \n            INSERT INTO inv_inventory (\n                PartID, Location, Operation, Quantity, ItemType,\n                User, BatchNumber, ReceiveDate, LastUpdated\n            ) VALUES (\n                p_PartID, p_NewLocation, p_Operation, p_TransferQuantity, v_ItemType,\n                p_User, v_NewBatchNumber, NOW(), NOW()\n            );\n            \n            \n            INSERT INTO inv_transaction (\n                PartID, Location, Operation, Quantity, ItemType,\n                User, BatchNumber, TransactionType, ReceiveDate\n            ) VALUES \n            (p_PartID, v_OriginalLocation, p_Operation, p_TransferQuantity, v_ItemType,\n             p_User, p_BatchNumber, 'OUT', NOW()),\n            (p_PartID, p_NewLocation, p_Operation, p_TransferQuantity, v_ItemType,\n             p_User, v_NewBatchNumber, 'IN', NOW());\n            \n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Quantity transferred successfully from ', v_OriginalLocation, ' to ', p_NewLocation, ', new batch: ', v_NewBatchNumber);\n            COMMIT;\n        END IF;\n    END IF;\nEND ;;"
      },
      {
        "Name": "inv_transactions_GetAnalytics",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_UserName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IsAdmin",
            "DataType": "BOOLEAN",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_FromDate",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ToDate",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Transactions"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_transactions_GetAnalytics`(\n    IN p_UserName VARCHAR(100),\n    IN p_IsAdmin BOOLEAN,\n    IN p_FromDate DATETIME,\n    IN p_ToDate DATETIME,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving analytics';\n        ROLLBACK;\n    END;\n    \n    SELECT \n        COUNT(*) as TotalTransactions,\n        SUM(CASE WHEN TransactionType = 'IN' THEN 1 ELSE 0 END) as InTransactions,\n        SUM(CASE WHEN TransactionType = 'OUT' THEN 1 ELSE 0 END) as OutTransactions,\n        SUM(CASE WHEN TransactionType = 'TRANSFER' THEN 1 ELSE 0 END) as TransferTransactions,\n        SUM(Quantity) as TotalQuantity,\n        COUNT(DISTINCT PartID) as UniquePartIds,\n        COUNT(DISTINCT User) as ActiveUsers,\n        (SELECT PartID FROM inv_transaction t2 \n         WHERE (p_IsAdmin = TRUE OR t2.User = p_UserName)\n         AND (p_FromDate IS NULL OR t2.ReceiveDate >= p_FromDate)\n         AND (p_ToDate IS NULL OR t2.ReceiveDate <= p_ToDate)\n         GROUP BY PartID ORDER BY COUNT(*) DESC LIMIT 1) as TopPartId,\n        (SELECT User FROM inv_transaction t3 \n         WHERE (p_IsAdmin = TRUE OR t3.User = p_UserName)\n         AND (p_FromDate IS NULL OR t3.ReceiveDate >= p_FromDate)\n         AND (p_ToDate IS NULL OR t3.ReceiveDate <= p_ToDate)\n         GROUP BY User ORDER BY COUNT(*) DESC LIMIT 1) as TopUser\n    FROM inv_transaction t\n    WHERE \n        (p_IsAdmin = TRUE OR t.User = p_UserName)\n        AND (p_FromDate IS NULL OR t.ReceiveDate >= p_FromDate)\n        AND (p_ToDate IS NULL OR t.ReceiveDate <= p_ToDate);\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = 'Analytics retrieved successfully';\nEND ;;"
      },
      {
        "Name": "inv_transactions_SmartSearch",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_UserName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IsAdmin",
            "DataType": "BOOLEAN",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_BatchNumber",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Notes",
            "DataType": "VARCHAR(1000)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Quantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_TransactionTypes",
            "DataType": "VARCHAR(500)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_FromDate",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ToDate",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Locations",
            "DataType": "VARCHAR(500)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_GeneralSearch",
            "DataType": "VARCHAR(500)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Page",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_PageSize",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Transactions"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_transactions_SmartSearch`(\n    IN p_UserName VARCHAR(100),\n    IN p_IsAdmin BOOLEAN,\n    IN p_PartID VARCHAR(300),\n    IN p_BatchNumber VARCHAR(300),\n    IN p_Operation VARCHAR(100),\n    IN p_Notes VARCHAR(1000),\n    IN p_User VARCHAR(100),\n    IN p_ItemType VARCHAR(100),\n    IN p_Quantity INT,\n    IN p_TransactionTypes VARCHAR(500),\n    IN p_FromDate DATETIME,\n    IN p_ToDate DATETIME,\n    IN p_Locations VARCHAR(500),\n    IN p_GeneralSearch VARCHAR(500),\n    IN p_Page INT,\n    IN p_PageSize INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Offset INT DEFAULT 0;\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred during smart search';\n        ROLLBACK;\n    END;\n    \n    \n    SET v_Offset = (p_Page - 1) * p_PageSize;\n    \n    \n    SELECT \n        ID,\n        TransactionType,\n        BatchNumber,\n        PartID,\n        FromLocation,\n        ToLocation,\n        Operation,\n        Quantity,\n        Notes,\n        User,\n        ItemType,\n        ReceiveDate\n    FROM inv_transaction t\n    WHERE \n        \n        (p_IsAdmin = TRUE OR t.User = p_UserName)\n        \n        \n        AND (p_PartID IS NULL OR p_PartID = '' OR t.PartID LIKE CONCAT('%', p_PartID, '%'))\n        \n        \n        AND (p_BatchNumber IS NULL OR p_BatchNumber = '' OR t.BatchNumber LIKE CONCAT('%', p_BatchNumber, '%'))\n        \n        \n        AND (p_Operation IS NULL OR p_Operation = '' OR t.Operation LIKE CONCAT('%', p_Operation, '%'))\n        \n        \n        AND (p_Notes IS NULL OR p_Notes = '' OR t.Notes LIKE CONCAT('%', p_Notes, '%'))\n        \n        \n        AND (p_User IS NULL OR p_User = '' OR t.User LIKE CONCAT('%', p_User, '%'))\n        \n        \n        AND (p_ItemType IS NULL OR p_ItemType = '' OR t.ItemType = p_ItemType)\n        \n        \n        AND (p_Quantity IS NULL OR p_Quantity <= 0 OR t.Quantity = p_Quantity)\n        \n        \n        AND (p_TransactionTypes IS NULL OR p_TransactionTypes = '' \n             OR FIND_IN_SET(t.TransactionType, p_TransactionTypes) > 0)\n        \n        \n        AND (p_FromDate IS NULL OR t.ReceiveDate >= p_FromDate)\n        AND (p_ToDate IS NULL OR t.ReceiveDate <= p_ToDate)\n        \n        \n        AND (p_Locations IS NULL OR p_Locations = '' \n             OR FIND_IN_SET(t.FromLocation, p_Locations) > 0\n             OR FIND_IN_SET(t.ToLocation, p_Locations) > 0)\n        \n        \n        AND (p_GeneralSearch IS NULL OR p_GeneralSearch = ''\n             OR t.PartID LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.BatchNumber LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.Notes LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.User LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.FromLocation LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.ToLocation LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.Operation LIKE CONCAT('%', p_GeneralSearch, '%'))\n    \n    ORDER BY t.ReceiveDate DESC\n    LIMIT p_PageSize OFFSET v_Offset;\n    \n    \n    SELECT COUNT(*) INTO v_Count \n    FROM inv_transaction t\n    WHERE \n        (p_IsAdmin = TRUE OR t.User = p_UserName)\n        AND (p_PartID IS NULL OR p_PartID = '' OR t.PartID LIKE CONCAT('%', p_PartID, '%'))\n        AND (p_BatchNumber IS NULL OR p_BatchNumber = '' OR t.BatchNumber LIKE CONCAT('%', p_BatchNumber, '%'))\n        AND (p_Operation IS NULL OR p_Operation = '' OR t.Operation LIKE CONCAT('%', p_Operation, '%'))\n        AND (p_Notes IS NULL OR p_Notes = '' OR t.Notes LIKE CONCAT('%', p_Notes, '%'))\n        AND (p_User IS NULL OR p_User = '' OR t.User LIKE CONCAT('%', p_User, '%'))\n        AND (p_ItemType IS NULL OR p_ItemType = '' OR t.ItemType = p_ItemType)\n        AND (p_Quantity IS NULL OR p_Quantity <= 0 OR t.Quantity = p_Quantity)\n        AND (p_TransactionTypes IS NULL OR p_TransactionTypes = '' \n             OR FIND_IN_SET(t.TransactionType, p_TransactionTypes) > 0)\n        AND (p_FromDate IS NULL OR t.ReceiveDate >= p_FromDate)\n        AND (p_ToDate IS NULL OR t.ReceiveDate <= p_ToDate)\n        AND (p_Locations IS NULL OR p_Locations = '' \n             OR FIND_IN_SET(t.FromLocation, p_Locations) > 0\n             OR FIND_IN_SET(t.ToLocation, p_Locations) > 0)\n        AND (p_GeneralSearch IS NULL OR p_GeneralSearch = ''\n             OR t.PartID LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.BatchNumber LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.Notes LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.User LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.FromLocation LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.ToLocation LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.Operation LIKE CONCAT('%', p_GeneralSearch, '%'));\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Smart search completed, found ', v_Count, ' matching transactions');\nEND ;;"
      },
      {
        "Name": "inv_transaction_GetProblematicBatchCount",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_transaction_GetProblematicBatchCount`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while counting problematic batch numbers';\n    END;\n    \n    \n    SELECT COUNT(DISTINCT BatchNumber) INTO v_Count\n    FROM inv_transaction t1\n    WHERE EXISTS (\n        SELECT 1 FROM inv_transaction t2\n        WHERE t1.BatchNumber = t2.BatchNumber\n          AND DATE(t1.ReceiveDate) = DATE(t2.ReceiveDate)\n          AND t1.TransactionType != t2.TransactionType\n    );\n    \n    SELECT v_Count as ProblematicBatchCount;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Found ', v_Count, ' problematic batch numbers');\nEND ;;"
      },
      {
        "Name": "inv_transaction_GetProblematicBatches",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Limit",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_transaction_GetProblematicBatches`(\n    IN p_Limit INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving problematic batch numbers';\n    END;\n    \n    \n    IF p_Limit IS NULL OR p_Limit <= 0 THEN\n        SET p_Limit = 250; \n    END IF;\n    \n    \n    SELECT DISTINCT t1.BatchNumber\n    FROM inv_transaction t1\n    WHERE EXISTS (\n        SELECT 1 FROM inv_transaction t2\n        WHERE t1.BatchNumber = t2.BatchNumber\n          AND DATE(t1.ReceiveDate) = DATE(t2.ReceiveDate)\n          AND t1.TransactionType != t2.TransactionType\n    )\n    ORDER BY t1.BatchNumber\n    LIMIT p_Limit;\n    \n    SELECT COUNT(DISTINCT t1.BatchNumber) INTO v_Count\n    FROM inv_transaction t1\n    WHERE EXISTS (\n        SELECT 1 FROM inv_transaction t2\n        WHERE t1.BatchNumber = t2.BatchNumber\n          AND DATE(t1.ReceiveDate) = DATE(t2.ReceiveDate)\n          AND t1.TransactionType != t2.TransactionType\n    );\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved problematic batch numbers (limit: ', p_Limit, ', total: ', v_Count, ')');\nEND ;;"
      },
      {
        "Name": "inv_transaction_SplitBatchNumbers",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_BatchNumbers",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ProcessedCount",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_transaction_SplitBatchNumbers`(\n    IN p_BatchNumbers TEXT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255),\n    OUT p_ProcessedCount INT\n)\nBEGIN\n    DECLARE v_Counter INT DEFAULT 0;\n    DECLARE v_BatchCount INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while splitting batch numbers';\n        SET p_ProcessedCount = v_Counter;\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    IF p_BatchNumbers IS NOT NULL AND p_BatchNumbers != '' THEN\n        SET v_BatchCount = (CHAR_LENGTH(p_BatchNumbers) - CHAR_LENGTH(REPLACE(p_BatchNumbers, ',', '')) + 1);\n    ELSE\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'No batch numbers provided for splitting';\n        SET p_ProcessedCount = 0;\n        ROLLBACK;\n    END IF;\n    \n    \n    \n    \n    \n    SET v_Counter = v_BatchCount;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Batch numbers processed successfully (simulated)');\n    SET p_ProcessedCount = v_Counter;\n    \n    COMMIT;\nEND ;;"
      },
      {
        "Name": "log_changelog_Add_Entry",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Version",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Description",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ReleaseDate",
            "DataType": "DATE",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_CreatedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `log_changelog_Add_Entry`(\n    IN p_Version VARCHAR(50),\n    IN p_Description TEXT,\n    IN p_ReleaseDate DATE,\n    IN p_CreatedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding changelog entry for version: ', p_Version);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM log_changelog WHERE Version = p_Version;\n    \n    IF v_Count > 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Version already exists in changelog: ', p_Version);\n        ROLLBACK;\n    ELSE\n        INSERT INTO log_changelog (\n            Version,\n            Description,\n            ReleaseDate,\n            CreatedBy,\n            CreatedDate\n        ) VALUES (\n            p_Version,\n            p_Description,\n            p_ReleaseDate,\n            p_CreatedBy,\n            NOW()\n        );\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Changelog entry added successfully for version: ', p_Version);\n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "log_changelog_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `log_changelog_Get_All`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving changelog entries';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM log_changelog;\n    \n    SELECT \n        ID,\n        Version,\n        Description,\n        ReleaseDate,\n        CreatedBy,\n        CreatedDate,\n        ModifiedDate\n    FROM log_changelog \n    ORDER BY \n        \n        CAST(SUBSTRING_INDEX(Version, '.', 1) AS UNSIGNED) DESC,\n        CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(Version, '.', 2), '.', -1) AS UNSIGNED) DESC,\n        CAST(SUBSTRING_INDEX(Version, '.', -1) AS UNSIGNED) DESC,\n        \n        Version DESC,\n        \n        CreatedDate DESC;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' changelog entries successfully (ordered by highest version)');\nEND ;;"
      },
      {
        "Name": "log_changelog_Get_Current",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Service_Timer_VersionChecker"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `log_changelog_Get_Current`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving current version information';\n    END;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM log_changelog;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'No version information found in changelog';\n        SELECT \n            'Unknown' as Version,\n            'No changelog entries found' as Description,\n            NULL as ReleaseDate,\n            'System' as CreatedBy,\n            NOW() as CreatedDate;\n    ELSE\n        \n        \n        SELECT \n            Version,\n            Description,\n            ReleaseDate,\n            CreatedBy,\n            CreatedDate\n        FROM log_changelog \n        ORDER BY \n            \n            CAST(SUBSTRING_INDEX(Version, '.', 1) AS UNSIGNED) DESC,\n            CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(Version, '.', 2), '.', -1) AS UNSIGNED) DESC,\n            CAST(SUBSTRING_INDEX(Version, '.', -1) AS UNSIGNED) DESC,\n            \n            Version DESC,\n            \n            CreatedDate DESC\n        LIMIT 1;\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = 'Current version (highest version number) retrieved successfully';\n    END IF;\nEND ;;"
      },
      {
        "Name": "log_changelog_Initialize_Default_Data",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `log_changelog_Initialize_Default_Data`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while initializing default changelog data';\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM log_changelog;\n    \n    IF v_Count = 0 THEN\n        \n        INSERT INTO log_changelog (Version, Description, ReleaseDate, CreatedBy, CreatedDate) VALUES\n        ('1.0.0', 'MTM Inventory Application - Initial Release with uniform parameter naming system, MySQL 5.7.24 compatibility, and comprehensive stored procedure architecture.', CURDATE(), 'SYSTEM', NOW()),\n        ('1.0.1', 'Bug fixes and performance improvements for version checking system.', CURDATE(), 'SYSTEM', NOW()),\n        ('1.1.0', 'Added enhanced error handling and improved user interface feedback.', CURDATE(), 'SYSTEM', NOW());\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = 'Default changelog data initialized successfully with sample versions';\n    ELSE\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Changelog table already contains ', v_Count, ' entries - skipping initialization');\n    END IF;\n    \n    COMMIT;\nEND ;;"
      },
      {
        "Name": "log_error_Add_Error",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Severity",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorType",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMessage",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_StackTrace",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ModuleName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_MethodName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_AdditionalInfo",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_MachineName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_OSVersion",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_AppVersion",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorTime",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_ErrorLog"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `log_error_Add_Error`(\n    IN p_User VARCHAR(100),\n    IN p_Severity VARCHAR(50),\n    IN p_ErrorType VARCHAR(100),\n    IN p_ErrorMessage TEXT,\n    IN p_StackTrace TEXT,\n    IN p_ModuleName VARCHAR(100),\n    IN p_MethodName VARCHAR(100),\n    IN p_AdditionalInfo TEXT,\n    IN p_MachineName VARCHAR(100),\n    IN p_OSVersion VARCHAR(100),\n    IN p_AppVersion VARCHAR(50),\n    IN p_ErrorTime DATETIME,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        ROLLBACK;\n        GET DIAGNOSTICS CONDITION 1\n            @sqlstate = RETURNED_SQLSTATE, \n            @errno = MYSQL_ERRNO, \n            @text = MESSAGE_TEXT;\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while logging error for user: ', p_User, ' - ', @text);\n    END;\n\n    START TRANSACTION;\n\n    \n    IF p_User IS NULL OR p_User = '' THEN\n        SET p_User = 'Unknown';\n    END IF;\n\n    IF p_Severity IS NULL OR p_Severity = '' THEN\n        SET p_Severity = 'Error';\n    END IF;\n\n    IF p_ErrorTime IS NULL THEN\n        SET p_ErrorTime = NOW();\n    END IF;\n\n    \n    INSERT INTO log_error (\n        User, Severity, ErrorType, ErrorMessage, StackTrace, \n        ModuleName, MethodName, AdditionalInfo, MachineName, \n        OSVersion, AppVersion, ErrorTime\n    ) VALUES (\n        p_User, p_Severity, p_ErrorType, p_ErrorMessage, p_StackTrace,\n        p_ModuleName, p_MethodName, p_AdditionalInfo, p_MachineName,\n        p_OSVersion, p_AppVersion, p_ErrorTime\n    );\n\n    IF ROW_COUNT() > 0 THEN\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Error logged successfully for user: ', p_User);\n    ELSE\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Warning: Error log entry was not created for user: ', p_User);\n    END IF;\n\n    COMMIT;\nEND ;;"
      },
      {
        "Name": "log_error_Delete_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_ErrorLog"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `log_error_Delete_All`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        ROLLBACK;\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while deleting all error log entries';\n    END;\n\n    START TRANSACTION;\n\n    \n    SELECT COUNT(*) INTO v_Count FROM log_error;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'No error log entries found to delete';\n        ROLLBACK;\n    ELSE\n        DELETE FROM log_error;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Successfully deleted ', v_RowsAffected, ' error log entries');\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = 'No error log entries were deleted';\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "log_error_Delete_ById",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Id",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_ErrorLog"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `log_error_Delete_ById`(\n    IN p_Id INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        ROLLBACK;\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting error log entry with ID: ', p_Id);\n    END;\n\n    START TRANSACTION;\n\n    \n    IF p_Id IS NULL OR p_Id <= 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Valid ID parameter is required';\n        ROLLBACK;\n    ELSE\n        \n        SELECT COUNT(*) INTO v_Count FROM log_error WHERE ID = p_Id;\n        \n        IF v_Count = 0 THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('Error log entry with ID ', p_Id, ' not found');\n            ROLLBACK;\n        ELSE\n            DELETE FROM log_error WHERE ID = p_Id;\n            SET v_RowsAffected = ROW_COUNT();\n            \n            IF v_RowsAffected > 0 THEN\n                SET p_Status = 0;\n                SET p_ErrorMsg = CONCAT('Error log entry with ID ', p_Id, ' deleted successfully');\n            ELSE\n                SET p_Status = 2;\n                SET p_ErrorMsg = CONCAT('Error log entry with ID ', p_Id, ' was not deleted');\n            END IF;\n            \n            COMMIT;\n        END IF;\n    END IF;\nEND ;;"
      },
      {
        "Name": "log_error_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_ErrorLog"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `log_error_Get_All`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving all error logs';\n    END;\n\n    SELECT COUNT(*) INTO v_Count FROM log_error;\n    \n    SELECT \n        ID,\n        User,\n        ErrorMessage,\n        StackTrace,\n        MethodName,\n        ErrorType,\n        LoggedDate\n    FROM log_error \n    ORDER BY LoggedDate DESC;\n\n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' error log entries successfully');\nEND ;;"
      },
      {
        "Name": "log_error_Get_ByDateRange",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_StartDate",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_EndDate",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_ErrorLog"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `log_error_Get_ByDateRange`(\n    IN p_StartDate DATETIME,\n    IN p_EndDate DATETIME,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving error logs for date range: ', \n                               DATE_FORMAT(p_StartDate, '%Y-%m-%d'), ' to ', DATE_FORMAT(p_EndDate, '%Y-%m-%d'));\n    END;\n\n    \n    IF p_StartDate IS NULL OR p_EndDate IS NULL THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Start date and end date parameters are required';\n    ELSEIF p_StartDate > p_EndDate THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Start date must be less than or equal to end date';\n    ELSE\n        SELECT COUNT(*) INTO v_Count FROM log_error \n        WHERE ErrorTime BETWEEN p_StartDate AND p_EndDate;\n        \n        SELECT * FROM log_error \n        WHERE ErrorTime BETWEEN p_StartDate AND p_EndDate \n        ORDER BY ErrorTime DESC;\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' error log entries between ', \n                               DATE_FORMAT(p_StartDate, '%Y-%m-%d %H:%i:%s'), ' and ', \n                               DATE_FORMAT(p_EndDate, '%Y-%m-%d %H:%i:%s'));\n    END IF;\nEND ;;"
      },
      {
        "Name": "log_error_Get_ByUser",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_ErrorLog"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `log_error_Get_ByUser`(\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving error logs for user: ', p_User);\n    END;\n\n    \n    IF p_User IS NULL OR p_User = '' THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'User parameter is required';\n    ELSE\n        SELECT COUNT(*) INTO v_Count FROM log_error WHERE User = p_User;\n        \n        SELECT * FROM log_error \n        WHERE User = p_User \n        ORDER BY ErrorTime DESC;\n\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' error log entries for user: ', p_User);\n    END IF;\nEND ;;"
      },
      {
        "Name": "log_error_Get_Unique",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_ErrorLog"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `log_error_Get_Unique`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving unique error combinations';\n    END;\n\n    SELECT COUNT(DISTINCT CONCAT(IFNULL(MethodName, ''), '|', IFNULL(ErrorMessage, ''))) \n    INTO v_Count FROM log_error \n    WHERE MethodName IS NOT NULL AND ErrorMessage IS NOT NULL;\n\n    SELECT DISTINCT MethodName, ErrorMessage \n    FROM log_error \n    WHERE MethodName IS NOT NULL AND ErrorMessage IS NOT NULL\n    ORDER BY MethodName, ErrorMessage;\n\n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' unique error combinations successfully');\nEND ;;"
      },
      {
        "Name": "md_item_types_Add_ItemType",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_ItemType"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_item_types_Add_ItemType`(\n    IN p_ItemType VARCHAR(50),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding item type: ', p_ItemType);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_item_types WHERE ItemType = p_ItemType;\n    \n    IF v_Count > 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Item type already exists: ', p_ItemType);\n        ROLLBACK;\n    ELSE\n        INSERT INTO md_item_types (ItemType, IssuedBy)\n        VALUES (p_ItemType, p_IssuedBy);\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Item type added successfully: ', p_ItemType);\n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_item_types_Delete_ByItemType",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_item_types_Delete_ByItemType`(\n    IN p_ItemType VARCHAR(50),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting item type: ', p_ItemType);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_item_types WHERE ItemType = p_ItemType;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Item type not found: ', p_ItemType);\n        ROLLBACK;\n    ELSE\n        DELETE FROM md_item_types WHERE ItemType = p_ItemType;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Item type deleted successfully: ', p_ItemType);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('Failed to delete item type: ', p_ItemType);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_item_types_Exists_ByItemType",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_item_types_Exists_ByItemType`(\n    IN p_ItemType VARCHAR(50),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while checking item type existence: ', p_ItemType);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_item_types WHERE ItemType = p_ItemType;\n    SELECT v_Count as ItemTypeExists;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Item type existence check completed for: ', p_ItemType, ' (Exists: ', IF(v_Count > 0, 'Yes', 'No'), ')');\nEND ;;"
      },
      {
        "Name": "md_item_types_GetDistinct",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Part"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_item_types_GetDistinct`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving distinct item types';\n    END;\n    \n    SELECT COUNT(DISTINCT ItemType) INTO v_Count FROM md_item_types;\n    SELECT DISTINCT ItemType FROM md_item_types ORDER BY ItemType;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' distinct item types successfully');\nEND ;;"
      },
      {
        "Name": "md_item_types_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_ItemType",
          "Helper_UI_ComboBoxes"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_item_types_Get_All`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving all item types';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_item_types;\n    SELECT * FROM md_item_types ORDER BY ItemType;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' item types successfully');\nEND ;;"
      },
      {
        "Name": "md_item_types_Update_ItemType",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_OldItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_NewItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_ItemType"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_item_types_Update_ItemType`(\n    IN p_OldItemType VARCHAR(50),\n    IN p_NewItemType VARCHAR(50),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating item type: ', p_OldItemType);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_item_types WHERE ItemType = p_OldItemType;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Item type not found: ', p_OldItemType);\n        ROLLBACK;\n    ELSE\n        UPDATE md_item_types \n        SET ItemType = p_NewItemType,\n            IssuedBy = p_IssuedBy\n        WHERE ItemType = p_OldItemType;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Item type updated successfully from ', p_OldItemType, ' to ', p_NewItemType);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No changes made to item type: ', p_OldItemType);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_locations_Add_Location",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Location",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Building",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Location"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_locations_Add_Location`(\n    IN p_Location VARCHAR(100),\n    IN p_Building VARCHAR(100),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding location: ', p_Location);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_locations WHERE Location = p_Location;\n    \n    IF v_Count > 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Location already exists: ', p_Location);\n        ROLLBACK;\n    ELSE\n        INSERT INTO md_locations (Location, Building, IssuedBy)\n        VALUES (p_Location, p_Building, p_IssuedBy);\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Location added successfully: ', p_Location);\n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_locations_Delete_ByLocation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Location",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Location"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_locations_Delete_ByLocation`(\n    IN p_Location VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting location: ', p_Location);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_locations WHERE Location = p_Location;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Location not found: ', p_Location);\n        ROLLBACK;\n    ELSE\n        DELETE FROM md_locations WHERE Location = p_Location;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Location deleted successfully: ', p_Location);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('Failed to delete location: ', p_Location);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_locations_Exists_ByLocation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Location",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Location"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_locations_Exists_ByLocation`(\n    IN p_Location VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while checking location existence: ', p_Location);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_locations WHERE Location = p_Location;\n    SELECT v_Count as LocationExists;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Location existence check completed for: ', p_Location, ' (Exists: ', IF(v_Count > 0, 'Yes', 'No'), ')');\nEND ;;"
      },
      {
        "Name": "md_locations_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Location",
          "Helper_UI_ComboBoxes"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_locations_Get_All`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving all locations';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_locations;\n    SELECT * FROM md_locations ORDER BY Location;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' locations successfully');\nEND ;;"
      },
      {
        "Name": "md_locations_Update_Location",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_OldLocation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_NewLocation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Building",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Location"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_locations_Update_Location`(\n    IN p_OldLocation VARCHAR(100),\n    IN p_NewLocation VARCHAR(100),\n    IN p_Building VARCHAR(100),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating location: ', p_OldLocation);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_locations WHERE Location = p_OldLocation;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Location not found: ', p_OldLocation);\n        ROLLBACK;\n    ELSE\n        UPDATE md_locations \n        SET Location = p_NewLocation,\n            Building = p_Building,\n            IssuedBy = p_IssuedBy\n        WHERE Location = p_OldLocation;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Location updated successfully from ', p_OldLocation, ' to ', p_NewLocation);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No changes made to location: ', p_OldLocation);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_operation_numbers_Add_Operation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Control_Add_Operation",
          "Dao_Operation"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_operation_numbers_Add_Operation`(\n    IN p_Operation VARCHAR(50),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding operation: ', p_Operation);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_operation_numbers WHERE Operation = p_Operation;\n    \n    IF v_Count > 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Operation already exists: ', p_Operation);\n        ROLLBACK;\n    ELSE\n        INSERT INTO md_operation_numbers (Operation, IssuedBy)\n        VALUES (p_Operation, p_IssuedBy);\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Operation added successfully: ', p_Operation);\n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_operation_numbers_Delete_ByOperation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Operation"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_operation_numbers_Delete_ByOperation`(\n    IN p_Operation VARCHAR(50),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting operation: ', p_Operation);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_operation_numbers WHERE Operation = p_Operation;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Operation not found: ', p_Operation);\n        ROLLBACK;\n    ELSE\n        DELETE FROM md_operation_numbers WHERE Operation = p_Operation;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Operation deleted successfully: ', p_Operation);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('Failed to delete operation: ', p_Operation);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_operation_numbers_Exists_ByOperation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Control_Add_Operation",
          "Dao_Operation"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_operation_numbers_Exists_ByOperation`(\n    IN p_Operation VARCHAR(50),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while checking operation existence: ', p_Operation);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_operation_numbers WHERE Operation = p_Operation;\n    SELECT v_Count as OperationExists;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Operation existence check completed for: ', p_Operation, ' (Exists: ', IF(v_Count > 0, 'Yes', 'No'), ')');\nEND ;;"
      },
      {
        "Name": "md_operation_numbers_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Operation",
          "Helper_UI_ComboBoxes"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_operation_numbers_Get_All`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving all operations';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_operation_numbers;\n    SELECT * FROM md_operation_numbers ORDER BY Operation;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' operations successfully');\nEND ;;"
      },
      {
        "Name": "md_operation_numbers_Update_Operation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_OldOperation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_NewOperation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Operation"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_operation_numbers_Update_Operation`(\n    IN p_OldOperation VARCHAR(50),\n    IN p_NewOperation VARCHAR(50),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating operation: ', p_OldOperation);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_operation_numbers WHERE Operation = p_OldOperation;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Operation not found: ', p_OldOperation);\n        ROLLBACK;\n    ELSE\n        UPDATE md_operation_numbers \n        SET Operation = p_NewOperation,\n            IssuedBy = p_IssuedBy\n        WHERE Operation = p_OldOperation;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Operation updated successfully from ', p_OldOperation, ' to ', p_NewOperation);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No changes made to operation: ', p_OldOperation);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_part_ids_Add_PartID",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_part_ids_Add_PartID`(\n    IN p_PartID VARCHAR(300),\n    IN p_ItemType VARCHAR(50),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding part ID: ', p_PartID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_part_ids WHERE PartID = p_PartID;\n    \n    IF v_Count > 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Part ID already exists: ', p_PartID);\n        ROLLBACK;\n    ELSE\n        INSERT INTO md_part_ids (PartID, ItemType, IssuedBy)\n        VALUES (p_PartID, p_ItemType, p_IssuedBy);\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Part ID added successfully: ', p_PartID);\n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_part_ids_Delete_ByPartID",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_part_ids_Delete_ByPartID`(\n    IN p_PartID VARCHAR(300),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting part ID: ', p_PartID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_part_ids WHERE PartID = p_PartID;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Part ID not found: ', p_PartID);\n        ROLLBACK;\n    ELSE\n        DELETE FROM md_part_ids WHERE PartID = p_PartID;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Part ID deleted successfully: ', p_PartID);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('Failed to delete part ID: ', p_PartID);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_part_ids_Exists_ByPartID",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_part_ids_Exists_ByPartID`(\n    IN p_PartID VARCHAR(300),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while checking part ID existence: ', p_PartID);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_part_ids WHERE PartID = p_PartID;\n    SELECT v_Count as PartExists;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Part ID existence check completed for: ', p_PartID, ' (Exists: ', IF(v_Count > 0, 'Yes', 'No'), ')');\nEND ;;"
      },
      {
        "Name": "md_part_ids_GetItemType_ByPartID",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_part_ids_GetItemType_ByPartID`(\n    IN p_PartID VARCHAR(300),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving item type for part ID: ', p_PartID);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_part_ids WHERE PartID = p_PartID;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Part ID not found: ', p_PartID);\n        SELECT NULL as ItemType;\n    ELSE\n        SELECT ItemType FROM md_part_ids WHERE PartID = p_PartID LIMIT 1;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Item type retrieved successfully for part ID: ', p_PartID);\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_part_ids_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Part",
          "Helper_UI_ComboBoxes"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_part_ids_Get_All`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving all part IDs';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_part_ids;\n    SELECT * FROM md_part_ids ORDER BY PartID;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' part IDs successfully');\nEND ;;"
      },
      {
        "Name": "md_part_ids_Get_ByPartID",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_part_ids_Get_ByPartID`(\n    IN p_PartID VARCHAR(300),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving part ID: ', p_PartID);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_part_ids WHERE PartID = p_PartID;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Part ID not found: ', p_PartID);\n        SELECT NULL as PartID, NULL as ItemType;\n    ELSE\n        SELECT * FROM md_part_ids WHERE PartID = p_PartID LIMIT 1;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Part ID retrieved successfully: ', p_PartID);\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_part_ids_Update_PartID",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_OldPartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_NewPartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_part_ids_Update_PartID`(\n    IN p_OldPartID VARCHAR(300),\n    IN p_NewPartID VARCHAR(300),\n    IN p_ItemType VARCHAR(50),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating part ID: ', p_OldPartID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_part_ids WHERE PartID = p_OldPartID;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Part ID not found: ', p_OldPartID);\n        ROLLBACK;\n    ELSE\n        UPDATE md_part_ids \n        SET PartID = p_NewPartID,\n            ItemType = p_ItemType,\n            IssuedBy = p_IssuedBy\n        WHERE PartID = p_OldPartID;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Part ID updated successfully from ', p_OldPartID, ' to ', p_NewPartID);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No changes made to part ID: ', p_OldPartID);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_GetRoleIdByName",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_RoleName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_System"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_GetRoleIdByName`(\n    IN p_RoleName VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RoleID INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving role ID for: ', p_RoleName);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM sys_roles WHERE RoleName = p_RoleName;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Role not found: ', p_RoleName);\n        SELECT NULL as RoleID;\n    ELSE\n        SELECT ID INTO v_RoleID FROM sys_roles WHERE RoleName = p_RoleName LIMIT 1;\n        SELECT v_RoleID as RoleID;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Role ID retrieved successfully for: ', p_RoleName);\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_GetStoredProcedureInventory",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "TEXT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_GetStoredProcedureInventory`(\r\n    OUT p_Status INT,\r\n    OUT p_ErrorMsg TEXT\r\n)\nBEGIN\r\n    DECLARE v_ProcCount INT DEFAULT 0;\r\n    \r\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\r\n    BEGIN\r\n        SET p_Status = -1;\r\n        SET p_ErrorMsg = 'Database error occurred while retrieving procedure inventory';\r\n    END;\r\n    \r\n    SELECT COUNT(*) INTO v_ProcCount\r\n    FROM INFORMATION_SCHEMA.ROUTINES \r\n    WHERE ROUTINE_SCHEMA = DATABASE()\r\n    AND ROUTINE_TYPE = 'PROCEDURE';\r\n    \r\n    -- Return detailed procedure information\r\n    SELECT \r\n        ROUTINE_NAME as ProcedureName,\r\n        CREATED as Created,\r\n        LAST_ALTERED as LastModified,\r\n        SQL_DATA_ACCESS as DataAccess,\r\n        SECURITY_TYPE as SecurityType,\r\n        ROUTINE_COMMENT as Comment,\r\n        DEFINER as Definer\r\n    FROM INFORMATION_SCHEMA.ROUTINES \r\n    WHERE ROUTINE_SCHEMA = DATABASE()\r\n    AND ROUTINE_TYPE = 'PROCEDURE'\r\n    ORDER BY ROUTINE_NAME;\r\n    \r\n    SET p_Status = 0;\r\n    SET p_ErrorMsg = CONCAT('Procedure inventory completed. Found ', v_ProcCount, ' stored procedures');\r\n    \r\nEND ;;"
      },
      {
        "Name": "sys_GetUserAccessType",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_System",
          "Program"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_GetUserAccessType`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving user access information';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users;\n    \n    \n    SELECT \n        ID,\n        User,\n        `Full Name`,\n        AccessType,\n        VitsUser,\n        CreatedDate,\n        ModifiedDate\n    FROM usr_users \n    ORDER BY `Full Name`;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved user access information for ', v_Count, ' users');\nEND ;;"
      },
      {
        "Name": "sys_GetUserIdByName",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_UserName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_System"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_GetUserIdByName`(\n    IN p_UserName VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_UserID INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving user ID for: ', p_UserName);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_UserName;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_UserName);\n        SELECT NULL as UserID;\n    ELSE\n        SELECT ID INTO v_UserID FROM usr_users WHERE User = p_UserName LIMIT 1;\n        SELECT v_UserID as UserID;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('User ID retrieved successfully for: ', p_UserName);\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_last_10_transactions_AddOrShift_ByUser",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Quantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_QuickButtons"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_last_10_transactions_AddOrShift_ByUser`(\n    IN p_User VARCHAR(100),\n    IN p_PartID VARCHAR(300),\n    IN p_Operation VARCHAR(50),\n    IN p_Quantity INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_ExistingPosition INT DEFAULT 0;\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding/shifting quick button for user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    \n    SELECT Position INTO v_ExistingPosition\n    FROM sys_last_10_transactions \n    WHERE User = p_User AND PartID = p_PartID AND Operation = p_Operation\n    LIMIT 1;\n    \n    IF v_ExistingPosition > 0 THEN\n        \n        UPDATE sys_last_10_transactions \n        SET Quantity = p_Quantity, ReceiveDate = NOW()\n        WHERE User = p_User AND Position = v_ExistingPosition;\n        \n        \n        IF v_ExistingPosition != 1 THEN\n            CALL sys_last_10_transactions_Move(p_User, v_ExistingPosition, 1, @move_status, @move_msg);\n        END IF;\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Updated existing quick button quantity and moved to position 1 for user: ', p_User);\n    ELSE\n        \n        CALL sys_last_10_transactions_Add_AtPosition(p_User, 1, p_PartID, p_Operation, p_Quantity, @add_status, @add_msg);\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Added new quick button at position 1 for user: ', p_User);\n    END IF;\n    \n    COMMIT;\nEND ;;"
      },
      {
        "Name": "sys_last_10_transactions_Add_AtPosition",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Position",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Quantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_QuickButtons"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_last_10_transactions_Add_AtPosition`(\n    IN p_User VARCHAR(100),\n    IN p_Position INT,\n    IN p_PartID VARCHAR(300),\n    IN p_Operation VARCHAR(50),\n    IN p_Quantity INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding quick button at position ', p_Position, ' for user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    IF p_Position < 1 OR p_Position > 10 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Invalid position: ', p_Position, '. Position must be between 1 and 10.');\n        ROLLBACK;\n    ELSE\n        \n        UPDATE sys_last_10_transactions \n        SET Position = Position + 1 \n        WHERE User = p_User AND Position >= p_Position AND Position < 10;\n        \n        \n        DELETE FROM sys_last_10_transactions WHERE User = p_User AND Position = 10;\n        \n        \n        INSERT INTO sys_last_10_transactions (User, Position, PartID, Operation, Quantity, ReceiveDate)\n        VALUES (p_User, p_Position, p_PartID, p_Operation, p_Quantity, NOW());\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Quick button added at position ', p_Position, ' for user: ', p_User);\n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_last_10_transactions_DeleteAll_ByUser",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_QuickButtons"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_last_10_transactions_DeleteAll_ByUser`(\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting all quick buttons for user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    SELECT COUNT(*) INTO v_Count FROM sys_last_10_transactions WHERE User = p_User;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('No quick buttons found for user: ', p_User);\n        ROLLBACK;\n    ELSE\n        DELETE FROM sys_last_10_transactions WHERE User = p_User;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Deleted ', v_RowsAffected, ' quick buttons for user: ', p_User);\n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_last_10_transactions_Get_ByUser",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Control_QuickButtons"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_last_10_transactions_Get_ByUser`(\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving quick buttons for user: ', p_User);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM sys_last_10_transactions WHERE User = p_User;\n    \n    SELECT \n        Position,\n        User,\n        PartID,\n        Operation,\n        Quantity,\n        ReceiveDate  \n    FROM sys_last_10_transactions \n    WHERE User = p_User \n    ORDER BY Position;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' quick buttons for user: ', p_User);\nEND ;;"
      },
      {
        "Name": "sys_last_10_transactions_Move",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_FromPosition",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ToPosition",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_QuickButtons"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_last_10_transactions_Move`(\n    IN p_User VARCHAR(100),\n    IN p_FromPosition INT,\n    IN p_ToPosition INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_PartID VARCHAR(300);\n    DECLARE v_Operation VARCHAR(50);\n    DECLARE v_Quantity INT;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while moving quick button from position ', p_FromPosition, ' to ', p_ToPosition, ' for user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    IF p_FromPosition < 1 OR p_FromPosition > 10 OR p_ToPosition < 1 OR p_ToPosition > 10 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Invalid positions. From: ', p_FromPosition, ', To: ', p_ToPosition, '. Positions must be between 1 and 10.');\n        ROLLBACK;\n    ELSEIF p_FromPosition = p_ToPosition THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Source and destination positions cannot be the same.';\n        ROLLBACK;\n    ELSE\n        \n        SELECT COUNT(*), PartID, Operation, Quantity \n        INTO v_Count, v_PartID, v_Operation, v_Quantity\n        FROM sys_last_10_transactions \n        WHERE User = p_User AND Position = p_FromPosition;\n        \n        IF v_Count = 0 THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('No quick button found at position ', p_FromPosition, ' for user: ', p_User);\n            ROLLBACK;\n        ELSE\n            \n            DELETE FROM sys_last_10_transactions WHERE User = p_User AND Position = p_FromPosition;\n            \n            \n            IF p_ToPosition < p_FromPosition THEN\n                \n                UPDATE sys_last_10_transactions \n                SET Position = Position + 1 \n                WHERE User = p_User AND Position >= p_ToPosition AND Position < p_FromPosition;\n            ELSE\n                \n                UPDATE sys_last_10_transactions \n                SET Position = Position - 1 \n                WHERE User = p_User AND Position > p_FromPosition AND Position <= p_ToPosition;\n            END IF;\n            \n            \n            INSERT INTO sys_last_10_transactions (User, Position, PartID, Operation, Quantity, ReceiveDate)\n            VALUES (p_User, p_ToPosition, v_PartID, v_Operation, v_Quantity, NOW());\n            \n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Quick button moved from position ', p_FromPosition, ' to ', p_ToPosition, ' for user: ', p_User);\n            COMMIT;\n        END IF;\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_last_10_transactions_RemoveAndShift_ByUser",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Position",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_QuickButtons"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_last_10_transactions_RemoveAndShift_ByUser`(\n    IN p_User VARCHAR(100),\n    IN p_Position INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while removing quick button at position ', p_Position, ' for user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    IF p_Position < 1 OR p_Position > 10 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Invalid position: ', p_Position, '. Position must be between 1 and 10.');\n        ROLLBACK;\n    ELSE\n        \n        SELECT COUNT(*) INTO v_Count FROM sys_last_10_transactions WHERE User = p_User AND Position = p_Position;\n        \n        IF v_Count = 0 THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('No quick button found at position ', p_Position, ' for user: ', p_User);\n            ROLLBACK;\n        ELSE\n            \n            DELETE FROM sys_last_10_transactions WHERE User = p_User AND Position = p_Position;\n            SET v_RowsAffected = ROW_COUNT();\n            \n            \n            UPDATE sys_last_10_transactions \n            SET Position = Position - 1 \n            WHERE User = p_User AND Position > p_Position;\n            \n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Quick button removed from position ', p_Position, ' and remaining positions shifted up for user: ', p_User);\n            COMMIT;\n        END IF;\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_last_10_transactions_Update_ByUserAndPosition",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Position",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Quantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_QuickButtons"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_last_10_transactions_Update_ByUserAndPosition`(\n    IN p_User VARCHAR(100),\n    IN p_Position INT,\n    IN p_PartID VARCHAR(300),\n    IN p_Operation VARCHAR(50),\n    IN p_Quantity INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating quick button at position ', p_Position, ' for user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    IF p_Position < 1 OR p_Position > 10 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Invalid position: ', p_Position, '. Position must be between 1 and 10.');\n        ROLLBACK;\n    ELSE\n        \n        SELECT COUNT(*) INTO v_Count FROM sys_last_10_transactions WHERE User = p_User AND Position = p_Position;\n        \n        IF v_Count = 0 THEN\n            \n            INSERT INTO sys_last_10_transactions (User, Position, PartID, Operation, Quantity, ReceiveDate)\n            VALUES (p_User, p_Position, p_PartID, p_Operation, p_Quantity, NOW());\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Quick button created at position ', p_Position, ' for user: ', p_User);\n        ELSE\n            \n            UPDATE sys_last_10_transactions \n            SET PartID = p_PartID,\n                Operation = p_Operation,\n                Quantity = p_Quantity,\n                ReceiveDate = NOW()\n            WHERE User = p_User AND Position = p_Position;\n            \n            SET v_RowsAffected = ROW_COUNT();\n            \n            IF v_RowsAffected > 0 THEN\n                SET p_Status = 0;\n                SET p_ErrorMsg = CONCAT('Quick button updated at position ', p_Position, ' for user: ', p_User);\n            ELSE\n                SET p_Status = 2;\n                SET p_ErrorMsg = CONCAT('No changes made to quick button at position ', p_Position, ' for user: ', p_User);\n            END IF;\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_roles_Get_ById",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_ID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_roles_Get_ById`(\n    IN p_ID INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving role with ID: ', p_ID);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM sys_roles WHERE ID = p_ID;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Role not found with ID: ', p_ID);\n        SELECT NULL as ID, NULL as RoleName, NULL as Description;\n    ELSE\n        SELECT * FROM sys_roles WHERE ID = p_ID LIMIT 1;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Role retrieved successfully with ID: ', p_ID);\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_SetUserAccessType",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_UserName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_AccessType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_System",
          "Program"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_SetUserAccessType`(\n    IN p_UserName VARCHAR(100),\n    IN p_AccessType VARCHAR(50),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_UserCount INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while setting access type for user: ', p_UserName);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_UserCount FROM usr_users WHERE User = p_UserName;\n    IF v_UserCount = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_UserName);\n        ROLLBACK;\n    ELSE\n        \n        UPDATE usr_users \n        SET AccessType = p_AccessType, \n            ModifiedDate = NOW() \n        WHERE User = p_UserName;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Access type updated successfully for user: ', p_UserName);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No changes made to access type for user: ', p_UserName);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_user_roles_Add",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_UserID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_RoleID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_AssignedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Control_Add_User",
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_user_roles_Add`(\n    IN p_UserID INT,\n    IN p_RoleID INT,\n    IN p_AssignedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_UserCount INT DEFAULT 0;\n    DECLARE v_RoleCount INT DEFAULT 0;\n    DECLARE v_ExistingCount INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding role assignment for user ID: ', p_UserID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_UserCount FROM usr_users WHERE ID = p_UserID;\n    IF v_UserCount = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User ID not found: ', p_UserID);\n        ROLLBACK;\n    ELSE\n        \n        SELECT COUNT(*) INTO v_RoleCount FROM sys_roles WHERE ID = p_RoleID;\n        IF v_RoleCount = 0 THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('Role ID not found: ', p_RoleID);\n            ROLLBACK;\n        ELSE\n            \n            SELECT COUNT(*) INTO v_ExistingCount FROM sys_user_roles WHERE UserID = p_UserID AND RoleID = p_RoleID;\n            IF v_ExistingCount > 0 THEN\n                SET p_Status = 1;\n                SET p_ErrorMsg = CONCAT('Role assignment already exists for user ID: ', p_UserID);\n                ROLLBACK;\n            ELSE\n                INSERT INTO sys_user_roles (UserID, RoleID, AssignedBy, AssignedDate)\n                VALUES (p_UserID, p_RoleID, p_AssignedBy, NOW());\n                \n                SET p_Status = 0;\n                SET p_ErrorMsg = CONCAT('Role assignment added successfully for user ID: ', p_UserID);\n                COMMIT;\n            END IF;\n        END IF;\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_user_roles_Delete",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_UserID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_RoleID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_user_roles_Delete`(\n    IN p_UserID INT,\n    IN p_RoleID INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_ExistingCount INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting role assignment for user ID: ', p_UserID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_ExistingCount FROM sys_user_roles WHERE UserID = p_UserID AND RoleID = p_RoleID;\n    IF v_ExistingCount = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Role assignment not found for user ID: ', p_UserID, ' and role ID: ', p_RoleID);\n        ROLLBACK;\n    ELSE\n        DELETE FROM sys_user_roles WHERE UserID = p_UserID AND RoleID = p_RoleID;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Role assignment deleted successfully for user ID: ', p_UserID);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('Failed to delete role assignment for user ID: ', p_UserID);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_user_roles_Update",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_UserID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_NewRoleID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_AssignedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_user_roles_Update`(\n    IN p_UserID INT,\n    IN p_NewRoleID INT,\n    IN p_AssignedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_UserCount INT DEFAULT 0;\n    DECLARE v_RoleCount INT DEFAULT 0;\n    DECLARE v_ExistingCount INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating role assignment for user ID: ', p_UserID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_UserCount FROM usr_users WHERE ID = p_UserID;\n    IF v_UserCount = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User ID not found: ', p_UserID);\n        ROLLBACK;\n    ELSE\n        \n        SELECT COUNT(*) INTO v_RoleCount FROM sys_roles WHERE ID = p_NewRoleID;\n        IF v_RoleCount = 0 THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('Role ID not found: ', p_NewRoleID);\n            ROLLBACK;\n        ELSE\n            \n            SELECT COUNT(*) INTO v_ExistingCount FROM sys_user_roles WHERE UserID = p_UserID;\n            IF v_ExistingCount = 0 THEN\n                \n                INSERT INTO sys_user_roles (UserID, RoleID, AssignedBy, AssignedDate)\n                VALUES (p_UserID, p_NewRoleID, p_AssignedBy, NOW());\n                \n                SET p_Status = 0;\n                SET p_ErrorMsg = CONCAT('New role assignment created for user ID: ', p_UserID);\n            ELSE\n                \n                UPDATE sys_user_roles \n                SET RoleID = p_NewRoleID,\n                    AssignedBy = p_AssignedBy,\n                    AssignedDate = NOW()\n                WHERE UserID = p_UserID;\n                \n                SET v_RowsAffected = ROW_COUNT();\n                \n                IF v_RowsAffected > 0 THEN\n                    SET p_Status = 0;\n                    SET p_ErrorMsg = CONCAT('Role assignment updated successfully for user ID: ', p_UserID);\n                ELSE\n                    SET p_Status = 2;\n                    SET p_ErrorMsg = CONCAT('No changes made to role assignment for user ID: ', p_UserID);\n                END IF;\n            END IF;\n            \n            COMMIT;\n        END IF;\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_VerifyDatabaseSchema",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "TEXT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_VerifyDatabaseSchema`(\r\n    OUT p_Status INT,\r\n    OUT p_ErrorMsg TEXT\r\n)\nBEGIN\r\n    DECLARE v_TableCount INT DEFAULT 0;\r\n    DECLARE v_MissingTables TEXT DEFAULT '';\r\n    DECLARE v_Expected INT DEFAULT 0;\r\n    \r\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\r\n    BEGIN\r\n        SET p_Status = -1;\r\n        SET p_ErrorMsg = 'Database error occurred during schema verification';\r\n    END;\r\n    \r\n    -- Expected core tables from UpdatedDatabase.sql analysis\r\n    SET v_Expected = 11;\r\n    \r\n    -- Check for each required table\r\n    SELECT COUNT(*) INTO v_TableCount\r\n    FROM INFORMATION_SCHEMA.TABLES \r\n    WHERE TABLE_SCHEMA = DATABASE()\r\n    AND TABLE_NAME IN (\r\n        'app_themes',\r\n        'debug_matching', \r\n        'inv_inventory',\r\n        'inv_inventory_batch_seq',\r\n        'inv_transaction',\r\n        'usr_users',\r\n        'usr_ui_settings', \r\n        'sys_user_roles',\r\n        'md_part_ids',\r\n        'md_locations', \r\n        'md_operation_numbers'\r\n    );\r\n    \r\n    IF v_TableCount < v_Expected THEN\r\n        SET p_Status = 1;\r\n        SET p_ErrorMsg = CONCAT('Missing tables detected. Found ', v_TableCount, ' of ', v_Expected, ' required tables');\r\n    ELSE\r\n        SET p_Status = 0;\r\n        SET p_ErrorMsg = CONCAT('Schema validation passed. All ', v_TableCount, ' required tables found');\r\n    END IF;\r\n    \r\n    -- Return detailed table information\r\n    SELECT \r\n        TABLE_NAME as TableName,\r\n        ENGINE as Engine,\r\n        TABLE_COLLATION as Collation,\r\n        CREATE_TIME as Created,\r\n        TABLE_COMMENT as Comment,\r\n        TABLE_ROWS as ApproxRows\r\n    FROM INFORMATION_SCHEMA.TABLES \r\n    WHERE TABLE_SCHEMA = DATABASE()\r\n    ORDER BY TABLE_NAME;\r\n    \r\nEND ;;"
      },
      {
        "Name": "sys_VerifyTableColumns",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_TableName",
            "DataType": "VARCHAR(64)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "TEXT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_VerifyTableColumns`(\r\n    IN p_TableName VARCHAR(64),\r\n    OUT p_Status INT,\r\n    OUT p_ErrorMsg TEXT\r\n)\nBEGIN\r\n    DECLARE v_ColumnCount INT DEFAULT 0;\r\n    DECLARE v_ExpectedColumns TEXT DEFAULT '';\r\n    \r\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\r\n    BEGIN\r\n        SET p_Status = -1;\r\n        SET p_ErrorMsg = CONCAT('Database error occurred while verifying columns for table: ', p_TableName);\r\n    END;\r\n    \r\n    -- Define expected columns for key tables based on UpdatedDatabase.sql\r\n    CASE p_TableName\r\n        WHEN 'inv_inventory' THEN\r\n            SET v_ExpectedColumns = 'ID,PartID,Location,Operation,Quantity,ItemType,ReceiveDate,LastUpdated,User,BatchNumber,Notes';\r\n        WHEN 'inv_transaction' THEN  \r\n            SET v_ExpectedColumns = 'ID,TransactionType,BatchNumber,PartID,FromLocation,ToLocation,Operation,Quantity,Notes,User,ItemType,ReceiveDate';\r\n        WHEN 'app_themes' THEN\r\n            SET v_ExpectedColumns = 'ThemeName,SettingsJson';\r\n        WHEN 'debug_matching' THEN\r\n            SET v_ExpectedColumns = 'id,in_id,in_part,in_loc,in_batch,out_id,out_part,out_loc,out_batch,matched_at';\r\n        ELSE\r\n            SET p_Status = 1;\r\n            SET p_ErrorMsg = CONCAT('Unknown table for verification: ', p_TableName);\r\n    END CASE;\r\n    \r\n    -- Return column information for manual verification\r\n    SELECT \r\n        COLUMN_NAME as ColumnName,\r\n        DATA_TYPE as DataType,\r\n        IS_NULLABLE as Nullable,\r\n        COLUMN_DEFAULT as DefaultValue,\r\n        CHARACTER_MAXIMUM_LENGTH as MaxLength,\r\n        COLUMN_KEY as KeyType,\r\n        EXTRA as Extra\r\n    FROM INFORMATION_SCHEMA.COLUMNS\r\n    WHERE TABLE_SCHEMA = DATABASE()\r\n    AND TABLE_NAME = p_TableName\r\n    ORDER BY ORDINAL_POSITION;\r\n    \r\n    SET p_Status = 0;\r\n    SET p_ErrorMsg = CONCAT('Column verification completed for table: ', p_TableName);\r\n    \r\nEND ;;"
      },
      {
        "Name": "usr_ui_settings_Delete_ByUserId",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(64)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_ui_settings_Delete_ByUserId`(\n    IN p_UserId VARCHAR(64),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting user settings for user: ', p_UserId);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    DELETE FROM usr_ui_settings WHERE UserId = p_UserId;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('User settings deleted successfully for user: ', p_UserId);\n    \n    COMMIT;\nEND ;;"
      },
      {
        "Name": "usr_ui_settings_GetJsonSetting",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_SettingJson",
            "DataType": "TEXT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_ui_settings_GetJsonSetting`(\n    IN p_UserId VARCHAR(100),\n    OUT p_SettingJson TEXT, \n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while getting JSON setting';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_ui_settings WHERE UserId = p_UserId;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('No settings found for user: ', p_UserId);\n        SET p_SettingJson = NULL;\n    ELSE\n        SELECT SettingsJson INTO p_SettingJson\n        FROM usr_ui_settings \n        WHERE UserId = p_UserId \n        LIMIT 1;\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('JSON setting retrieved successfully for user: ', p_UserId);\n    END IF;\nEND ;;"
      },
      {
        "Name": "usr_ui_settings_GetSettingsJson_ByUserId",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_ui_settings_GetSettingsJson_ByUserId`(\n    IN p_UserId VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving settings for user: ', p_UserId);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_ui_settings WHERE UserId = p_UserId;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('No settings found for user: ', p_UserId);\n        SELECT NULL as SettingsJson;\n    ELSE\n        SELECT SettingsJson FROM usr_ui_settings WHERE UserId = p_UserId LIMIT 1;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Settings retrieved successfully for user: ', p_UserId);\n    END IF;\nEND ;;"
      },
      {
        "Name": "usr_ui_settings_GetShortcutsJson",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ShortcutsJson",
            "DataType": "TEXT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_ui_settings_GetShortcutsJson`(\n    IN p_UserId VARCHAR(100),\n    OUT p_ShortcutsJson TEXT, \n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while getting shortcuts JSON';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_ui_settings WHERE UserId = p_UserId;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('No shortcuts found for user: ', p_UserId);\n        SET p_ShortcutsJson = NULL;\n    ELSE\n        SELECT ShortcutsJson INTO p_ShortcutsJson\n        FROM usr_ui_settings \n        WHERE UserId = p_UserId \n        LIMIT 1;\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Shortcuts JSON retrieved successfully for user: ', p_UserId);\n    END IF;\nEND ;;"
      },
      {
        "Name": "usr_ui_settings_SetJsonSetting",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_DgvName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_SettingJson",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_ui_settings_SetJsonSetting`(\n    IN p_UserId VARCHAR(100),\n    IN p_DgvName VARCHAR(100),\n    IN p_SettingJson TEXT, \n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while setting JSON setting';\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    INSERT INTO usr_ui_settings (UserId, DgvName, SettingsJson, CreatedDate, ModifiedDate)\n    VALUES (p_UserId, p_DgvName, p_SettingJson, NOW(), NOW())\n    ON DUPLICATE KEY UPDATE \n        SettingsJson = p_SettingJson,\n        ModifiedDate = NOW();\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = 'JSON setting updated successfully';\n    \n    COMMIT;\nEND ;;"
      },
      {
        "Name": "usr_ui_settings_SetShortcutsJson",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ShortcutsJson",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_ui_settings_SetShortcutsJson`(\n    IN p_UserId VARCHAR(100),\n    IN p_ShortcutsJson TEXT, \n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while setting shortcuts JSON';\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    INSERT INTO usr_ui_settings (UserId, ShortcutsJson, CreatedDate, ModifiedDate)\n    VALUES (p_UserId, p_ShortcutsJson, NOW(), NOW())\n    ON DUPLICATE KEY UPDATE \n        ShortcutsJson = p_ShortcutsJson,\n        ModifiedDate = NOW();\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = 'Shortcuts JSON updated successfully';\n    \n    COMMIT;\nEND ;;"
      },
      {
        "Name": "usr_ui_settings_SetThemeJson",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ThemeJson",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_ui_settings_SetThemeJson`(\n    IN p_UserId VARCHAR(100),\n    IN p_ThemeJson TEXT, \n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while setting theme JSON';\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    INSERT INTO usr_ui_settings (UserId, SettingsJson, CreatedDate, ModifiedDate)\n    VALUES (p_UserId, p_ThemeJson, NOW(), NOW())\n    ON DUPLICATE KEY UPDATE \n        SettingsJson = p_ThemeJson,\n        ModifiedDate = NOW();\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = 'Theme JSON updated successfully';\n    \n    COMMIT;\nEND ;;"
      },
      {
        "Name": "usr_users_Add_User",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_FullName",
            "DataType": "VARCHAR(200)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Shift",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_VitsUser",
            "DataType": "TINYINT(1)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Pin",
            "DataType": "VARCHAR(20)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_LastShownVersion",
            "DataType": "VARCHAR(20)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_HideChangeLog",
            "DataType": "VARCHAR(10)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Theme_Name",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Theme_FontSize",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_VisualUserName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_VisualPassword",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_WipServerAddress",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_WIPDatabase",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_WipServerPort",
            "DataType": "VARCHAR(10)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Control_Add_User",
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_users_Add_User`(\n    IN p_User VARCHAR(100),\n    IN p_FullName VARCHAR(200),\n    IN p_Shift VARCHAR(50),\n    IN p_VitsUser TINYINT(1), \n    IN p_Pin VARCHAR(20),\n    IN p_LastShownVersion VARCHAR(20),\n    IN p_HideChangeLog VARCHAR(10),\n    IN p_Theme_Name VARCHAR(50),\n    IN p_Theme_FontSize INT,\n    IN p_VisualUserName VARCHAR(100),\n    IN p_VisualPassword VARCHAR(100),\n    IN p_WipServerAddress VARCHAR(100),\n    IN p_WIPDatabase VARCHAR(100),\n    IN p_WipServerPort VARCHAR(10),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while creating user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    \n    IF v_Count > 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User already exists: ', p_User);\n        ROLLBACK;\n    ELSE\n        INSERT INTO usr_users (\n            User, `Full Name`, Shift, VitsUser, Pin,\n            LastShownVersion, HideChangeLog, Theme_Name, Theme_FontSize,\n            VisualUserName, VisualPassword, WipServerAddress, \n            WIPDatabase, WipServerPort\n        ) VALUES (\n            p_User, p_FullName, p_Shift, p_VitsUser, p_Pin,\n            p_LastShownVersion, p_HideChangeLog, p_Theme_Name, p_Theme_FontSize,\n            p_VisualUserName, p_VisualPassword, p_WipServerAddress,\n            p_WIPDatabase, p_WipServerPort\n        );\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('User created successfully: ', p_User);\n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "usr_users_Delete_User",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_users_Delete_User`(\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_User);\n        ROLLBACK;\n    ELSE\n        DELETE FROM usr_users WHERE User = p_User;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('User deleted successfully: ', p_User);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('Failed to delete user: ', p_User);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "usr_users_Exists",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Control_Add_User",
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_users_Exists`(\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while checking user existence: ', p_User);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    SELECT v_Count as UserExists;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('User existence check completed for: ', p_User, ' (Exists: ', IF(v_Count > 0, 'Yes', 'No'), ')');\nEND ;;"
      },
      {
        "Name": "usr_users_GetFullName_ByUser",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_users_GetFullName_ByUser`(\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving full name for user: ', p_User);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_User);\n    ELSE\n        SELECT `Full Name` FROM usr_users WHERE User = p_User LIMIT 1;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Full name retrieved successfully for user: ', p_User);\n    END IF;\nEND ;;"
      },
      {
        "Name": "usr_users_GetUserSetting_ByUserAndField",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Field",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_users_GetUserSetting_ByUserAndField`(\n    IN p_User VARCHAR(100), \n    IN p_Field VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_FieldValue TEXT DEFAULT NULL;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving setting ', p_Field, ' for user: ', p_User);\n    END;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_User);\n        SELECT NULL as FieldValue;\n    ELSE\n        \n        CASE p_Field\n            WHEN 'LastShownVersion' THEN SELECT LastShownVersion INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'HideChangeLog' THEN SELECT HideChangeLog INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'Theme_Name' THEN SELECT Theme_Name INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'Theme_FontSize' THEN SELECT CAST(Theme_FontSize AS CHAR) INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'VisualUserName' THEN SELECT VisualUserName INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'VisualPassword' THEN SELECT VisualPassword INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'WipServerAddress' THEN SELECT WipServerAddress INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'WIPDatabase' THEN SELECT WIPDatabase INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'WipServerPort' THEN SELECT WipServerPort INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'FullName' THEN SELECT `Full Name` INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'Shift' THEN SELECT Shift INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'Pin' THEN SELECT Pin INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            ELSE SET v_FieldValue = NULL;\n        END CASE;\n        \n        SELECT v_FieldValue as FieldValue;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Setting ', p_Field, ' retrieved successfully for user: ', p_User);\n    END IF;\nEND ;;"
      },
      {
        "Name": "usr_users_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User",
          "Helper_UI_ComboBoxes"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_users_Get_All`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving all users';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users;\n    SELECT * FROM usr_users ORDER BY `Full Name`;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' users successfully');\nEND ;;"
      },
      {
        "Name": "usr_users_Get_ByUser",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Control_Add_User",
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_users_Get_ByUser`(\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving user: ', p_User);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_User);\n        SELECT NULL as User, NULL as `Full Name`; \n    ELSE\n        SELECT * FROM usr_users WHERE User = p_User LIMIT 1;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('User retrieved successfully: ', p_User);\n    END IF;\nEND ;;"
      },
      {
        "Name": "usr_users_SetUserSetting_ByUserAndField",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Field",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Value",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_users_SetUserSetting_ByUserAndField`(\n    IN p_User VARCHAR(100), \n    IN p_Field VARCHAR(100), \n    IN p_Value TEXT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while setting ', p_Field, ' for user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    \n    IF v_Count = 0 THEN\n        \n        INSERT INTO usr_users (User, `Full Name`) \n        VALUES (p_User, p_User);\n    END IF;\n    \n    \n    CASE p_Field\n        WHEN 'LastShownVersion' THEN \n            UPDATE usr_users SET LastShownVersion = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'HideChangeLog' THEN \n            UPDATE usr_users SET HideChangeLog = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'Theme_Name' THEN \n            UPDATE usr_users SET Theme_Name = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'Theme_FontSize' THEN \n            UPDATE usr_users SET Theme_FontSize = CAST(p_Value AS UNSIGNED), ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'VisualUserName' THEN \n            UPDATE usr_users SET VisualUserName = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'VisualPassword' THEN \n            UPDATE usr_users SET VisualPassword = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'WipServerAddress' THEN \n            UPDATE usr_users SET WipServerAddress = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'WIPDatabase' THEN \n            UPDATE usr_users SET WIPDatabase = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'WipServerPort' THEN \n            UPDATE usr_users SET WipServerPort = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'FullName' THEN \n            UPDATE usr_users SET `Full Name` = p_Value WHERE User = p_User;\n        WHEN 'Shift' THEN \n            UPDATE usr_users SET Shift = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'Pin' THEN \n            UPDATE usr_users SET Pin = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        ELSE \n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('Unknown field: ', p_Field);\n            ROLLBACK;\n    END CASE;\n    \n    IF p_Status IS NULL THEN\n        SET v_RowsAffected = ROW_COUNT();\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Setting ', p_Field, ' updated successfully for user: ', p_User, ' (Rows affected: ', v_RowsAffected, ')');\n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "usr_users_Update_User",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_FullName",
            "DataType": "VARCHAR(200)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Shift",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Pin",
            "DataType": "VARCHAR(20)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_VisualUserName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_VisualPassword",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_users_Update_User`(\n    IN p_User VARCHAR(100),\n    IN p_FullName VARCHAR(200),\n    IN p_Shift VARCHAR(50),\n    IN p_Pin VARCHAR(20),\n    IN p_VisualUserName VARCHAR(100),\n    IN p_VisualPassword VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_User);\n        ROLLBACK;\n    ELSE\n        UPDATE usr_users \n        SET `Full Name` = p_FullName,\n            Shift = p_Shift,\n            Pin = p_Pin,\n            VisualUserName = p_VisualUserName,\n            VisualPassword = p_VisualPassword\n        WHERE User = p_User;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('User updated successfully: ', p_User);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No changes made to user: ', p_User);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "usr_user_roles_GetRoleId_ByUserId",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_200811.sql",
        "Parameters": [
          {
            "Name": "p_UserID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_user_roles_GetRoleId_ByUserId`(\n    IN p_UserID INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving role for user ID: ', p_UserID);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM sys_user_roles WHERE UserID = p_UserID;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('No role assignment found for user ID: ', p_UserID);\n        SELECT NULL as RoleID;\n    ELSE\n        SELECT RoleID FROM sys_user_roles WHERE UserID = p_UserID LIMIT 1;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Role retrieved successfully for user ID: ', p_UserID);\n    END IF;\nEND ;;"
      },
      {
        "Name": "app_themes_Add_Theme",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_ThemeName",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_DisplayName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_SettingsJson",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Description",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_CreatedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `app_themes_Add_Theme`(\n    IN p_ThemeName VARCHAR(50),\n    IN p_DisplayName VARCHAR(100),\n    IN p_SettingsJson TEXT,\n    IN p_Description TEXT,\n    IN p_CreatedBy VARCHAR(100)\n)\nBEGIN\n    DECLARE p_Status INT DEFAULT 0;\n    DECLARE p_ErrorMsg VARCHAR(255) DEFAULT '';\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_ThemeId INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while creating theme: ', p_ThemeName);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    IF p_ThemeName IS NULL OR TRIM(p_ThemeName) = '' THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Theme name cannot be empty';\n        ROLLBACK;\n    \n    ELSEIF EXISTS(SELECT 1 FROM app_themes WHERE ThemeName = p_ThemeName) THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Theme already exists: ', p_ThemeName);\n        ROLLBACK;\n    \n    ELSEIF p_SettingsJson IS NULL OR TRIM(p_SettingsJson) = '' THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Theme settings JSON cannot be empty';\n        ROLLBACK;\n    ELSE\n        INSERT INTO app_themes (\n            ThemeName,\n            DisplayName,\n            SettingsJson,\n            IsDefault,\n            IsActive,\n            Description,\n            CreatedBy,\n            CreatedDate\n        ) VALUES (\n            p_ThemeName,\n            IFNULL(p_DisplayName, p_ThemeName),\n            p_SettingsJson,\n            0, \n            1, \n            p_Description,\n            IFNULL(p_CreatedBy, 'SYSTEM'),\n            NOW()\n        );\n        \n        SET v_ThemeId = LAST_INSERT_ID();\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Theme created successfully: ', p_ThemeName, ' (ID: ', v_ThemeId, ')');\n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "app_themes_Delete_Theme",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_ThemeName",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ModifiedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `app_themes_Delete_Theme`(\n    IN p_ThemeName VARCHAR(50),\n    IN p_ModifiedBy VARCHAR(100)\n)\nBEGIN\n    DECLARE p_Status INT DEFAULT 0;\n    DECLARE p_ErrorMsg VARCHAR(255) DEFAULT '';\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting theme: ', p_ThemeName);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM app_themes WHERE ThemeName = p_ThemeName AND IsDefault = 0 AND IsActive = 1;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Theme not found, already deleted, or is a protected system theme: ', p_ThemeName);\n        ROLLBACK;\n    ELSE\n        \n        UPDATE app_themes \n        SET IsActive = 0,\n            ModifiedBy = IFNULL(p_ModifiedBy, 'SYSTEM'),\n            ModifiedDate = NOW()\n        WHERE ThemeName = p_ThemeName AND IsDefault = 0;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Theme deleted successfully: ', p_ThemeName);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('Failed to delete theme: ', p_ThemeName);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "app_themes_Exists",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_ThemeName",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `app_themes_Exists`(\n    IN p_ThemeName VARCHAR(50)\n)\nBEGIN\n    DECLARE p_Status INT DEFAULT 0;\n    DECLARE p_ErrorMsg VARCHAR(255) DEFAULT '';\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while checking theme existence: ', p_ThemeName);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM app_themes WHERE ThemeName = p_ThemeName AND IsActive = 1;\n    SELECT v_Count as ThemeExists;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Theme existence check completed for: ', p_ThemeName, ' (Exists: ', IF(v_Count > 0, 'Yes', 'No'), ')');\nEND ;;"
      },
      {
        "Name": "app_themes_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "handles"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `app_themes_Get_All`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving themes';\n    END;\n    \n    \n    SELECT * FROM app_themes ORDER BY ThemeName;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = 'Themes retrieved successfully';\nEND ;;"
      },
      {
        "Name": "app_themes_Get_ByName",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_ThemeName",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `app_themes_Get_ByName`(\n    IN p_ThemeName VARCHAR(50),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving theme: ', p_ThemeName);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM app_themes WHERE ThemeName = p_ThemeName;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Theme not found: ', p_ThemeName);\n        \n        SELECT NULL as ThemeName, NULL as SettingsJson LIMIT 0;\n    ELSE\n        SELECT \n            ID,\n            ThemeName,\n            DisplayName,\n            SettingsJson,\n            IsDefault,\n            IsActive,\n            Description,\n            CreatedDate,\n            CreatedBy,\n            ModifiedDate,\n            ModifiedBy,\n            VERSION\n        FROM app_themes \n        WHERE ThemeName = p_ThemeName AND IsActive = 1\n        LIMIT 1;\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Theme retrieved successfully: ', p_ThemeName);\n    END IF;\nEND ;;"
      },
      {
        "Name": "app_themes_Get_UserTheme",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `app_themes_Get_UserTheme`(\n    IN p_UserId VARCHAR(100)\n)\nBEGIN\n    DECLARE p_Status INT DEFAULT 0;\n    DECLARE p_ErrorMsg VARCHAR(255) DEFAULT '';\n    DECLARE v_ThemeName VARCHAR(50) DEFAULT NULL;\n    DECLARE v_ThemeExists INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving user theme for: ', p_UserId);\n    END;\n    \n    \n    SELECT Theme_Name INTO v_ThemeName \n    FROM usr_users \n    WHERE User = p_UserId \n    LIMIT 1;\n    \n    \n    IF v_ThemeName IS NULL OR v_ThemeName = '' THEN\n        SET v_ThemeName = 'Default';\n    ELSE\n        \n        SELECT COUNT(*) INTO v_ThemeExists \n        FROM app_themes \n        WHERE ThemeName = v_ThemeName AND IsActive = 1;\n        \n        \n        IF v_ThemeExists = 0 THEN\n            SET v_ThemeName = 'Default';\n        END IF;\n    END IF;\n    \n    \n    SELECT \n        t.ID,\n        t.ThemeName,\n        t.DisplayName,\n        t.SettingsJson,\n        t.IsDefault,\n        t.Description\n    FROM app_themes t\n    WHERE t.ThemeName = v_ThemeName AND t.IsActive = 1\n    LIMIT 1;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('User theme retrieved successfully for: ', p_UserId, ' (Theme: ', v_ThemeName, ')');\nEND ;;"
      },
      {
        "Name": "app_themes_Set_UserTheme",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ThemeName",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `app_themes_Set_UserTheme`(\n    IN p_UserId VARCHAR(100),\n    IN p_ThemeName VARCHAR(50)\n)\nBEGIN\n    DECLARE p_Status INT DEFAULT 0;\n    DECLARE p_ErrorMsg VARCHAR(255) DEFAULT '';\n    DECLARE v_UserExists INT DEFAULT 0;\n    DECLARE v_ThemeExists INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while setting theme for user: ', p_UserId);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_UserExists FROM usr_users WHERE User = p_UserId;\n    \n    IF v_UserExists = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_UserId);\n        ROLLBACK;\n    ELSE\n        \n        SELECT COUNT(*) INTO v_ThemeExists FROM app_themes WHERE ThemeName = p_ThemeName AND IsActive = 1;\n        \n        IF v_ThemeExists = 0 THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('Theme not found or inactive: ', p_ThemeName);\n            ROLLBACK;\n        ELSE\n            \n            UPDATE usr_users \n            SET Theme_Name = p_ThemeName,\n                ModifiedDate = NOW()\n            WHERE User = p_UserId;\n            \n            SET v_RowsAffected = ROW_COUNT();\n            \n            IF v_RowsAffected > 0 THEN\n                SET p_Status = 0;\n                SET p_ErrorMsg = CONCAT('Theme set successfully for user: ', p_UserId, ' (Theme: ', p_ThemeName, ')');\n            ELSE\n                SET p_Status = 2;\n                SET p_ErrorMsg = CONCAT('No changes made for user: ', p_UserId);\n            END IF;\n            \n            COMMIT;\n        END IF;\n    END IF;\nEND ;;"
      },
      {
        "Name": "app_themes_Update_Theme",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_ThemeName",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_DisplayName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_SettingsJson",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Description",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ModifiedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `app_themes_Update_Theme`(\n    IN p_ThemeName VARCHAR(50),\n    IN p_DisplayName VARCHAR(100),\n    IN p_SettingsJson TEXT,\n    IN p_Description TEXT,\n    IN p_ModifiedBy VARCHAR(100)\n)\nBEGIN\n    DECLARE p_Status INT DEFAULT 0;\n    DECLARE p_ErrorMsg VARCHAR(255) DEFAULT '';\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating theme: ', p_ThemeName);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM app_themes WHERE ThemeName = p_ThemeName AND IsDefault = 0;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Theme not found or is a protected system theme: ', p_ThemeName);\n        ROLLBACK;\n    ELSE\n        UPDATE app_themes \n        SET DisplayName = IFNULL(p_DisplayName, DisplayName),\n            SettingsJson = IFNULL(p_SettingsJson, SettingsJson),\n            Description = p_Description,\n            ModifiedBy = IFNULL(p_ModifiedBy, 'SYSTEM'),\n            ModifiedDate = NOW(),\n            VERSION = VERSION + 1\n        WHERE ThemeName = p_ThemeName AND IsDefault = 0;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Theme updated successfully: ', p_ThemeName);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No changes made to theme: ', p_ThemeName);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "inv_inventory_Add_Item",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Location",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Quantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_BatchNumber",
            "DataType": "VARCHAR(20)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Notes",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_inventory_Add_Item`(\n    IN p_PartID VARCHAR(100),\n    IN p_Location VARCHAR(100),\n    IN p_Operation VARCHAR(100),\n    IN p_Quantity INT,\n    IN p_ItemType VARCHAR(50),\n    IN p_User VARCHAR(100),\n    IN p_BatchNumber VARCHAR(20),\n    IN p_Notes TEXT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_NextBatchNumber VARCHAR(20);\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding inventory item for part: ', p_PartID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    IF p_BatchNumber IS NULL OR p_BatchNumber = '' THEN\n        SELECT LPAD(COALESCE(MAX(CAST(BatchNumber AS UNSIGNED)), 0) + 1, 10, '0') \n        INTO v_NextBatchNumber\n        FROM inv_inventory;\n        SET p_BatchNumber = v_NextBatchNumber;\n    END IF;\n    \n    \n    IF p_Quantity <= 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Quantity must be greater than zero';\n        ROLLBACK;\n    ELSE\n        \n        INSERT INTO inv_inventory (\n            PartID, Location, Operation, Quantity, ItemType, \n            User, BatchNumber, Notes, ReceiveDate, LastUpdated\n        ) VALUES (\n            p_PartID, p_Location, p_Operation, p_Quantity, p_ItemType,\n            p_User, p_BatchNumber, p_Notes, NOW(), NOW()\n        );\n        \n        \n        INSERT INTO inv_transaction (\n            PartID, Location, Operation, Quantity, ItemType,\n            User, BatchNumber, Notes, TransactionType, ReceiveDate\n        ) VALUES (\n            p_PartID, p_Location, p_Operation, p_Quantity, p_ItemType,\n            p_User, p_BatchNumber, p_Notes, 'IN', NOW()\n        );\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Inventory item added successfully for part: ', p_PartID, ' with batch: ', p_BatchNumber);\n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "inv_inventory_Fix_BatchNumbers",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_inventory_Fix_BatchNumbers`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_ProcessedRecords INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while fixing batch numbers';\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    DROP TEMPORARY TABLE IF EXISTS temp_consolidated;\n    CREATE TEMPORARY TABLE temp_consolidated (\n        PartID VARCHAR(100),\n        Location VARCHAR(100),\n        Operation VARCHAR(100),\n        ItemType VARCHAR(50),\n        User VARCHAR(100),\n        TotalQuantity INT,\n        EarliestReceiveDate DATETIME,\n        ConsolidatedBatchNumber VARCHAR(20)\n    );\n    \n    \n    INSERT INTO temp_consolidated\n    SELECT \n        PartID, Location, Operation, ItemType, User,\n        SUM(Quantity) as TotalQuantity,\n        MIN(ReceiveDate) as EarliestReceiveDate,\n        MIN(BatchNumber) as ConsolidatedBatchNumber\n    FROM inv_inventory\n    GROUP BY PartID, Location, Operation, ItemType, User\n    HAVING SUM(Quantity) > 0;\n    \n    \n    SELECT COUNT(*) INTO v_ProcessedRecords FROM temp_consolidated;\n    \n    \n    DELETE FROM inv_inventory;\n    \n    \n    INSERT INTO inv_inventory (\n        PartID, Location, Operation, Quantity, ItemType, User, \n        BatchNumber, ReceiveDate, LastUpdated\n    )\n    SELECT \n        PartID, Location, Operation, TotalQuantity, ItemType, User,\n        ConsolidatedBatchNumber, EarliestReceiveDate, NOW()\n    FROM temp_consolidated\n    WHERE TotalQuantity > 0;\n    \n    DROP TEMPORARY TABLE temp_consolidated;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Batch numbers fixed successfully, processed ', v_ProcessedRecords, ' records');\n    \n    COMMIT;\nEND ;;"
      },
      {
        "Name": "inv_inventory_GetNextBatchNumber",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_inventory_GetNextBatchNumber`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while generating next batch number';\n    END;\n    \n    SELECT LPAD(COALESCE(MAX(CAST(BatchNumber AS UNSIGNED)), 0) + 1, 10, '0') as NextBatchNumber\n    FROM inv_inventory;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = 'Next batch number generated successfully';\nEND ;;"
      },
      {
        "Name": "inv_inventory_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Control_RemoveTab"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_inventory_Get_All`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving all inventory';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM inv_inventory;\n    SELECT * FROM inv_inventory ORDER BY PartID, Location, Operation;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' inventory records successfully');\nEND ;;"
      },
      {
        "Name": "inv_inventory_Get_ByPartID",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_inventory_Get_ByPartID`(\n    IN p_PartID VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving inventory for part: ', p_PartID);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM inv_inventory WHERE PartID = p_PartID;\n    SELECT * FROM inv_inventory WHERE PartID = p_PartID ORDER BY Location, Operation;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' inventory records for part: ', p_PartID);\nEND ;;"
      },
      {
        "Name": "inv_inventory_Get_ByPartIDAndOperation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_inventory_Get_ByPartIDAndOperation`(\n    IN p_PartID VARCHAR(100),\n    IN p_Operation VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving inventory for part: ', p_PartID, ', operation: ', p_Operation);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count \n    FROM inv_inventory \n    WHERE PartID = p_PartID AND Operation = p_Operation;\n    \n    SELECT * FROM inv_inventory \n    WHERE PartID = p_PartID AND Operation = p_Operation \n    ORDER BY Location;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' inventory records for part: ', p_PartID, ', operation: ', p_Operation);\nEND ;;"
      },
      {
        "Name": "inv_inventory_Remove_Item",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Location",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Quantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_BatchNumber",
            "DataType": "VARCHAR(20)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Notes",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_inventory_Remove_Item`(\n    IN p_PartID VARCHAR(100),\n    IN p_Location VARCHAR(100),\n    IN p_Operation VARCHAR(100),\n    IN p_Quantity INT,\n    IN p_ItemType VARCHAR(50),\n    IN p_User VARCHAR(100),\n    IN p_BatchNumber VARCHAR(20),\n    IN p_Notes TEXT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_CurrentQuantity INT DEFAULT 0;\n    DECLARE v_InventoryId INT DEFAULT NULL;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while removing inventory item for part: ', p_PartID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    IF p_Quantity <= 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Quantity must be greater than zero';\n        ROLLBACK;\n    ELSE\n        \n        SELECT ID, Quantity INTO v_InventoryId, v_CurrentQuantity\n        FROM inv_inventory \n        WHERE PartID = p_PartID \n          AND Location = p_Location \n          AND Operation = p_Operation \n          AND BatchNumber = p_BatchNumber\n        LIMIT 1;\n        \n        IF v_InventoryId IS NULL THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('No matching inventory item found for part: ', p_PartID, ', batch: ', p_BatchNumber);\n            ROLLBACK;\n        ELSEIF v_CurrentQuantity < p_Quantity THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('Insufficient quantity. Available: ', v_CurrentQuantity, ', Requested: ', p_Quantity);\n            ROLLBACK;\n        ELSE\n            \n            UPDATE inv_inventory \n            SET Quantity = Quantity - p_Quantity,\n                LastUpdated = NOW()\n            WHERE ID = v_InventoryId;\n            \n            \n            DELETE FROM inv_inventory WHERE ID = v_InventoryId AND Quantity <= 0;\n            \n            \n            INSERT INTO inv_transaction (\n                PartID, Location, Operation, Quantity, ItemType,\n                User, BatchNumber, Notes, TransactionType, ReceiveDate\n            ) VALUES (\n                p_PartID, p_Location, p_Operation, p_Quantity, p_ItemType,\n                p_User, p_BatchNumber, p_Notes, 'OUT', NOW()\n            );\n            \n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Inventory item removed successfully for part: ', p_PartID, ', quantity: ', p_Quantity);\n            COMMIT;\n        END IF;\n    END IF;\nEND ;;"
      },
      {
        "Name": "inv_inventory_Search_Advanced",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Location",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_QtyMin",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_QtyMax",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Notes",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_FilterByDate",
            "DataType": "BOOLEAN",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_DateFrom",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_DateTo",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Control_AdvancedRemove"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_inventory_Search_Advanced`(\n    IN p_PartID VARCHAR(100),\n    IN p_Operation VARCHAR(100),\n    IN p_Location VARCHAR(100),\n    IN p_QtyMin INT,\n    IN p_QtyMax INT,\n    IN p_Notes TEXT,\n    IN p_User VARCHAR(100),\n    IN p_FilterByDate BOOLEAN,\n    IN p_DateFrom DATETIME,\n    IN p_DateTo DATETIME,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while searching inventory';\n    END;\n    \n    \n    SELECT * FROM inv_inventory \n    WHERE (p_PartID IS NULL OR p_PartID = '' OR PartID LIKE CONCAT('%', p_PartID, '%'))\n      AND (p_Operation IS NULL OR p_Operation = '' OR Operation LIKE CONCAT('%', p_Operation, '%'))\n      AND (p_Location IS NULL OR p_Location = '' OR Location LIKE CONCAT('%', p_Location, '%'))\n      AND (p_QtyMin IS NULL OR p_QtyMin <= 0 OR Quantity >= p_QtyMin)\n      AND (p_QtyMax IS NULL OR p_QtyMax <= 0 OR Quantity <= p_QtyMax)\n      AND (p_Notes IS NULL OR p_Notes = '' OR Notes LIKE CONCAT('%', p_Notes, '%'))\n      AND (p_User IS NULL OR p_User = '' OR User = p_User)\n      AND (p_FilterByDate = FALSE OR p_DateFrom IS NULL OR p_DateTo IS NULL \n           OR ReceiveDate BETWEEN p_DateFrom AND p_DateTo);\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM inv_inventory \n    WHERE (p_PartID IS NULL OR p_PartID = '' OR PartID LIKE CONCAT('%', p_PartID, '%'))\n      AND (p_Operation IS NULL OR p_Operation = '' OR Operation LIKE CONCAT('%', p_Operation, '%'))\n      AND (p_Location IS NULL OR p_Location = '' OR Location LIKE CONCAT('%', p_Location, '%'))\n      AND (p_QtyMin IS NULL OR p_QtyMin <= 0 OR Quantity >= p_QtyMin)\n      AND (p_QtyMax IS NULL OR p_QtyMax <= 0 OR Quantity <= p_QtyMax)\n      AND (p_Notes IS NULL OR p_Notes = '' OR Notes LIKE CONCAT('%', p_Notes, '%'))\n      AND (p_User IS NULL OR p_User = '' OR User = p_User)\n      AND (p_FilterByDate = FALSE OR p_DateFrom IS NULL OR p_DateTo IS NULL \n           OR ReceiveDate BETWEEN p_DateFrom AND p_DateTo);\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Search completed successfully, found ', v_Count, ' results');\nEND ;;"
      },
      {
        "Name": "inv_inventory_Transfer_Part",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_BatchNumber",
            "DataType": "VARCHAR(20)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_NewLocation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_inventory_Transfer_Part`(\n    IN p_BatchNumber VARCHAR(20),\n    IN p_PartID VARCHAR(100),\n    IN p_Operation VARCHAR(100),\n    IN p_NewLocation VARCHAR(100),\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    DECLARE v_OldLocation VARCHAR(100);\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while transferring part: ', p_PartID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*), MAX(Location) INTO v_Count, v_OldLocation \n    FROM inv_inventory \n    WHERE BatchNumber = p_BatchNumber \n      AND PartID = p_PartID \n      AND Operation = p_Operation;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('No inventory found for part: ', p_PartID, ', batch: ', p_BatchNumber);\n        ROLLBACK;\n    ELSE\n        \n        UPDATE inv_inventory \n        SET Location = p_NewLocation,\n            User = p_User,\n            LastUpdated = NOW()\n        WHERE BatchNumber = p_BatchNumber \n          AND PartID = p_PartID \n          AND Operation = p_Operation;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Part transferred successfully from ', v_OldLocation, ' to ', p_NewLocation);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No transfer occurred for part: ', p_PartID);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "inv_inventory_transfer_quantity",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_BatchNumber",
            "DataType": "VARCHAR(20)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_TransferQuantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_NewLocation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_inventory_transfer_quantity`(\n    IN p_BatchNumber VARCHAR(20),\n    IN p_PartID VARCHAR(100),\n    IN p_Operation VARCHAR(100),\n    IN p_TransferQuantity INT,\n    IN p_NewLocation VARCHAR(100),\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_NewBatchNumber VARCHAR(20);\n    DECLARE v_ItemType VARCHAR(50);\n    DECLARE v_OriginalLocation VARCHAR(100);\n    DECLARE v_CurrentQuantity INT DEFAULT 0;\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while transferring quantity for part: ', p_PartID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    IF p_TransferQuantity <= 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Transfer quantity must be greater than zero';\n        ROLLBACK;\n    ELSE\n        \n        SELECT COUNT(*), MAX(Location), MAX(ItemType), MAX(Quantity) \n        INTO v_Count, v_OriginalLocation, v_ItemType, v_CurrentQuantity\n        FROM inv_inventory \n        WHERE BatchNumber = p_BatchNumber \n          AND PartID = p_PartID \n          AND Operation = p_Operation;\n        \n        IF v_Count = 0 THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('No inventory found for part: ', p_PartID, ', batch: ', p_BatchNumber);\n            ROLLBACK;\n        ELSEIF v_CurrentQuantity < p_TransferQuantity THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('Insufficient quantity for transfer. Available: ', v_CurrentQuantity, ', Requested: ', p_TransferQuantity);\n            ROLLBACK;\n        ELSE\n            \n            SELECT LPAD(COALESCE(MAX(CAST(BatchNumber AS UNSIGNED)), 0) + 1, 10, '0') \n            INTO v_NewBatchNumber\n            FROM inv_inventory;\n            \n            \n            UPDATE inv_inventory \n            SET Quantity = Quantity - p_TransferQuantity,\n                LastUpdated = NOW()\n            WHERE BatchNumber = p_BatchNumber \n              AND PartID = p_PartID \n              AND Operation = p_Operation;\n            \n            \n            DELETE FROM inv_inventory \n            WHERE BatchNumber = p_BatchNumber \n              AND PartID = p_PartID \n              AND Operation = p_Operation \n              AND Quantity <= 0;\n            \n            \n            INSERT INTO inv_inventory (\n                PartID, Location, Operation, Quantity, ItemType,\n                User, BatchNumber, ReceiveDate, LastUpdated\n            ) VALUES (\n                p_PartID, p_NewLocation, p_Operation, p_TransferQuantity, v_ItemType,\n                p_User, v_NewBatchNumber, NOW(), NOW()\n            );\n            \n            \n            INSERT INTO inv_transaction (\n                PartID, Location, Operation, Quantity, ItemType,\n                User, BatchNumber, TransactionType, ReceiveDate\n            ) VALUES \n            (p_PartID, v_OriginalLocation, p_Operation, p_TransferQuantity, v_ItemType,\n             p_User, p_BatchNumber, 'OUT', NOW()),\n            (p_PartID, p_NewLocation, p_Operation, p_TransferQuantity, v_ItemType,\n             p_User, v_NewBatchNumber, 'IN', NOW());\n            \n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Quantity transferred successfully from ', v_OriginalLocation, ' to ', p_NewLocation, ', new batch: ', v_NewBatchNumber);\n            COMMIT;\n        END IF;\n    END IF;\nEND ;;"
      },
      {
        "Name": "inv_transactions_GetAnalytics",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_UserName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IsAdmin",
            "DataType": "BOOLEAN",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_FromDate",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ToDate",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Transactions"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_transactions_GetAnalytics`(\n    IN p_UserName VARCHAR(100),\n    IN p_IsAdmin BOOLEAN,\n    IN p_FromDate DATETIME,\n    IN p_ToDate DATETIME,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving analytics';\n        ROLLBACK;\n    END;\n    \n    SELECT \n        COUNT(*) as TotalTransactions,\n        SUM(CASE WHEN TransactionType = 'IN' THEN 1 ELSE 0 END) as InTransactions,\n        SUM(CASE WHEN TransactionType = 'OUT' THEN 1 ELSE 0 END) as OutTransactions,\n        SUM(CASE WHEN TransactionType = 'TRANSFER' THEN 1 ELSE 0 END) as TransferTransactions,\n        SUM(Quantity) as TotalQuantity,\n        COUNT(DISTINCT PartID) as UniquePartIds,\n        COUNT(DISTINCT User) as ActiveUsers,\n        (SELECT PartID FROM inv_transaction t2 \n         WHERE (p_IsAdmin = TRUE OR t2.User = p_UserName)\n         AND (p_FromDate IS NULL OR t2.ReceiveDate >= p_FromDate)\n         AND (p_ToDate IS NULL OR t2.ReceiveDate <= p_ToDate)\n         GROUP BY PartID ORDER BY COUNT(*) DESC LIMIT 1) as TopPartId,\n        (SELECT User FROM inv_transaction t3 \n         WHERE (p_IsAdmin = TRUE OR t3.User = p_UserName)\n         AND (p_FromDate IS NULL OR t3.ReceiveDate >= p_FromDate)\n         AND (p_ToDate IS NULL OR t3.ReceiveDate <= p_ToDate)\n         GROUP BY User ORDER BY COUNT(*) DESC LIMIT 1) as TopUser\n    FROM inv_transaction t\n    WHERE \n        (p_IsAdmin = TRUE OR t.User = p_UserName)\n        AND (p_FromDate IS NULL OR t.ReceiveDate >= p_FromDate)\n        AND (p_ToDate IS NULL OR t.ReceiveDate <= p_ToDate);\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = 'Analytics retrieved successfully';\nEND ;;"
      },
      {
        "Name": "inv_transactions_SmartSearch",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_UserName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IsAdmin",
            "DataType": "BOOLEAN",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_BatchNumber",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Notes",
            "DataType": "VARCHAR(1000)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Quantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_TransactionTypes",
            "DataType": "VARCHAR(500)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_FromDate",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ToDate",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Locations",
            "DataType": "VARCHAR(500)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_GeneralSearch",
            "DataType": "VARCHAR(500)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Page",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_PageSize",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Transactions"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_transactions_SmartSearch`(\n    IN p_UserName VARCHAR(100),\n    IN p_IsAdmin BOOLEAN,\n    IN p_PartID VARCHAR(300),\n    IN p_BatchNumber VARCHAR(300),\n    IN p_Operation VARCHAR(100),\n    IN p_Notes VARCHAR(1000),\n    IN p_User VARCHAR(100),\n    IN p_ItemType VARCHAR(100),\n    IN p_Quantity INT,\n    IN p_TransactionTypes VARCHAR(500),\n    IN p_FromDate DATETIME,\n    IN p_ToDate DATETIME,\n    IN p_Locations VARCHAR(500),\n    IN p_GeneralSearch VARCHAR(500),\n    IN p_Page INT,\n    IN p_PageSize INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Offset INT DEFAULT 0;\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred during smart search';\n        ROLLBACK;\n    END;\n    \n    \n    SET v_Offset = (p_Page - 1) * p_PageSize;\n    \n    \n    SELECT \n        ID,\n        TransactionType,\n        BatchNumber,\n        PartID,\n        FromLocation,\n        ToLocation,\n        Operation,\n        Quantity,\n        Notes,\n        User,\n        ItemType,\n        ReceiveDate\n    FROM inv_transaction t\n    WHERE \n        \n        (p_IsAdmin = TRUE OR t.User = p_UserName)\n        \n        \n        AND (p_PartID IS NULL OR p_PartID = '' OR t.PartID LIKE CONCAT('%', p_PartID, '%'))\n        \n        \n        AND (p_BatchNumber IS NULL OR p_BatchNumber = '' OR t.BatchNumber LIKE CONCAT('%', p_BatchNumber, '%'))\n        \n        \n        AND (p_Operation IS NULL OR p_Operation = '' OR t.Operation LIKE CONCAT('%', p_Operation, '%'))\n        \n        \n        AND (p_Notes IS NULL OR p_Notes = '' OR t.Notes LIKE CONCAT('%', p_Notes, '%'))\n        \n        \n        AND (p_User IS NULL OR p_User = '' OR t.User LIKE CONCAT('%', p_User, '%'))\n        \n        \n        AND (p_ItemType IS NULL OR p_ItemType = '' OR t.ItemType = p_ItemType)\n        \n        \n        AND (p_Quantity IS NULL OR p_Quantity <= 0 OR t.Quantity = p_Quantity)\n        \n        \n        AND (p_TransactionTypes IS NULL OR p_TransactionTypes = '' \n             OR FIND_IN_SET(t.TransactionType, p_TransactionTypes) > 0)\n        \n        \n        AND (p_FromDate IS NULL OR t.ReceiveDate >= p_FromDate)\n        AND (p_ToDate IS NULL OR t.ReceiveDate <= p_ToDate)\n        \n        \n        AND (p_Locations IS NULL OR p_Locations = '' \n             OR FIND_IN_SET(t.FromLocation, p_Locations) > 0\n             OR FIND_IN_SET(t.ToLocation, p_Locations) > 0)\n        \n        \n        AND (p_GeneralSearch IS NULL OR p_GeneralSearch = ''\n             OR t.PartID LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.BatchNumber LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.Notes LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.User LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.FromLocation LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.ToLocation LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.Operation LIKE CONCAT('%', p_GeneralSearch, '%'))\n    \n    ORDER BY t.ReceiveDate DESC\n    LIMIT p_PageSize OFFSET v_Offset;\n    \n    \n    SELECT COUNT(*) INTO v_Count \n    FROM inv_transaction t\n    WHERE \n        (p_IsAdmin = TRUE OR t.User = p_UserName)\n        AND (p_PartID IS NULL OR p_PartID = '' OR t.PartID LIKE CONCAT('%', p_PartID, '%'))\n        AND (p_BatchNumber IS NULL OR p_BatchNumber = '' OR t.BatchNumber LIKE CONCAT('%', p_BatchNumber, '%'))\n        AND (p_Operation IS NULL OR p_Operation = '' OR t.Operation LIKE CONCAT('%', p_Operation, '%'))\n        AND (p_Notes IS NULL OR p_Notes = '' OR t.Notes LIKE CONCAT('%', p_Notes, '%'))\n        AND (p_User IS NULL OR p_User = '' OR t.User LIKE CONCAT('%', p_User, '%'))\n        AND (p_ItemType IS NULL OR p_ItemType = '' OR t.ItemType = p_ItemType)\n        AND (p_Quantity IS NULL OR p_Quantity <= 0 OR t.Quantity = p_Quantity)\n        AND (p_TransactionTypes IS NULL OR p_TransactionTypes = '' \n             OR FIND_IN_SET(t.TransactionType, p_TransactionTypes) > 0)\n        AND (p_FromDate IS NULL OR t.ReceiveDate >= p_FromDate)\n        AND (p_ToDate IS NULL OR t.ReceiveDate <= p_ToDate)\n        AND (p_Locations IS NULL OR p_Locations = '' \n             OR FIND_IN_SET(t.FromLocation, p_Locations) > 0\n             OR FIND_IN_SET(t.ToLocation, p_Locations) > 0)\n        AND (p_GeneralSearch IS NULL OR p_GeneralSearch = ''\n             OR t.PartID LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.BatchNumber LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.Notes LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.User LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.FromLocation LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.ToLocation LIKE CONCAT('%', p_GeneralSearch, '%')\n             OR t.Operation LIKE CONCAT('%', p_GeneralSearch, '%'));\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Smart search completed, found ', v_Count, ' matching transactions');\nEND ;;"
      },
      {
        "Name": "inv_transaction_GetProblematicBatchCount",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_transaction_GetProblematicBatchCount`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while counting problematic batch numbers';\n    END;\n    \n    \n    SELECT COUNT(DISTINCT BatchNumber) INTO v_Count\n    FROM inv_transaction t1\n    WHERE EXISTS (\n        SELECT 1 FROM inv_transaction t2\n        WHERE t1.BatchNumber = t2.BatchNumber\n          AND DATE(t1.ReceiveDate) = DATE(t2.ReceiveDate)\n          AND t1.TransactionType != t2.TransactionType\n    );\n    \n    SELECT v_Count as ProblematicBatchCount;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Found ', v_Count, ' problematic batch numbers');\nEND ;;"
      },
      {
        "Name": "inv_transaction_GetProblematicBatches",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Limit",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_transaction_GetProblematicBatches`(\n    IN p_Limit INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving problematic batch numbers';\n    END;\n    \n    \n    IF p_Limit IS NULL OR p_Limit <= 0 THEN\n        SET p_Limit = 250; \n    END IF;\n    \n    \n    SELECT DISTINCT t1.BatchNumber\n    FROM inv_transaction t1\n    WHERE EXISTS (\n        SELECT 1 FROM inv_transaction t2\n        WHERE t1.BatchNumber = t2.BatchNumber\n          AND DATE(t1.ReceiveDate) = DATE(t2.ReceiveDate)\n          AND t1.TransactionType != t2.TransactionType\n    )\n    ORDER BY t1.BatchNumber\n    LIMIT p_Limit;\n    \n    SELECT COUNT(DISTINCT t1.BatchNumber) INTO v_Count\n    FROM inv_transaction t1\n    WHERE EXISTS (\n        SELECT 1 FROM inv_transaction t2\n        WHERE t1.BatchNumber = t2.BatchNumber\n          AND DATE(t1.ReceiveDate) = DATE(t2.ReceiveDate)\n          AND t1.TransactionType != t2.TransactionType\n    );\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved problematic batch numbers (limit: ', p_Limit, ', total: ', v_Count, ')');\nEND ;;"
      },
      {
        "Name": "inv_transaction_SplitBatchNumbers",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_BatchNumbers",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ProcessedCount",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `inv_transaction_SplitBatchNumbers`(\n    IN p_BatchNumbers TEXT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255),\n    OUT p_ProcessedCount INT\n)\nBEGIN\n    DECLARE v_Counter INT DEFAULT 0;\n    DECLARE v_BatchCount INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while splitting batch numbers';\n        SET p_ProcessedCount = v_Counter;\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    IF p_BatchNumbers IS NOT NULL AND p_BatchNumbers != '' THEN\n        SET v_BatchCount = (CHAR_LENGTH(p_BatchNumbers) - CHAR_LENGTH(REPLACE(p_BatchNumbers, ',', '')) + 1);\n    ELSE\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'No batch numbers provided for splitting';\n        SET p_ProcessedCount = 0;\n        ROLLBACK;\n    END IF;\n    \n    \n    \n    \n    \n    SET v_Counter = v_BatchCount;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Batch numbers processed successfully (simulated)');\n    SET p_ProcessedCount = v_Counter;\n    \n    COMMIT;\nEND ;;"
      },
      {
        "Name": "log_changelog_Add_Entry",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Version",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Description",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ReleaseDate",
            "DataType": "DATE",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_CreatedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `log_changelog_Add_Entry`(\n    IN p_Version VARCHAR(50),\n    IN p_Description TEXT,\n    IN p_ReleaseDate DATE,\n    IN p_CreatedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding changelog entry for version: ', p_Version);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM log_changelog WHERE Version = p_Version;\n    \n    IF v_Count > 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Version already exists in changelog: ', p_Version);\n        ROLLBACK;\n    ELSE\n        INSERT INTO log_changelog (\n            Version,\n            Description,\n            ReleaseDate,\n            CreatedBy,\n            CreatedDate\n        ) VALUES (\n            p_Version,\n            p_Description,\n            p_ReleaseDate,\n            p_CreatedBy,\n            NOW()\n        );\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Changelog entry added successfully for version: ', p_Version);\n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "log_changelog_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `log_changelog_Get_All`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving changelog entries';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM log_changelog;\n    \n    SELECT \n        ID,\n        Version,\n        Description,\n        ReleaseDate,\n        CreatedBy,\n        CreatedDate,\n        ModifiedDate\n    FROM log_changelog \n    ORDER BY \n        \n        CAST(SUBSTRING_INDEX(Version, '.', 1) AS UNSIGNED) DESC,\n        CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(Version, '.', 2), '.', -1) AS UNSIGNED) DESC,\n        CAST(SUBSTRING_INDEX(Version, '.', -1) AS UNSIGNED) DESC,\n        \n        Version DESC,\n        \n        CreatedDate DESC;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' changelog entries successfully (ordered by highest version)');\nEND ;;"
      },
      {
        "Name": "log_changelog_Get_Current",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Service_Timer_VersionChecker"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `log_changelog_Get_Current`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving current version information';\n    END;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM log_changelog;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'No version information found in changelog';\n        SELECT \n            'Unknown' as Version,\n            'No changelog entries found' as Description,\n            NULL as ReleaseDate,\n            'System' as CreatedBy,\n            NOW() as CreatedDate;\n    ELSE\n        \n        \n        SELECT \n            Version,\n            Description,\n            ReleaseDate,\n            CreatedBy,\n            CreatedDate\n        FROM log_changelog \n        ORDER BY \n            \n            CAST(SUBSTRING_INDEX(Version, '.', 1) AS UNSIGNED) DESC,\n            CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(Version, '.', 2), '.', -1) AS UNSIGNED) DESC,\n            CAST(SUBSTRING_INDEX(Version, '.', -1) AS UNSIGNED) DESC,\n            \n            Version DESC,\n            \n            CreatedDate DESC\n        LIMIT 1;\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = 'Current version (highest version number) retrieved successfully';\n    END IF;\nEND ;;"
      },
      {
        "Name": "log_changelog_Initialize_Default_Data",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `log_changelog_Initialize_Default_Data`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while initializing default changelog data';\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM log_changelog;\n    \n    IF v_Count = 0 THEN\n        \n        INSERT INTO log_changelog (Version, Description, ReleaseDate, CreatedBy, CreatedDate) VALUES\n        ('1.0.0', 'MTM Inventory Application - Initial Release with uniform parameter naming system, MySQL 5.7.24 compatibility, and comprehensive stored procedure architecture.', CURDATE(), 'SYSTEM', NOW()),\n        ('1.0.1', 'Bug fixes and performance improvements for version checking system.', CURDATE(), 'SYSTEM', NOW()),\n        ('1.1.0', 'Added enhanced error handling and improved user interface feedback.', CURDATE(), 'SYSTEM', NOW());\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = 'Default changelog data initialized successfully with sample versions';\n    ELSE\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Changelog table already contains ', v_Count, ' entries - skipping initialization');\n    END IF;\n    \n    COMMIT;\nEND ;;"
      },
      {
        "Name": "log_error_Add_Error",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Severity",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorType",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMessage",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_StackTrace",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ModuleName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_MethodName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_AdditionalInfo",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_MachineName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_OSVersion",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_AppVersion",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorTime",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_ErrorLog"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `log_error_Add_Error`(\n    IN p_User VARCHAR(100),\n    IN p_Severity VARCHAR(50),\n    IN p_ErrorType VARCHAR(100),\n    IN p_ErrorMessage TEXT,\n    IN p_StackTrace TEXT,\n    IN p_ModuleName VARCHAR(100),\n    IN p_MethodName VARCHAR(100),\n    IN p_AdditionalInfo TEXT,\n    IN p_MachineName VARCHAR(100),\n    IN p_OSVersion VARCHAR(100),\n    IN p_AppVersion VARCHAR(50),\n    IN p_ErrorTime DATETIME,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        ROLLBACK;\n        GET DIAGNOSTICS CONDITION 1\n            @sqlstate = RETURNED_SQLSTATE, \n            @errno = MYSQL_ERRNO, \n            @text = MESSAGE_TEXT;\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while logging error for user: ', p_User, ' - ', @text);\n    END;\n\n    START TRANSACTION;\n\n    \n    IF p_User IS NULL OR p_User = '' THEN\n        SET p_User = 'Unknown';\n    END IF;\n\n    IF p_Severity IS NULL OR p_Severity = '' THEN\n        SET p_Severity = 'Error';\n    END IF;\n\n    IF p_ErrorTime IS NULL THEN\n        SET p_ErrorTime = NOW();\n    END IF;\n\n    \n    INSERT INTO log_error (\n        User, Severity, ErrorType, ErrorMessage, StackTrace, \n        ModuleName, MethodName, AdditionalInfo, MachineName, \n        OSVersion, AppVersion, ErrorTime\n    ) VALUES (\n        p_User, p_Severity, p_ErrorType, p_ErrorMessage, p_StackTrace,\n        p_ModuleName, p_MethodName, p_AdditionalInfo, p_MachineName,\n        p_OSVersion, p_AppVersion, p_ErrorTime\n    );\n\n    IF ROW_COUNT() > 0 THEN\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Error logged successfully for user: ', p_User);\n    ELSE\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Warning: Error log entry was not created for user: ', p_User);\n    END IF;\n\n    COMMIT;\nEND ;;"
      },
      {
        "Name": "log_error_Delete_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_ErrorLog"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `log_error_Delete_All`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        ROLLBACK;\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while deleting all error log entries';\n    END;\n\n    START TRANSACTION;\n\n    \n    SELECT COUNT(*) INTO v_Count FROM log_error;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'No error log entries found to delete';\n        ROLLBACK;\n    ELSE\n        DELETE FROM log_error;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Successfully deleted ', v_RowsAffected, ' error log entries');\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = 'No error log entries were deleted';\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "log_error_Delete_ById",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Id",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_ErrorLog"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `log_error_Delete_ById`(\n    IN p_Id INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        ROLLBACK;\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting error log entry with ID: ', p_Id);\n    END;\n\n    START TRANSACTION;\n\n    \n    IF p_Id IS NULL OR p_Id <= 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Valid ID parameter is required';\n        ROLLBACK;\n    ELSE\n        \n        SELECT COUNT(*) INTO v_Count FROM log_error WHERE ID = p_Id;\n        \n        IF v_Count = 0 THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('Error log entry with ID ', p_Id, ' not found');\n            ROLLBACK;\n        ELSE\n            DELETE FROM log_error WHERE ID = p_Id;\n            SET v_RowsAffected = ROW_COUNT();\n            \n            IF v_RowsAffected > 0 THEN\n                SET p_Status = 0;\n                SET p_ErrorMsg = CONCAT('Error log entry with ID ', p_Id, ' deleted successfully');\n            ELSE\n                SET p_Status = 2;\n                SET p_ErrorMsg = CONCAT('Error log entry with ID ', p_Id, ' was not deleted');\n            END IF;\n            \n            COMMIT;\n        END IF;\n    END IF;\nEND ;;"
      },
      {
        "Name": "log_error_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_ErrorLog"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `log_error_Get_All`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving all error logs';\n    END;\n\n    SELECT COUNT(*) INTO v_Count FROM log_error;\n    \n    SELECT \n        ID,\n        User,\n        ErrorMessage,\n        StackTrace,\n        MethodName,\n        ErrorType,\n        LoggedDate\n    FROM log_error \n    ORDER BY LoggedDate DESC;\n\n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' error log entries successfully');\nEND ;;"
      },
      {
        "Name": "log_error_Get_ByDateRange",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_StartDate",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_EndDate",
            "DataType": "DATETIME",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_ErrorLog"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `log_error_Get_ByDateRange`(\n    IN p_StartDate DATETIME,\n    IN p_EndDate DATETIME,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving error logs for date range: ', \n                               DATE_FORMAT(p_StartDate, '%Y-%m-%d'), ' to ', DATE_FORMAT(p_EndDate, '%Y-%m-%d'));\n    END;\n\n    \n    IF p_StartDate IS NULL OR p_EndDate IS NULL THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Start date and end date parameters are required';\n    ELSEIF p_StartDate > p_EndDate THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Start date must be less than or equal to end date';\n    ELSE\n        SELECT COUNT(*) INTO v_Count FROM log_error \n        WHERE ErrorTime BETWEEN p_StartDate AND p_EndDate;\n        \n        SELECT * FROM log_error \n        WHERE ErrorTime BETWEEN p_StartDate AND p_EndDate \n        ORDER BY ErrorTime DESC;\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' error log entries between ', \n                               DATE_FORMAT(p_StartDate, '%Y-%m-%d %H:%i:%s'), ' and ', \n                               DATE_FORMAT(p_EndDate, '%Y-%m-%d %H:%i:%s'));\n    END IF;\nEND ;;"
      },
      {
        "Name": "log_error_Get_ByUser",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_ErrorLog"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `log_error_Get_ByUser`(\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving error logs for user: ', p_User);\n    END;\n\n    \n    IF p_User IS NULL OR p_User = '' THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'User parameter is required';\n    ELSE\n        SELECT COUNT(*) INTO v_Count FROM log_error WHERE User = p_User;\n        \n        SELECT * FROM log_error \n        WHERE User = p_User \n        ORDER BY ErrorTime DESC;\n\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' error log entries for user: ', p_User);\n    END IF;\nEND ;;"
      },
      {
        "Name": "log_error_Get_Unique",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_ErrorLog"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `log_error_Get_Unique`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving unique error combinations';\n    END;\n\n    SELECT COUNT(DISTINCT CONCAT(IFNULL(MethodName, ''), '|', IFNULL(ErrorMessage, ''))) \n    INTO v_Count FROM log_error \n    WHERE MethodName IS NOT NULL AND ErrorMessage IS NOT NULL;\n\n    SELECT DISTINCT MethodName, ErrorMessage \n    FROM log_error \n    WHERE MethodName IS NOT NULL AND ErrorMessage IS NOT NULL\n    ORDER BY MethodName, ErrorMessage;\n\n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' unique error combinations successfully');\nEND ;;"
      },
      {
        "Name": "md_item_types_Add_ItemType",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_ItemType"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_item_types_Add_ItemType`(\n    IN p_ItemType VARCHAR(50),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding item type: ', p_ItemType);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_item_types WHERE ItemType = p_ItemType;\n    \n    IF v_Count > 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Item type already exists: ', p_ItemType);\n        ROLLBACK;\n    ELSE\n        INSERT INTO md_item_types (ItemType, IssuedBy)\n        VALUES (p_ItemType, p_IssuedBy);\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Item type added successfully: ', p_ItemType);\n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_item_types_Delete_ByItemType",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_item_types_Delete_ByItemType`(\n    IN p_ItemType VARCHAR(50),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting item type: ', p_ItemType);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_item_types WHERE ItemType = p_ItemType;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Item type not found: ', p_ItemType);\n        ROLLBACK;\n    ELSE\n        DELETE FROM md_item_types WHERE ItemType = p_ItemType;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Item type deleted successfully: ', p_ItemType);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('Failed to delete item type: ', p_ItemType);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_item_types_Exists_ByItemType",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_item_types_Exists_ByItemType`(\n    IN p_ItemType VARCHAR(50),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while checking item type existence: ', p_ItemType);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_item_types WHERE ItemType = p_ItemType;\n    SELECT v_Count as ItemTypeExists;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Item type existence check completed for: ', p_ItemType, ' (Exists: ', IF(v_Count > 0, 'Yes', 'No'), ')');\nEND ;;"
      },
      {
        "Name": "md_item_types_GetDistinct",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Part"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_item_types_GetDistinct`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving distinct item types';\n    END;\n    \n    SELECT COUNT(DISTINCT ItemType) INTO v_Count FROM md_item_types;\n    SELECT DISTINCT ItemType FROM md_item_types ORDER BY ItemType;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' distinct item types successfully');\nEND ;;"
      },
      {
        "Name": "md_item_types_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_ItemType",
          "Helper_UI_ComboBoxes"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_item_types_Get_All`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving all item types';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_item_types;\n    SELECT * FROM md_item_types ORDER BY ItemType;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' item types successfully');\nEND ;;"
      },
      {
        "Name": "md_item_types_Update_ItemType",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_OldItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_NewItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_ItemType"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_item_types_Update_ItemType`(\n    IN p_OldItemType VARCHAR(50),\n    IN p_NewItemType VARCHAR(50),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating item type: ', p_OldItemType);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_item_types WHERE ItemType = p_OldItemType;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Item type not found: ', p_OldItemType);\n        ROLLBACK;\n    ELSE\n        UPDATE md_item_types \n        SET ItemType = p_NewItemType,\n            IssuedBy = p_IssuedBy\n        WHERE ItemType = p_OldItemType;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Item type updated successfully from ', p_OldItemType, ' to ', p_NewItemType);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No changes made to item type: ', p_OldItemType);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_locations_Add_Location",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Location",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Building",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Location"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_locations_Add_Location`(\n    IN p_Location VARCHAR(100),\n    IN p_Building VARCHAR(100),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding location: ', p_Location);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_locations WHERE Location = p_Location;\n    \n    IF v_Count > 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Location already exists: ', p_Location);\n        ROLLBACK;\n    ELSE\n        INSERT INTO md_locations (Location, Building, IssuedBy)\n        VALUES (p_Location, p_Building, p_IssuedBy);\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Location added successfully: ', p_Location);\n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_locations_Delete_ByLocation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Location",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Location"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_locations_Delete_ByLocation`(\n    IN p_Location VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting location: ', p_Location);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_locations WHERE Location = p_Location;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Location not found: ', p_Location);\n        ROLLBACK;\n    ELSE\n        DELETE FROM md_locations WHERE Location = p_Location;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Location deleted successfully: ', p_Location);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('Failed to delete location: ', p_Location);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_locations_Exists_ByLocation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Location",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Location"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_locations_Exists_ByLocation`(\n    IN p_Location VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while checking location existence: ', p_Location);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_locations WHERE Location = p_Location;\n    SELECT v_Count as LocationExists;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Location existence check completed for: ', p_Location, ' (Exists: ', IF(v_Count > 0, 'Yes', 'No'), ')');\nEND ;;"
      },
      {
        "Name": "md_locations_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Location",
          "Helper_UI_ComboBoxes"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_locations_Get_All`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving all locations';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_locations;\n    SELECT * FROM md_locations ORDER BY Location;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' locations successfully');\nEND ;;"
      },
      {
        "Name": "md_locations_Update_Location",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_OldLocation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_NewLocation",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Building",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Location"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_locations_Update_Location`(\n    IN p_OldLocation VARCHAR(100),\n    IN p_NewLocation VARCHAR(100),\n    IN p_Building VARCHAR(100),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating location: ', p_OldLocation);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_locations WHERE Location = p_OldLocation;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Location not found: ', p_OldLocation);\n        ROLLBACK;\n    ELSE\n        UPDATE md_locations \n        SET Location = p_NewLocation,\n            Building = p_Building,\n            IssuedBy = p_IssuedBy\n        WHERE Location = p_OldLocation;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Location updated successfully from ', p_OldLocation, ' to ', p_NewLocation);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No changes made to location: ', p_OldLocation);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_operation_numbers_Add_Operation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Control_Add_Operation",
          "Dao_Operation"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_operation_numbers_Add_Operation`(\n    IN p_Operation VARCHAR(50),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding operation: ', p_Operation);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_operation_numbers WHERE Operation = p_Operation;\n    \n    IF v_Count > 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Operation already exists: ', p_Operation);\n        ROLLBACK;\n    ELSE\n        INSERT INTO md_operation_numbers (Operation, IssuedBy)\n        VALUES (p_Operation, p_IssuedBy);\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Operation added successfully: ', p_Operation);\n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_operation_numbers_Delete_ByOperation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Operation"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_operation_numbers_Delete_ByOperation`(\n    IN p_Operation VARCHAR(50),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting operation: ', p_Operation);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_operation_numbers WHERE Operation = p_Operation;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Operation not found: ', p_Operation);\n        ROLLBACK;\n    ELSE\n        DELETE FROM md_operation_numbers WHERE Operation = p_Operation;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Operation deleted successfully: ', p_Operation);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('Failed to delete operation: ', p_Operation);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_operation_numbers_Exists_ByOperation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Control_Add_Operation",
          "Dao_Operation"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_operation_numbers_Exists_ByOperation`(\n    IN p_Operation VARCHAR(50),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while checking operation existence: ', p_Operation);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_operation_numbers WHERE Operation = p_Operation;\n    SELECT v_Count as OperationExists;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Operation existence check completed for: ', p_Operation, ' (Exists: ', IF(v_Count > 0, 'Yes', 'No'), ')');\nEND ;;"
      },
      {
        "Name": "md_operation_numbers_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Operation",
          "Helper_UI_ComboBoxes"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_operation_numbers_Get_All`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving all operations';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_operation_numbers;\n    SELECT * FROM md_operation_numbers ORDER BY Operation;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' operations successfully');\nEND ;;"
      },
      {
        "Name": "md_operation_numbers_Update_Operation",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_OldOperation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_NewOperation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Operation"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_operation_numbers_Update_Operation`(\n    IN p_OldOperation VARCHAR(50),\n    IN p_NewOperation VARCHAR(50),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating operation: ', p_OldOperation);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_operation_numbers WHERE Operation = p_OldOperation;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Operation not found: ', p_OldOperation);\n        ROLLBACK;\n    ELSE\n        UPDATE md_operation_numbers \n        SET Operation = p_NewOperation,\n            IssuedBy = p_IssuedBy\n        WHERE Operation = p_OldOperation;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Operation updated successfully from ', p_OldOperation, ' to ', p_NewOperation);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No changes made to operation: ', p_OldOperation);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_part_ids_Add_PartID",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_part_ids_Add_PartID`(\n    IN p_PartID VARCHAR(300),\n    IN p_ItemType VARCHAR(50),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding part ID: ', p_PartID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_part_ids WHERE PartID = p_PartID;\n    \n    IF v_Count > 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Part ID already exists: ', p_PartID);\n        ROLLBACK;\n    ELSE\n        INSERT INTO md_part_ids (PartID, ItemType, IssuedBy)\n        VALUES (p_PartID, p_ItemType, p_IssuedBy);\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Part ID added successfully: ', p_PartID);\n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_part_ids_Delete_ByPartID",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_part_ids_Delete_ByPartID`(\n    IN p_PartID VARCHAR(300),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting part ID: ', p_PartID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_part_ids WHERE PartID = p_PartID;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Part ID not found: ', p_PartID);\n        ROLLBACK;\n    ELSE\n        DELETE FROM md_part_ids WHERE PartID = p_PartID;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Part ID deleted successfully: ', p_PartID);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('Failed to delete part ID: ', p_PartID);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_part_ids_Exists_ByPartID",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_part_ids_Exists_ByPartID`(\n    IN p_PartID VARCHAR(300),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while checking part ID existence: ', p_PartID);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_part_ids WHERE PartID = p_PartID;\n    SELECT v_Count as PartExists;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Part ID existence check completed for: ', p_PartID, ' (Exists: ', IF(v_Count > 0, 'Yes', 'No'), ')');\nEND ;;"
      },
      {
        "Name": "md_part_ids_GetItemType_ByPartID",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Inventory"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_part_ids_GetItemType_ByPartID`(\n    IN p_PartID VARCHAR(300),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving item type for part ID: ', p_PartID);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_part_ids WHERE PartID = p_PartID;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Part ID not found: ', p_PartID);\n        SELECT NULL as ItemType;\n    ELSE\n        SELECT ItemType FROM md_part_ids WHERE PartID = p_PartID LIMIT 1;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Item type retrieved successfully for part ID: ', p_PartID);\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_part_ids_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_Part",
          "Helper_UI_ComboBoxes"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_part_ids_Get_All`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving all part IDs';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_part_ids;\n    SELECT * FROM md_part_ids ORDER BY PartID;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' part IDs successfully');\nEND ;;"
      },
      {
        "Name": "md_part_ids_Get_ByPartID",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_part_ids_Get_ByPartID`(\n    IN p_PartID VARCHAR(300),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving part ID: ', p_PartID);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM md_part_ids WHERE PartID = p_PartID;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Part ID not found: ', p_PartID);\n        SELECT NULL as PartID, NULL as ItemType;\n    ELSE\n        SELECT * FROM md_part_ids WHERE PartID = p_PartID LIMIT 1;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Part ID retrieved successfully: ', p_PartID);\n    END IF;\nEND ;;"
      },
      {
        "Name": "md_part_ids_Update_PartID",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_OldPartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_NewPartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ItemType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_IssuedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `md_part_ids_Update_PartID`(\n    IN p_OldPartID VARCHAR(300),\n    IN p_NewPartID VARCHAR(300),\n    IN p_ItemType VARCHAR(50),\n    IN p_IssuedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating part ID: ', p_OldPartID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM md_part_ids WHERE PartID = p_OldPartID;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Part ID not found: ', p_OldPartID);\n        ROLLBACK;\n    ELSE\n        UPDATE md_part_ids \n        SET PartID = p_NewPartID,\n            ItemType = p_ItemType,\n            IssuedBy = p_IssuedBy\n        WHERE PartID = p_OldPartID;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Part ID updated successfully from ', p_OldPartID, ' to ', p_NewPartID);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No changes made to part ID: ', p_OldPartID);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_GetRoleIdByName",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_RoleName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_System"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_GetRoleIdByName`(\n    IN p_RoleName VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RoleID INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving role ID for: ', p_RoleName);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM sys_roles WHERE RoleName = p_RoleName;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Role not found: ', p_RoleName);\n        SELECT NULL as RoleID;\n    ELSE\n        SELECT ID INTO v_RoleID FROM sys_roles WHERE RoleName = p_RoleName LIMIT 1;\n        SELECT v_RoleID as RoleID;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Role ID retrieved successfully for: ', p_RoleName);\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_GetStoredProcedureInventory",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "TEXT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_GetStoredProcedureInventory`(\r\n    OUT p_Status INT,\r\n    OUT p_ErrorMsg TEXT\r\n)\nBEGIN\r\n    DECLARE v_ProcCount INT DEFAULT 0;\r\n    \r\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\r\n    BEGIN\r\n        SET p_Status = -1;\r\n        SET p_ErrorMsg = 'Database error occurred while retrieving procedure inventory';\r\n    END;\r\n    \r\n    SELECT COUNT(*) INTO v_ProcCount\r\n    FROM INFORMATION_SCHEMA.ROUTINES \r\n    WHERE ROUTINE_SCHEMA = DATABASE()\r\n    AND ROUTINE_TYPE = 'PROCEDURE';\r\n    \r\n    -- Return detailed procedure information\r\n    SELECT \r\n        ROUTINE_NAME as ProcedureName,\r\n        CREATED as Created,\r\n        LAST_ALTERED as LastModified,\r\n        SQL_DATA_ACCESS as DataAccess,\r\n        SECURITY_TYPE as SecurityType,\r\n        ROUTINE_COMMENT as Comment,\r\n        DEFINER as Definer\r\n    FROM INFORMATION_SCHEMA.ROUTINES \r\n    WHERE ROUTINE_SCHEMA = DATABASE()\r\n    AND ROUTINE_TYPE = 'PROCEDURE'\r\n    ORDER BY ROUTINE_NAME;\r\n    \r\n    SET p_Status = 0;\r\n    SET p_ErrorMsg = CONCAT('Procedure inventory completed. Found ', v_ProcCount, ' stored procedures');\r\n    \r\nEND ;;"
      },
      {
        "Name": "sys_GetUserAccessType",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_System",
          "Program"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_GetUserAccessType`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving user access information';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users;\n    \n    \n    SELECT \n        ID,\n        User,\n        `Full Name`,\n        AccessType,\n        VitsUser,\n        CreatedDate,\n        ModifiedDate\n    FROM usr_users \n    ORDER BY `Full Name`;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved user access information for ', v_Count, ' users');\nEND ;;"
      },
      {
        "Name": "sys_GetUserIdByName",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_UserName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_System"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_GetUserIdByName`(\n    IN p_UserName VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_UserID INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving user ID for: ', p_UserName);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_UserName;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_UserName);\n        SELECT NULL as UserID;\n    ELSE\n        SELECT ID INTO v_UserID FROM usr_users WHERE User = p_UserName LIMIT 1;\n        SELECT v_UserID as UserID;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('User ID retrieved successfully for: ', p_UserName);\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_last_10_transactions_AddOrShift_ByUser",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Quantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_QuickButtons"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_last_10_transactions_AddOrShift_ByUser`(\n    IN p_User VARCHAR(100),\n    IN p_PartID VARCHAR(300),\n    IN p_Operation VARCHAR(50),\n    IN p_Quantity INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_ExistingPosition INT DEFAULT 0;\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding/shifting quick button for user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    \n    SELECT Position INTO v_ExistingPosition\n    FROM sys_last_10_transactions \n    WHERE User = p_User AND PartID = p_PartID AND Operation = p_Operation\n    LIMIT 1;\n    \n    IF v_ExistingPosition > 0 THEN\n        \n        UPDATE sys_last_10_transactions \n        SET Quantity = p_Quantity, ReceiveDate = NOW()\n        WHERE User = p_User AND Position = v_ExistingPosition;\n        \n        \n        IF v_ExistingPosition != 1 THEN\n            CALL sys_last_10_transactions_Move_1(p_User, v_ExistingPosition, 1, @move_status, @move_msg);\n        END IF;\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Updated existing quick button quantity and moved to position 1 for user: ', p_User);\n    ELSE\n        \n        CALL sys_last_10_transactions_Add_AtPosition_1(p_User, 1, p_PartID, p_Operation, p_Quantity, @add_status, @add_msg);\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Added new quick button at position 1 for user: ', p_User);\n    END IF;\n    \n    COMMIT;\nEND ;;"
      },
      {
        "Name": "sys_last_10_transactions_Add_AtPosition_1",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Position",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Quantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_last_10_transactions_Add_AtPosition_1`(\n    IN p_User VARCHAR(100),\n    IN p_Position INT,\n    IN p_PartID VARCHAR(300),\n    IN p_Operation VARCHAR(50),\n    IN p_Quantity INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding quick button at position ', p_Position, ' for user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    IF p_Position < 1 OR p_Position > 10 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Invalid position: ', p_Position, '. Position must be between 1 and 10.');\n        ROLLBACK;\n    ELSE\n        \n        UPDATE sys_last_10_transactions \n        SET Position = Position + 1 \n        WHERE User = p_User AND Position >= p_Position AND Position < 10;\n        \n        \n        DELETE FROM sys_last_10_transactions WHERE User = p_User AND Position = 10;\n        \n        \n        INSERT INTO sys_last_10_transactions (User, Position, PartID, Operation, Quantity, ReceiveDate)\n        VALUES (p_User, p_Position, p_PartID, p_Operation, p_Quantity, NOW());\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Quick button added at position ', p_Position, ' for user: ', p_User);\n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_last_10_transactions_DeleteAll_ByUser",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_QuickButtons"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_last_10_transactions_DeleteAll_ByUser`(\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting all quick buttons for user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    SELECT COUNT(*) INTO v_Count FROM sys_last_10_transactions WHERE User = p_User;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('No quick buttons found for user: ', p_User);\n        ROLLBACK;\n    ELSE\n        DELETE FROM sys_last_10_transactions WHERE User = p_User;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Deleted ', v_RowsAffected, ' quick buttons for user: ', p_User);\n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_last_10_transactions_Get_ByUser_1",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_last_10_transactions_Get_ByUser_1`(\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving quick buttons for user: ', p_User);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM sys_last_10_transactions WHERE User = p_User;\n    \n    SELECT \n        Position,\n        User,\n        PartID,\n        Operation,\n        Quantity,\n        ReceiveDate  \n    FROM sys_last_10_transactions \n    WHERE User = p_User \n    ORDER BY Position;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' quick buttons for user: ', p_User);\nEND ;;"
      },
      {
        "Name": "sys_last_10_transactions_Move_1",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_FromPosition",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ToPosition",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_last_10_transactions_Move_1`(\n    IN p_User VARCHAR(100),\n    IN p_FromPosition INT,\n    IN p_ToPosition INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_PartID VARCHAR(300);\n    DECLARE v_Operation VARCHAR(50);\n    DECLARE v_Quantity INT;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while moving quick button from position ', p_FromPosition, ' to ', p_ToPosition, ' for user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    IF p_FromPosition < 1 OR p_FromPosition > 10 OR p_ToPosition < 1 OR p_ToPosition > 10 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Invalid positions. From: ', p_FromPosition, ', To: ', p_ToPosition, '. Positions must be between 1 and 10.');\n        ROLLBACK;\n    ELSEIF p_FromPosition = p_ToPosition THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = 'Source and destination positions cannot be the same.';\n        ROLLBACK;\n    ELSE\n        \n        SELECT COUNT(*), PartID, Operation, Quantity \n        INTO v_Count, v_PartID, v_Operation, v_Quantity\n        FROM sys_last_10_transactions \n        WHERE User = p_User AND Position = p_FromPosition;\n        \n        IF v_Count = 0 THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('No quick button found at position ', p_FromPosition, ' for user: ', p_User);\n            ROLLBACK;\n        ELSE\n            \n            DELETE FROM sys_last_10_transactions WHERE User = p_User AND Position = p_FromPosition;\n            \n            \n            IF p_ToPosition < p_FromPosition THEN\n                \n                UPDATE sys_last_10_transactions \n                SET Position = Position + 1 \n                WHERE User = p_User AND Position >= p_ToPosition AND Position < p_FromPosition;\n            ELSE\n                \n                UPDATE sys_last_10_transactions \n                SET Position = Position - 1 \n                WHERE User = p_User AND Position > p_FromPosition AND Position <= p_ToPosition;\n            END IF;\n            \n            \n            INSERT INTO sys_last_10_transactions (User, Position, PartID, Operation, Quantity, ReceiveDate)\n            VALUES (p_User, p_ToPosition, v_PartID, v_Operation, v_Quantity, NOW());\n            \n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Quick button moved from position ', p_FromPosition, ' to ', p_ToPosition, ' for user: ', p_User);\n            COMMIT;\n        END IF;\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_last_10_transactions_RemoveAndShift_ByUser_1",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Position",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_last_10_transactions_RemoveAndShift_ByUser_1`(\n    IN p_User VARCHAR(100),\n    IN p_Position INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while removing quick button at position ', p_Position, ' for user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    IF p_Position < 1 OR p_Position > 10 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Invalid position: ', p_Position, '. Position must be between 1 and 10.');\n        ROLLBACK;\n    ELSE\n        \n        SELECT COUNT(*) INTO v_Count FROM sys_last_10_transactions WHERE User = p_User AND Position = p_Position;\n        \n        IF v_Count = 0 THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('No quick button found at position ', p_Position, ' for user: ', p_User);\n            ROLLBACK;\n        ELSE\n            \n            DELETE FROM sys_last_10_transactions WHERE User = p_User AND Position = p_Position;\n            SET v_RowsAffected = ROW_COUNT();\n            \n            \n            UPDATE sys_last_10_transactions \n            SET Position = Position - 1 \n            WHERE User = p_User AND Position > p_Position;\n            \n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Quick button removed from position ', p_Position, ' and remaining positions shifted up for user: ', p_User);\n            COMMIT;\n        END IF;\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_last_10_transactions_Update_ByUserAndPosition_1",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Position",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_PartID",
            "DataType": "VARCHAR(300)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Operation",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Quantity",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_last_10_transactions_Update_ByUserAndPosition_1`(\n    IN p_User VARCHAR(100),\n    IN p_Position INT,\n    IN p_PartID VARCHAR(300),\n    IN p_Operation VARCHAR(50),\n    IN p_Quantity INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating quick button at position ', p_Position, ' for user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    IF p_Position < 1 OR p_Position > 10 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Invalid position: ', p_Position, '. Position must be between 1 and 10.');\n        ROLLBACK;\n    ELSE\n        \n        SELECT COUNT(*) INTO v_Count FROM sys_last_10_transactions WHERE User = p_User AND Position = p_Position;\n        \n        IF v_Count = 0 THEN\n            \n            INSERT INTO sys_last_10_transactions (User, Position, PartID, Operation, Quantity, ReceiveDate)\n            VALUES (p_User, p_Position, p_PartID, p_Operation, p_Quantity, NOW());\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Quick button created at position ', p_Position, ' for user: ', p_User);\n        ELSE\n            \n            UPDATE sys_last_10_transactions \n            SET PartID = p_PartID,\n                Operation = p_Operation,\n                Quantity = p_Quantity,\n                ReceiveDate = NOW()\n            WHERE User = p_User AND Position = p_Position;\n            \n            SET v_RowsAffected = ROW_COUNT();\n            \n            IF v_RowsAffected > 0 THEN\n                SET p_Status = 0;\n                SET p_ErrorMsg = CONCAT('Quick button updated at position ', p_Position, ' for user: ', p_User);\n            ELSE\n                SET p_Status = 2;\n                SET p_ErrorMsg = CONCAT('No changes made to quick button at position ', p_Position, ' for user: ', p_User);\n            END IF;\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_roles_Get_ById",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_ID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_roles_Get_ById`(\n    IN p_ID INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving role with ID: ', p_ID);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM sys_roles WHERE ID = p_ID;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Role not found with ID: ', p_ID);\n        SELECT NULL as ID, NULL as RoleName, NULL as Description;\n    ELSE\n        SELECT * FROM sys_roles WHERE ID = p_ID LIMIT 1;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Role retrieved successfully with ID: ', p_ID);\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_SetUserAccessType",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_UserName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_AccessType",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_System",
          "Program"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_SetUserAccessType`(\n    IN p_UserName VARCHAR(100),\n    IN p_AccessType VARCHAR(50),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_UserCount INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while setting access type for user: ', p_UserName);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_UserCount FROM usr_users WHERE User = p_UserName;\n    IF v_UserCount = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_UserName);\n        ROLLBACK;\n    ELSE\n        \n        UPDATE usr_users \n        SET AccessType = p_AccessType, \n            ModifiedDate = NOW() \n        WHERE User = p_UserName;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Access type updated successfully for user: ', p_UserName);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No changes made to access type for user: ', p_UserName);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_user_roles_Add",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_UserID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_RoleID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_AssignedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Control_Add_User",
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_user_roles_Add`(\n    IN p_UserID INT,\n    IN p_RoleID INT,\n    IN p_AssignedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_UserCount INT DEFAULT 0;\n    DECLARE v_RoleCount INT DEFAULT 0;\n    DECLARE v_ExistingCount INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while adding role assignment for user ID: ', p_UserID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_UserCount FROM usr_users WHERE ID = p_UserID;\n    IF v_UserCount = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User ID not found: ', p_UserID);\n        ROLLBACK;\n    ELSE\n        \n        SELECT COUNT(*) INTO v_RoleCount FROM sys_roles WHERE ID = p_RoleID;\n        IF v_RoleCount = 0 THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('Role ID not found: ', p_RoleID);\n            ROLLBACK;\n        ELSE\n            \n            SELECT COUNT(*) INTO v_ExistingCount FROM sys_user_roles WHERE UserID = p_UserID AND RoleID = p_RoleID;\n            IF v_ExistingCount > 0 THEN\n                SET p_Status = 1;\n                SET p_ErrorMsg = CONCAT('Role assignment already exists for user ID: ', p_UserID);\n                ROLLBACK;\n            ELSE\n                INSERT INTO sys_user_roles (UserID, RoleID, AssignedBy, AssignedDate)\n                VALUES (p_UserID, p_RoleID, p_AssignedBy, NOW());\n                \n                SET p_Status = 0;\n                SET p_ErrorMsg = CONCAT('Role assignment added successfully for user ID: ', p_UserID);\n                COMMIT;\n            END IF;\n        END IF;\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_user_roles_Delete",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_UserID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_RoleID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_user_roles_Delete`(\n    IN p_UserID INT,\n    IN p_RoleID INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_ExistingCount INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting role assignment for user ID: ', p_UserID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_ExistingCount FROM sys_user_roles WHERE UserID = p_UserID AND RoleID = p_RoleID;\n    IF v_ExistingCount = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('Role assignment not found for user ID: ', p_UserID, ' and role ID: ', p_RoleID);\n        ROLLBACK;\n    ELSE\n        DELETE FROM sys_user_roles WHERE UserID = p_UserID AND RoleID = p_RoleID;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('Role assignment deleted successfully for user ID: ', p_UserID);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('Failed to delete role assignment for user ID: ', p_UserID);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_user_roles_Update",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_UserID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_NewRoleID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_AssignedBy",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_user_roles_Update`(\n    IN p_UserID INT,\n    IN p_NewRoleID INT,\n    IN p_AssignedBy VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_UserCount INT DEFAULT 0;\n    DECLARE v_RoleCount INT DEFAULT 0;\n    DECLARE v_ExistingCount INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating role assignment for user ID: ', p_UserID);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_UserCount FROM usr_users WHERE ID = p_UserID;\n    IF v_UserCount = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User ID not found: ', p_UserID);\n        ROLLBACK;\n    ELSE\n        \n        SELECT COUNT(*) INTO v_RoleCount FROM sys_roles WHERE ID = p_NewRoleID;\n        IF v_RoleCount = 0 THEN\n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('Role ID not found: ', p_NewRoleID);\n            ROLLBACK;\n        ELSE\n            \n            SELECT COUNT(*) INTO v_ExistingCount FROM sys_user_roles WHERE UserID = p_UserID;\n            IF v_ExistingCount = 0 THEN\n                \n                INSERT INTO sys_user_roles (UserID, RoleID, AssignedBy, AssignedDate)\n                VALUES (p_UserID, p_NewRoleID, p_AssignedBy, NOW());\n                \n                SET p_Status = 0;\n                SET p_ErrorMsg = CONCAT('New role assignment created for user ID: ', p_UserID);\n            ELSE\n                \n                UPDATE sys_user_roles \n                SET RoleID = p_NewRoleID,\n                    AssignedBy = p_AssignedBy,\n                    AssignedDate = NOW()\n                WHERE UserID = p_UserID;\n                \n                SET v_RowsAffected = ROW_COUNT();\n                \n                IF v_RowsAffected > 0 THEN\n                    SET p_Status = 0;\n                    SET p_ErrorMsg = CONCAT('Role assignment updated successfully for user ID: ', p_UserID);\n                ELSE\n                    SET p_Status = 2;\n                    SET p_ErrorMsg = CONCAT('No changes made to role assignment for user ID: ', p_UserID);\n                END IF;\n            END IF;\n            \n            COMMIT;\n        END IF;\n    END IF;\nEND ;;"
      },
      {
        "Name": "sys_VerifyDatabaseSchema",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "TEXT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_VerifyDatabaseSchema`(\r\n    OUT p_Status INT,\r\n    OUT p_ErrorMsg TEXT\r\n)\nBEGIN\r\n    DECLARE v_TableCount INT DEFAULT 0;\r\n    DECLARE v_MissingTables TEXT DEFAULT '';\r\n    DECLARE v_Expected INT DEFAULT 0;\r\n    \r\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\r\n    BEGIN\r\n        SET p_Status = -1;\r\n        SET p_ErrorMsg = 'Database error occurred during schema verification';\r\n    END;\r\n    \r\n    -- Expected core tables from UpdatedDatabase.sql analysis\r\n    SET v_Expected = 11;\r\n    \r\n    -- Check for each required table\r\n    SELECT COUNT(*) INTO v_TableCount\r\n    FROM INFORMATION_SCHEMA.TABLES \r\n    WHERE TABLE_SCHEMA = DATABASE()\r\n    AND TABLE_NAME IN (\r\n        'app_themes',\r\n        'debug_matching', \r\n        'inv_inventory',\r\n        'inv_inventory_batch_seq',\r\n        'inv_transaction',\r\n        'usr_users',\r\n        'usr_ui_settings', \r\n        'sys_user_roles',\r\n        'md_part_ids',\r\n        'md_locations', \r\n        'md_operation_numbers'\r\n    );\r\n    \r\n    IF v_TableCount < v_Expected THEN\r\n        SET p_Status = 1;\r\n        SET p_ErrorMsg = CONCAT('Missing tables detected. Found ', v_TableCount, ' of ', v_Expected, ' required tables');\r\n    ELSE\r\n        SET p_Status = 0;\r\n        SET p_ErrorMsg = CONCAT('Schema validation passed. All ', v_TableCount, ' required tables found');\r\n    END IF;\r\n    \r\n    -- Return detailed table information\r\n    SELECT \r\n        TABLE_NAME as TableName,\r\n        ENGINE as Engine,\r\n        TABLE_COLLATION as Collation,\r\n        CREATE_TIME as Created,\r\n        TABLE_COMMENT as Comment,\r\n        TABLE_ROWS as ApproxRows\r\n    FROM INFORMATION_SCHEMA.TABLES \r\n    WHERE TABLE_SCHEMA = DATABASE()\r\n    ORDER BY TABLE_NAME;\r\n    \r\nEND ;;"
      },
      {
        "Name": "sys_VerifyTableColumns",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_TableName",
            "DataType": "VARCHAR(64)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "TEXT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `sys_VerifyTableColumns`(\r\n    IN p_TableName VARCHAR(64),\r\n    OUT p_Status INT,\r\n    OUT p_ErrorMsg TEXT\r\n)\nBEGIN\r\n    DECLARE v_ColumnCount INT DEFAULT 0;\r\n    DECLARE v_ExpectedColumns TEXT DEFAULT '';\r\n    \r\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\r\n    BEGIN\r\n        SET p_Status = -1;\r\n        SET p_ErrorMsg = CONCAT('Database error occurred while verifying columns for table: ', p_TableName);\r\n    END;\r\n    \r\n    -- Define expected columns for key tables based on UpdatedDatabase.sql\r\n    CASE p_TableName\r\n        WHEN 'inv_inventory' THEN\r\n            SET v_ExpectedColumns = 'ID,PartID,Location,Operation,Quantity,ItemType,ReceiveDate,LastUpdated,User,BatchNumber,Notes';\r\n        WHEN 'inv_transaction' THEN  \r\n            SET v_ExpectedColumns = 'ID,TransactionType,BatchNumber,PartID,FromLocation,ToLocation,Operation,Quantity,Notes,User,ItemType,ReceiveDate';\r\n        WHEN 'app_themes' THEN\r\n            SET v_ExpectedColumns = 'ThemeName,SettingsJson';\r\n        WHEN 'debug_matching' THEN\r\n            SET v_ExpectedColumns = 'id,in_id,in_part,in_loc,in_batch,out_id,out_part,out_loc,out_batch,matched_at';\r\n        ELSE\r\n            SET p_Status = 1;\r\n            SET p_ErrorMsg = CONCAT('Unknown table for verification: ', p_TableName);\r\n    END CASE;\r\n    \r\n    -- Return column information for manual verification\r\n    SELECT \r\n        COLUMN_NAME as ColumnName,\r\n        DATA_TYPE as DataType,\r\n        IS_NULLABLE as Nullable,\r\n        COLUMN_DEFAULT as DefaultValue,\r\n        CHARACTER_MAXIMUM_LENGTH as MaxLength,\r\n        COLUMN_KEY as KeyType,\r\n        EXTRA as Extra\r\n    FROM INFORMATION_SCHEMA.COLUMNS\r\n    WHERE TABLE_SCHEMA = DATABASE()\r\n    AND TABLE_NAME = p_TableName\r\n    ORDER BY ORDINAL_POSITION;\r\n    \r\n    SET p_Status = 0;\r\n    SET p_ErrorMsg = CONCAT('Column verification completed for table: ', p_TableName);\r\n    \r\nEND ;;"
      },
      {
        "Name": "usr_ui_settings_Delete_ByUserId",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(64)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_ui_settings_Delete_ByUserId`(\n    IN p_UserId VARCHAR(64),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting user settings for user: ', p_UserId);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    DELETE FROM usr_ui_settings WHERE UserId = p_UserId;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('User settings deleted successfully for user: ', p_UserId);\n    \n    COMMIT;\nEND ;;"
      },
      {
        "Name": "usr_ui_settings_GetJsonSetting",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_SettingJson",
            "DataType": "TEXT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_ui_settings_GetJsonSetting`(\n    IN p_UserId VARCHAR(100),\n    OUT p_SettingJson TEXT, \n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while getting JSON setting';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_ui_settings WHERE UserId = p_UserId;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('No settings found for user: ', p_UserId);\n        SET p_SettingJson = NULL;\n    ELSE\n        SELECT SettingsJson INTO p_SettingJson\n        FROM usr_ui_settings \n        WHERE UserId = p_UserId \n        LIMIT 1;\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('JSON setting retrieved successfully for user: ', p_UserId);\n    END IF;\nEND ;;"
      },
      {
        "Name": "usr_ui_settings_GetSettingsJson_ByUserId",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_ui_settings_GetSettingsJson_ByUserId`(\n    IN p_UserId VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving settings for user: ', p_UserId);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_ui_settings WHERE UserId = p_UserId;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('No settings found for user: ', p_UserId);\n        SELECT NULL as SettingsJson;\n    ELSE\n        SELECT SettingsJson FROM usr_ui_settings WHERE UserId = p_UserId LIMIT 1;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Settings retrieved successfully for user: ', p_UserId);\n    END IF;\nEND ;;"
      },
      {
        "Name": "usr_ui_settings_GetShortcutsJson",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ShortcutsJson",
            "DataType": "TEXT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_ui_settings_GetShortcutsJson`(\n    IN p_UserId VARCHAR(100),\n    OUT p_ShortcutsJson TEXT, \n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while getting shortcuts JSON';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_ui_settings WHERE UserId = p_UserId;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('No shortcuts found for user: ', p_UserId);\n        SET p_ShortcutsJson = NULL;\n    ELSE\n        SELECT ShortcutsJson INTO p_ShortcutsJson\n        FROM usr_ui_settings \n        WHERE UserId = p_UserId \n        LIMIT 1;\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Shortcuts JSON retrieved successfully for user: ', p_UserId);\n    END IF;\nEND ;;"
      },
      {
        "Name": "usr_ui_settings_SetJsonSetting",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_DgvName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_SettingJson",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_ui_settings_SetJsonSetting`(\n    IN p_UserId VARCHAR(100),\n    IN p_DgvName VARCHAR(100),\n    IN p_SettingJson TEXT, \n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while setting JSON setting';\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    INSERT INTO usr_ui_settings (UserId, DgvName, SettingsJson, CreatedDate, ModifiedDate)\n    VALUES (p_UserId, p_DgvName, p_SettingJson, NOW(), NOW())\n    ON DUPLICATE KEY UPDATE \n        SettingsJson = p_SettingJson,\n        ModifiedDate = NOW();\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = 'JSON setting updated successfully';\n    \n    COMMIT;\nEND ;;"
      },
      {
        "Name": "usr_ui_settings_SetShortcutsJson",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ShortcutsJson",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_ui_settings_SetShortcutsJson`(\n    IN p_UserId VARCHAR(100),\n    IN p_ShortcutsJson TEXT, \n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while setting shortcuts JSON';\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    INSERT INTO usr_ui_settings (UserId, ShortcutsJson, CreatedDate, ModifiedDate)\n    VALUES (p_UserId, p_ShortcutsJson, NOW(), NOW())\n    ON DUPLICATE KEY UPDATE \n        ShortcutsJson = p_ShortcutsJson,\n        ModifiedDate = NOW();\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = 'Shortcuts JSON updated successfully';\n    \n    COMMIT;\nEND ;;"
      },
      {
        "Name": "usr_ui_settings_SetThemeJson",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_UserId",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ThemeJson",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_ui_settings_SetThemeJson`(\n    IN p_UserId VARCHAR(100),\n    IN p_ThemeJson TEXT, \n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while setting theme JSON';\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    INSERT INTO usr_ui_settings (UserId, SettingsJson, CreatedDate, ModifiedDate)\n    VALUES (p_UserId, p_ThemeJson, NOW(), NOW())\n    ON DUPLICATE KEY UPDATE \n        SettingsJson = p_ThemeJson,\n        ModifiedDate = NOW();\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = 'Theme JSON updated successfully';\n    \n    COMMIT;\nEND ;;"
      },
      {
        "Name": "usr_users_Add_User",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_FullName",
            "DataType": "VARCHAR(200)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Shift",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_VitsUser",
            "DataType": "TINYINT(1)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Pin",
            "DataType": "VARCHAR(20)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_LastShownVersion",
            "DataType": "VARCHAR(20)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_HideChangeLog",
            "DataType": "VARCHAR(10)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Theme_Name",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Theme_FontSize",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_VisualUserName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_VisualPassword",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_WipServerAddress",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_WIPDatabase",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_WipServerPort",
            "DataType": "VARCHAR(10)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Control_Add_User",
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_users_Add_User`(\n    IN p_User VARCHAR(100),\n    IN p_FullName VARCHAR(200),\n    IN p_Shift VARCHAR(50),\n    IN p_VitsUser TINYINT(1), \n    IN p_Pin VARCHAR(20),\n    IN p_LastShownVersion VARCHAR(20),\n    IN p_HideChangeLog VARCHAR(10),\n    IN p_Theme_Name VARCHAR(50),\n    IN p_Theme_FontSize INT,\n    IN p_VisualUserName VARCHAR(100),\n    IN p_VisualPassword VARCHAR(100),\n    IN p_WipServerAddress VARCHAR(100),\n    IN p_WIPDatabase VARCHAR(100),\n    IN p_WipServerPort VARCHAR(10),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while creating user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    \n    IF v_Count > 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User already exists: ', p_User);\n        ROLLBACK;\n    ELSE\n        INSERT INTO usr_users (\n            User, `Full Name`, Shift, VitsUser, Pin,\n            LastShownVersion, HideChangeLog, Theme_Name, Theme_FontSize,\n            VisualUserName, VisualPassword, WipServerAddress, \n            WIPDatabase, WipServerPort\n        ) VALUES (\n            p_User, p_FullName, p_Shift, p_VitsUser, p_Pin,\n            p_LastShownVersion, p_HideChangeLog, p_Theme_Name, p_Theme_FontSize,\n            p_VisualUserName, p_VisualPassword, p_WipServerAddress,\n            p_WIPDatabase, p_WipServerPort\n        );\n        \n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('User created successfully: ', p_User);\n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "usr_users_Delete_User",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_users_Delete_User`(\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while deleting user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_User);\n        ROLLBACK;\n    ELSE\n        DELETE FROM usr_users WHERE User = p_User;\n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('User deleted successfully: ', p_User);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('Failed to delete user: ', p_User);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "usr_users_Exists",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Control_Add_User",
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_users_Exists`(\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while checking user existence: ', p_User);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    SELECT v_Count as UserExists;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('User existence check completed for: ', p_User, ' (Exists: ', IF(v_Count > 0, 'Yes', 'No'), ')');\nEND ;;"
      },
      {
        "Name": "usr_users_GetFullName_ByUser",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_users_GetFullName_ByUser`(\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving full name for user: ', p_User);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_User);\n    ELSE\n        SELECT `Full Name` FROM usr_users WHERE User = p_User LIMIT 1;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Full name retrieved successfully for user: ', p_User);\n    END IF;\nEND ;;"
      },
      {
        "Name": "usr_users_GetUserSetting_ByUserAndField",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Field",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_users_GetUserSetting_ByUserAndField`(\n    IN p_User VARCHAR(100), \n    IN p_Field VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_FieldValue TEXT DEFAULT NULL;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving setting ', p_Field, ' for user: ', p_User);\n    END;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_User);\n        SELECT NULL as FieldValue;\n    ELSE\n        \n        CASE p_Field\n            WHEN 'LastShownVersion' THEN SELECT LastShownVersion INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'HideChangeLog' THEN SELECT HideChangeLog INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'Theme_Name' THEN SELECT Theme_Name INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'Theme_FontSize' THEN SELECT CAST(Theme_FontSize AS CHAR) INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'VisualUserName' THEN SELECT VisualUserName INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'VisualPassword' THEN SELECT VisualPassword INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'WipServerAddress' THEN SELECT WipServerAddress INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'WIPDatabase' THEN SELECT WIPDatabase INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'WipServerPort' THEN SELECT WipServerPort INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'FullName' THEN SELECT `Full Name` INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'Shift' THEN SELECT Shift INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            WHEN 'Pin' THEN SELECT Pin INTO v_FieldValue FROM usr_users WHERE User = p_User LIMIT 1;\n            ELSE SET v_FieldValue = NULL;\n        END CASE;\n        \n        SELECT v_FieldValue as FieldValue;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Setting ', p_Field, ' retrieved successfully for user: ', p_User);\n    END IF;\nEND ;;"
      },
      {
        "Name": "usr_users_Get_All",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User",
          "Helper_UI_ComboBoxes"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_users_Get_All`(\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = 'Database error occurred while retrieving all users';\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users;\n    SELECT * FROM usr_users ORDER BY `Full Name`;\n    \n    SET p_Status = 0;\n    SET p_ErrorMsg = CONCAT('Retrieved ', v_Count, ' users successfully');\nEND ;;"
      },
      {
        "Name": "usr_users_Get_ByUser",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Control_Add_User",
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_users_Get_ByUser`(\n    IN p_User VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving user: ', p_User);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_User);\n        SELECT NULL as User, NULL as `Full Name`; \n    ELSE\n        SELECT * FROM usr_users WHERE User = p_User LIMIT 1;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('User retrieved successfully: ', p_User);\n    END IF;\nEND ;;"
      },
      {
        "Name": "usr_users_SetUserSetting_ByUserAndField",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Field",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Value",
            "DataType": "TEXT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_users_SetUserSetting_ByUserAndField`(\n    IN p_User VARCHAR(100), \n    IN p_Field VARCHAR(100), \n    IN p_Value TEXT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while setting ', p_Field, ' for user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    \n    IF v_Count = 0 THEN\n        \n        INSERT INTO usr_users (User, `Full Name`) \n        VALUES (p_User, p_User);\n    END IF;\n    \n    \n    CASE p_Field\n        WHEN 'LastShownVersion' THEN \n            UPDATE usr_users SET LastShownVersion = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'HideChangeLog' THEN \n            UPDATE usr_users SET HideChangeLog = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'Theme_Name' THEN \n            UPDATE usr_users SET Theme_Name = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'Theme_FontSize' THEN \n            UPDATE usr_users SET Theme_FontSize = CAST(p_Value AS UNSIGNED), ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'VisualUserName' THEN \n            UPDATE usr_users SET VisualUserName = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'VisualPassword' THEN \n            UPDATE usr_users SET VisualPassword = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'WipServerAddress' THEN \n            UPDATE usr_users SET WipServerAddress = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'WIPDatabase' THEN \n            UPDATE usr_users SET WIPDatabase = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'WipServerPort' THEN \n            UPDATE usr_users SET WipServerPort = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'FullName' THEN \n            UPDATE usr_users SET `Full Name` = p_Value WHERE User = p_User;\n        WHEN 'Shift' THEN \n            UPDATE usr_users SET Shift = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        WHEN 'Pin' THEN \n            UPDATE usr_users SET Pin = p_Value, ModifiedDate = NOW() WHERE User = p_User;\n        ELSE \n            SET p_Status = 1;\n            SET p_ErrorMsg = CONCAT('Unknown field: ', p_Field);\n            ROLLBACK;\n    END CASE;\n    \n    IF p_Status IS NULL THEN\n        SET v_RowsAffected = ROW_COUNT();\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Setting ', p_Field, ' updated successfully for user: ', p_User, ' (Rows affected: ', v_RowsAffected, ')');\n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "usr_users_Update_User",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_User",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_FullName",
            "DataType": "VARCHAR(200)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Shift",
            "DataType": "VARCHAR(50)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Pin",
            "DataType": "VARCHAR(20)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_VisualUserName",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_VisualPassword",
            "DataType": "VARCHAR(100)",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_users_Update_User`(\n    IN p_User VARCHAR(100),\n    IN p_FullName VARCHAR(200),\n    IN p_Shift VARCHAR(50),\n    IN p_Pin VARCHAR(20),\n    IN p_VisualUserName VARCHAR(100),\n    IN p_VisualPassword VARCHAR(100),\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    DECLARE v_RowsAffected INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while updating user: ', p_User);\n        ROLLBACK;\n    END;\n    \n    START TRANSACTION;\n    \n    \n    SELECT COUNT(*) INTO v_Count FROM usr_users WHERE User = p_User;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('User not found: ', p_User);\n        ROLLBACK;\n    ELSE\n        UPDATE usr_users \n        SET `Full Name` = p_FullName,\n            Shift = p_Shift,\n            Pin = p_Pin,\n            VisualUserName = p_VisualUserName,\n            VisualPassword = p_VisualPassword\n        WHERE User = p_User;\n        \n        SET v_RowsAffected = ROW_COUNT();\n        \n        IF v_RowsAffected > 0 THEN\n            SET p_Status = 0;\n            SET p_ErrorMsg = CONCAT('User updated successfully: ', p_User);\n        ELSE\n            SET p_Status = 2;\n            SET p_ErrorMsg = CONCAT('No changes made to user: ', p_User);\n        END IF;\n        \n        COMMIT;\n    END IF;\nEND ;;"
      },
      {
        "Name": "usr_user_roles_GetRoleId_ByUserId",
        "FilePath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Database\\UpdatedStoredProcedures\\stored_procedures_backup_20250813_203724.sql",
        "Parameters": [
          {
            "Name": "p_UserID",
            "DataType": "INT",
            "Direction": "IN",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_Status",
            "DataType": "INT",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          },
          {
            "Name": "p_ErrorMsg",
            "DataType": "VARCHAR(255)",
            "Direction": "OUT",
            "IsRequired": true,
            "DefaultValue": ""
          }
        ],
        "Purpose": "",
        "UsedByClasses": [
          "Dao_User"
        ],
        "Body": "CREATE DEFINER=`root`@`localhost` PROCEDURE `usr_user_roles_GetRoleId_ByUserId`(\n    IN p_UserID INT,\n    OUT p_Status INT,\n    OUT p_ErrorMsg VARCHAR(255)\n)\nBEGIN\n    DECLARE v_Count INT DEFAULT 0;\n    \n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\n    BEGIN\n        SET p_Status = -1;\n        SET p_ErrorMsg = CONCAT('Database error occurred while retrieving role for user ID: ', p_UserID);\n    END;\n    \n    SELECT COUNT(*) INTO v_Count FROM sys_user_roles WHERE UserID = p_UserID;\n    \n    IF v_Count = 0 THEN\n        SET p_Status = 1;\n        SET p_ErrorMsg = CONCAT('No role assignment found for user ID: ', p_UserID);\n        SELECT NULL as RoleID;\n    ELSE\n        SELECT RoleID FROM sys_user_roles WHERE UserID = p_UserID LIMIT 1;\n        SET p_Status = 0;\n        SET p_ErrorMsg = CONCAT('Role retrieved successfully for user ID: ', p_UserID);\n    END IF;\nEND ;;"
      }
    ],
    "Relationships": [],
    "Configuration": {
      "ServerAddress": "172.16.1.104",
      "DatabaseName": "mtm_wip_application",
      "Version": "MySQL 5.7.24+",
      "ConnectionSettings": {
        "Environment": "Production/Debug Auto-Detection",
        "ConnectionMethod": "Helper_Database_Variables.GetConnectionString()"
      }
    },
    "DatabaseMetrics": {
      "TotalStoredProcedures": 282,
      "TotalTables": 17,
      "TotalRelationships": 0,
      "AnalysisTimestamp": "2025-08-16T17:49:39.2156532-05:00"
    }
  },
  "BusinessLogicAnalysis": {
    "Classes": [
      {
        "Name": "Dao_ErrorLog",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Data\\Dao_ErrorLog.cs",
        "Namespace": "",
        "BaseClass": "",
        "Interfaces": [],
        "Methods": [
          "GetUniqueErrorsAsync",
          "GetAllErrorsAsync",
          "GetErrorsByUserAsync",
          "GetErrorsByDateRangeAsync",
          "GetErrorsByStoredProcedureAsync",
          "DeleteErrorByIdAsync",
          "DeleteAllErrorsAsync",
          "ExecuteStoredProcedureNonQueryAsync",
          "ShouldShowErrorMessage",
          "ShouldShowSqlErrorMessage",
          "HandleException_SQLError_CloseApp",
          "HandleException_GeneralError_CloseApp",
          "LogErrorToDatabaseAsync",
          "GetUniqueErrors",
          "LogErrorWithMethod"
        ],
        "Properties": [],
        "Fields": [
          "_lastErrorMessage",
          "_lastErrorTime",
          "ErrorMessageCooldown",
          "_lastSqlErrorMessage",
          "_lastSqlErrorTime",
          "SqlErrorMessageCooldown"
        ],
        "Purpose": "",
        "Category": "DAO"
      },
      {
        "Name": "Dao_History",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Data\\Dao_History.cs",
        "Namespace": "",
        "BaseClass": "",
        "Interfaces": [],
        "Methods": [
          "AddTransactionHistoryAsync"
        ],
        "Properties": [],
        "Fields": [],
        "Purpose": "",
        "Category": "DAO"
      },
      {
        "Name": "Dao_Inventory",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Data\\Dao_Inventory.cs",
        "Namespace": "",
        "BaseClass": "",
        "Interfaces": [],
        "Methods": [
          "GetInventoryByPartIdAsync",
          "GetInventoryByPartIdAndOperationAsync",
          "AddInventoryItemAsync",
          "RemoveInventoryItemsFromDataGridViewAsync",
          "RemoveInventoryItemAsync",
          "TransferPartSimpleAsync",
          "TransferInventoryQuantityAsync",
          "FixBatchNumbersAsync"
        ],
        "Properties": [],
        "Fields": [],
        "Purpose": "",
        "Category": "DAO"
      },
      {
        "Name": "Dao_ItemType",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Data\\Dao_ItemType.cs",
        "Namespace": "",
        "BaseClass": "",
        "Interfaces": [],
        "Methods": [
          "DeleteItemType",
          "InsertItemType",
          "UpdateItemType",
          "GetAllItemTypes",
          "GetItemTypeByName",
          "ItemTypeExists"
        ],
        "Properties": [],
        "Fields": [],
        "Purpose": "",
        "Category": "DAO"
      },
      {
        "Name": "Dao_Location",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Data\\Dao_Location.cs",
        "Namespace": "",
        "BaseClass": "",
        "Interfaces": [],
        "Methods": [
          "DeleteLocation",
          "InsertLocation",
          "UpdateLocation",
          "GetAllLocations",
          "GetLocationByName",
          "LocationExists"
        ],
        "Properties": [],
        "Fields": [],
        "Purpose": "",
        "Category": "DAO"
      },
      {
        "Name": "Dao_Operation",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Data\\Dao_Operation.cs",
        "Namespace": "",
        "BaseClass": "",
        "Interfaces": [],
        "Methods": [
          "DeleteOperation",
          "InsertOperation",
          "UpdateOperation",
          "GetAllOperations",
          "GetOperationByNumber",
          "OperationExists"
        ],
        "Properties": [],
        "Fields": [],
        "Purpose": "",
        "Category": "DAO"
      },
      {
        "Name": "Dao_Part",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Data\\Dao_Part.cs",
        "Namespace": "",
        "BaseClass": "",
        "Interfaces": [],
        "Methods": [
          "DeletePart",
          "InsertPart",
          "UpdatePart",
          "GetAllParts",
          "GetPartByNumber",
          "PartExists",
          "GetPartTypes",
          "AddPartWithStoredProcedure",
          "UpdatePartWithStoredProcedure"
        ],
        "Properties": [],
        "Fields": [],
        "Purpose": "",
        "Category": "DAO"
      },
      {
        "Name": "Dao_QuickButtons",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Data\\Dao_QuickButtons.cs",
        "Namespace": "MTM_Inventory_Application.Data",
        "BaseClass": "",
        "Interfaces": [],
        "Methods": [
          "UpdateQuickButtonAsync",
          "RemoveQuickButtonAndShiftAsync",
          "AddQuickButtonAsync",
          "MoveQuickButtonAsync",
          "DeleteAllQuickButtonsForUserAsync",
          "AddOrShiftQuickButtonAsync",
          "RemoveAndShiftQuickButtonAsync",
          "AddQuickButtonAtPositionAsync"
        ],
        "Properties": [],
        "Fields": [],
        "Purpose": "",
        "Category": "DAO"
      },
      {
        "Name": "Dao_System",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Data\\Dao_System.cs",
        "Namespace": "",
        "BaseClass": "",
        "Interfaces": [],
        "Methods": [
          "SetUserAccessTypeAsync",
          "System_GetUserName",
          "System_UserAccessTypeAsync",
          "GetUserIdByNameAsync",
          "GetRoleIdByNameAsync",
          "HandleSystemDaoExceptionAsync"
        ],
        "Properties": [],
        "Fields": [],
        "Purpose": "",
        "Category": "DAO"
      },
      {
        "Name": "Dao_Transactions",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Data\\Dao_Transactions.cs",
        "Namespace": "",
        "BaseClass": "",
        "Interfaces": [],
        "Methods": [
          "SearchTransactionsAsync",
          "SearchTransactions",
          "SmartSearchAsync",
          "GetTransactionAnalyticsAsync",
          "MapTransactionFromDataRow"
        ],
        "Properties": [],
        "Fields": [],
        "Purpose": "/// Data access object for transaction operations\r\n///",
        "Category": "DAO"
      },
      {
        "Name": "Dao_User",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Data\\Dao_User.cs",
        "Namespace": "MTM_Inventory_Application.Data",
        "BaseClass": "",
        "Interfaces": [],
        "Methods": [
          "GetLastShownVersionAsync",
          "SetLastShownVersionAsync",
          "GetHideChangeLogAsync",
          "SetHideChangeLogAsync",
          "GetThemeNameAsync",
          "GetThemeFontSizeAsync",
          "SetThemeFontSizeAsync",
          "GetVisualUserNameAsync",
          "SetVisualUserNameAsync",
          "GetVisualPasswordAsync",
          "SetVisualPasswordAsync",
          "GetWipServerAddressAsync",
          "SetWipServerAddressAsync",
          "GetDatabaseAsync",
          "SetDatabaseAsync",
          "GetWipServerPortAsync",
          "SetWipServerPortAsync",
          "GetUserFullNameAsync",
          "GetSettingsJsonAsync",
          "SetSettingsJsonAsync",
          "SetGridViewSettingsJsonAsync",
          "GetGridViewSettingsJsonAsync",
          "SetUserSettingAsync",
          "DeleteUserSettingsAsync",
          "InsertUserAsync",
          "UpdateUserAsync",
          "DeleteUserAsync",
          "GetAllUsersAsync",
          "GetUserByUsernameAsync",
          "UserExistsAsync",
          "GetShortcutsJsonAsync",
          "SetShortcutsJsonAsync",
          "SetThemeNameAsync",
          "AddUserRoleAsync",
          "GetUserRoleIdAsync",
          "SetUserRoleAsync",
          "SetUsersRoleAsync",
          "RemoveUserRoleAsync"
        ],
        "Properties": [],
        "Fields": [],
        "Purpose": "",
        "Category": "DAO"
      }
    ],
    "Services": [
      {
        "Name": "Service_AnalysisFormatter",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Services\\Service_AnalysisFormatter.cs",
        "PublicMethods": [
          "ExportToJsonAsync",
          "SaveToJsonFileAsync",
          "ExportToMarkdownAsync",
          "SaveToMarkdownFileAsync",
          "ExportToHtmlAsync",
          "SaveToHtmlFileAsync",
          "ExportSummaryAsync"
        ],
        "Dependencies": [
          "System.Text",
          "Newtonsoft.Json",
          "MTM_Inventory_Application.Data",
          "MTM_Inventory_Application.Logging",
          "MTM_Inventory_Application.Models"
        ],
        "Purpose": "/// Service for formatting and exporting application analysis results\r\n    /// Supports multiple output formats for MAUI migration planning\r\n    ///"
      },
      {
        "Name": "Service_ApplicationAnalyzer",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Services\\Service_ApplicationAnalyzer.cs",
        "PublicMethods": [
          "AnalyzeApplicationAsync"
        ],
        "Dependencies": [
          "System.Reflection",
          "System.Text",
          "System.Text.RegularExpressions",
          "Microsoft.CodeAnalysis",
          "Microsoft.CodeAnalysis.CSharp",
          "Microsoft.CodeAnalysis.CSharp.Syntax",
          "MTM_Inventory_Application.Data",
          "MTM_Inventory_Application.Helpers",
          "MTM_Inventory_Application.Logging",
          "MTM_Inventory_Application.Models",
          "MTM_Inventory_Application.Services"
        ],
        "Purpose": ""
      },
      {
        "Name": "Service_ConnectionRecoveryManager",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Services\\Service_ConnectionRecoveryManager.cs",
        "PublicMethods": [
          "HandleConnectionLost",
          "HandleConnectionRestored",
          "UpdateConnectionStrengthAsync"
        ],
        "Dependencies": [
          "System.Media",
          "MTM_Inventory_Application.Controls.Addons",
          "MTM_Inventory_Application.Core",
          "MTM_Inventory_Application.Forms.MainForm",
          "MTM_Inventory_Application.Helpers",
          "MySql.Data.MySqlClient",
          "System.Windows.Forms.Timer"
        ],
        "Purpose": "/// Service for managing database connection recovery and monitoring\r\n    ///"
      },
      {
        "Name": "Service_DebugConfiguration",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Services\\Service_DebugConfiguration.cs",
        "PublicMethods": [
          "InitializeDefaults",
          "IsComponentTracingEnabled",
          "GetComponentLevel",
          "SetComponentTracing",
          "SetComponentLevel",
          "SetDevelopmentMode",
          "SetProductionMode",
          "SetDatabaseTroubleshootingMode",
          "GetCurrentStatus",
          "LogCurrentStatus"
        ],
        "Dependencies": [
          "System",
          "System.Collections.Generic",
          "MTM_Inventory_Application.Models"
        ],
        "Purpose": "/// Debug configuration management for comprehensive application tracing\r\n/// Provides centralized control over what debugging information is captured\r\n///"
      },
      {
        "Name": "Service_DebugTracer",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Services\\Service_DebugTracer.cs",
        "PublicMethods": [
          "Initialize",
          "TraceMethodEntry",
          "TraceMethodExit",
          "TraceDatabaseStart",
          "TraceDatabaseComplete",
          "TraceStoredProcedure",
          "TraceBusinessLogic",
          "TraceDataValidation",
          "TraceUIAction",
          "StartPerformanceTrace",
          "StopPerformanceTrace"
        ],
        "Dependencies": [
          "System",
          "System.Collections.Generic",
          "System.Diagnostics",
          "System.Linq",
          "System.Runtime.CompilerServices",
          "System.Text",
          "System.Text.Json",
          "System.Threading.Tasks",
          "MTM_Inventory_Application.Logging",
          "MTM_Inventory_Application.Models"
        ],
        "Purpose": "/// Comprehensive debugging and tracing service for MTM Inventory Application\r\n/// Provides detailed logging of actions, variables, data flow, and business logic execution\r\n///"
      },
      {
        "Name": "Service_ErrorHandler",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Services\\Service_ErrorHandler.cs",
        "PublicMethods": [
          "HandleException",
          "HandleDatabaseError",
          "HandleValidationError",
          "HandleUnauthorizedAccess",
          "HandleFileError",
          "HandleNetworkError",
          "ShowConfirmation",
          "ShowWarning",
          "ShowInformation",
          "HandleDatabaseError",
          "HandleGeneralException",
          "HandleUnauthorizedAccessException"
        ],
        "Dependencies": [
          "System",
          "System.Collections.Generic",
          "System.Diagnostics",
          "System.Linq",
          "System.Runtime.CompilerServices",
          "System.Threading.Tasks",
          "System.Windows.Forms",
          "MTM_Inventory_Application.Forms.ErrorDialog",
          "MTM_Inventory_Application.Forms.MainForm",
          "MTM_Inventory_Application.Logging",
          "MTM_Inventory_Application.Models"
        ],
        "Purpose": ""
      },
      {
        "Name": "Service_MAUIMigrationAssessment",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Services\\Service_MAUIMigrationAssessment.cs",
        "PublicMethods": [
          "GenerateAllQuestions",
          "CalculateResults"
        ],
        "Dependencies": [
          "System.ComponentModel",
          "System.Reflection",
          "MTM_Inventory_Application.Logging",
          "MTM_Inventory_Application.Models"
        ],
        "Purpose": "/// Service for conducting MAUI Migration Assessment\r\n    /// Provides questionnaire generation, scoring, and recommendations\r\n    ///"
      },
      {
        "Name": "Service_OnStartup_AppDataCleaner",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Services\\Service_OnStartup_AppDataCleaner.cs",
        "PublicMethods": [
          "DeleteDirectoryContents",
          "WipeAppDataFolders"
        ],
        "Dependencies": [
          "MTM_Inventory_Application.Logging"
        ],
        "Purpose": ""
      },
      {
        "Name": "Service_Onstartup_StartupSplashApplicationContext",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Services\\Service_OnStartup_StartupSplashApplicationContext.cs",
        "PublicMethods": [],
        "Dependencies": [
          "MTM_Inventory_Application.Controls.MainForm",
          "MTM_Inventory_Application.Core",
          "MTM_Inventory_Application.Data",
          "MTM_Inventory_Application.Forms.MainForm",
          "MTM_Inventory_Application.Forms.Splash",
          "MTM_Inventory_Application.Helpers",
          "MTM_Inventory_Application.Logging",
          "MTM_Inventory_Application.Models",
          "MySql.Data.MySqlClient"
        ],
        "Purpose": ""
      },
      {
        "Name": "Service_RepoComplianceFormatter",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Services\\Service_RepoComplianceFormatter.cs",
        "PublicMethods": [
          "SaveToMarkdownFileAsync",
          "SaveToJsonFileAsync",
          "ToMarkdown",
          "ToJson"
        ],
        "Dependencies": [
          "System.Text",
          "System.Text.Json",
          "MTM_Inventory_Application.Models",
          "MTM_Inventory_Application.Logging"
        ],
        "Purpose": ""
      },
      {
        "Name": "Service_RepoComplianceScanner",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Services\\Service_RepoComplianceScanner.cs",
        "PublicMethods": [
          "ScanAsync"
        ],
        "Dependencies": [
          "System.Collections.Concurrent",
          "System.Text",
          "System.Text.Json",
          "System.Text.RegularExpressions",
          "Microsoft.CodeAnalysis",
          "Microsoft.CodeAnalysis.CSharp",
          "MTM_Inventory_Application.Helpers",
          "MTM_Inventory_Application.Logging",
          "MTM_Inventory_Application.Models"
        ],
        "Purpose": ""
      },
      {
        "Name": "Service_Timer_VersionChecker",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Services\\Service_Timer_VersionChecker.cs",
        "PublicMethods": [
          "Initialize",
          "VersionChecker",
          "Stop"
        ],
        "Dependencies": [
          "System.Diagnostics",
          "System.Timers",
          "MTM_Inventory_Application.Controls.MainForm",
          "MTM_Inventory_Application.Forms.MainForm",
          "MTM_Inventory_Application.Helpers",
          "MTM_Inventory_Application.Logging",
          "MTM_Inventory_Application.Models",
          "System.Timers.Timer"
        ],
        "Purpose": "/// Version checking service that periodically checks database for version information\r\n    /// Updated: August 10, 2025 - Compatible with uniform parameter naming system\r\n    ///"
      }
    ],
    "Helpers": [
      {
        "Name": "Helper_Control_MySqlSignal",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Helpers\\Helper_Control_MySqlSignal.cs",
        "UtilityMethods": [
          "GetStrengthAsync"
        ],
        "Category": "Helper",
        "Purpose": ""
      },
      {
        "Name": "Helper_Database_StoredProcedure",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Helpers\\Helper_Database_StoredProcedure.cs",
        "UtilityMethods": [
          "ExecuteDataTableWithStatus",
          "ExecuteReader",
          "ExecuteScalarWithStatus",
          "ExecuteNonQueryWithStatus",
          "ExecuteWithCustomOutput",
          "GetUserFriendlyConnectionError",
          "IsConnectionRelatedError",
          "GetConnectionErrorMessage"
        ],
        "Category": "Helper",
        "Purpose": "/// Enhanced database helper for stored procedures with comprehensive status reporting\r\n    /// UPDATED: August 10, 2025 - UNIFORM PARAMETER NAMING (WITH p_ prefixes)\r\n    /// UPDATED: January 27, 2025 - Enhanced MySQL connection error handling\r\n    ///"
      },
      {
        "Name": "Helper_Database_Variables",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Helpers\\Helper_Database_Variables.cs",
        "UtilityMethods": [
          "GetConnectionString",
          "GetLogFilePathAsync",
          "GetLogFilePath"
        ],
        "Category": "Helper",
        "Purpose": ""
      },
      {
        "Name": "Helper_StoredProcedureProgress",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Helpers\\Helper_StoredProcedureProgress.cs",
        "UtilityMethods": [
          "ShowProgress",
          "UpdateProgress",
          "ShowError",
          "ShowSuccess",
          "HideProgress",
          "UpdateStatus",
          "ResetErrorState",
          "ProcessStoredProcedureResult",
          "ThreadSafeInvoke",
          "Create"
        ],
        "Category": "Helper",
        "Purpose": "/// Enhanced progress reporting system with visual error feedback for stored procedures\r\n    /// Provides success/failure status reporting with red progress bars on errors\r\n    ///"
      },
      {
        "Name": "Helper_UI_ComboBoxes",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Helpers\\Helper_UI_ComboBoxes.cs",
        "UtilityMethods": [
          "SetupPartDataTable",
          "SetupOperationDataTable",
          "SetupLocationDataTable",
          "SetupUserDataTable",
          "SetupItemTypeDataTable",
          "FillPartComboBoxesAsync",
          "FillOperationComboBoxesAsync",
          "FillLocationComboBoxesAsync",
          "FillUserComboBoxesAsync",
          "FillItemTypeComboBoxesAsync",
          "FillComboBoxAsync",
          "SetupDataTables",
          "ResetAndRefreshAllDataTablesAsync",
          "UnbindAllComboBoxDataSourcesAsync",
          "ValidateComboBoxItem",
          "ApplyStandardComboBoxProperties",
          "DeselectAllComboBoxText",
          "DeselectAllComboBoxText",
          "ReloadAllTabComboBoxesAsync"
        ],
        "Category": "Helper",
        "Purpose": ""
      },
      {
        "Name": "Helper_UI_Shortcuts",
        "FullPath": "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Helpers\\Helper_UI_Shortcuts.cs",
        "UtilityMethods": [
          "ToShortcutString",
          "FromShortcutString",
          "GetShortcutDictionary",
          "ApplyShortcutFromDictionary",
          "UpdateMainFormTabShortcuts"
        ],
        "Category": "Helper",
        "Purpose": ""
      }
    ],
    "DataAccessPatterns": [],
    "BusinessLogicMetrics": {
      "TotalClasses": 11,
      "TotalServices": 12,
      "TotalHelpers": 6,
      "TotalDataAccessPatterns": 0,
      "AnalysisTimestamp": "2025-08-16T17:49:39.3655783-05:00"
    }
  },
  "ThemingAnalysis": {
    "ThemeFiles": [
      {
        "Name": "Core_Themes.cs",
        "FullPath": "",
        "ThemeMethods": [
          "ApplyTheme",
          "GetUserThemeColorsAsync",
          "ApplyThemeToDataGridView",
          "ApplyDpiScaling",
          "ApplyDpiScaling",
          "HandleDpiChanged",
          "RefreshDpiScalingForAllForms",
          "ApplyDpiScalingToControlHierarchy",
          "GetCurrentDpiScale",
          "HandleDpiChangedForControlHierarchy",
          "SetFormTheme",
          "LogControlColor",
          "DimColor",
          "Control_EnabledChanged_ThemeRefresh",
          "ApplyThemeToControls",
          "ApplyBaseThemeColors",
          "ApplyControlSpecificTheme",
          "ApplyQuickButtonsTheme",
          "ApplyAdvancedInventoryTheme",
          "ApplyAdvancedRemoveTheme",
          "ApplyConnectionStrengthTheme",
          "ApplyInventoryTabTheme",
          "ApplyRemoveTabTheme",
          "ApplyTransferTabTheme",
          "ApplyCustomControlTheme",
          "ApplyOwnerDrawThemes",
          "ApplyButtonTheme",
          "ApplyTabControlTheme",
          "ApplyTabPageTheme",
          "ApplyTextBoxTheme",
          "ApplyMaskedTextBoxTheme",
          "ApplyRichTextBoxTheme",
          "ApplyComboBoxTheme",
          "ComboBox_Theme_SelectedIndexChanged",
          "ApplyListBoxTheme",
          "ApplyCheckedListBoxTheme",
          "ApplyLabelTheme",
          "ApplyRadioButtonTheme",
          "ApplyCheckBoxTheme",
          "ApplyTreeViewTheme",
          "ApplyListViewTheme",
          "ApplyMenuStripTheme",
          "ApplyStatusStripTheme",
          "ApplyToolStripTheme",
          "ApplyGroupBoxTheme",
          "ApplyPanelTheme",
          "ApplySplitContainerTheme",
          "ApplyFlowLayoutPanelTheme",
          "ApplyTableLayoutPanelTheme",
          "ApplyDateTimePickerTheme",
          "ApplyMonthCalendarTheme",
          "ApplyNumericUpDownTheme",
          "ApplyTrackBarTheme",
          "ApplyProgressBarTheme",
          "ApplyProgressBarUserControlTheme",
          "ApplyHScrollBarTheme",
          "ApplyVScrollBarTheme",
          "ApplyPictureBoxTheme",
          "ApplyPropertyGridTheme",
          "ApplyDomainUpDownTheme",
          "ApplyWebBrowserTheme",
          "ApplyUserControlTheme",
          "ApplyLinkLabelTheme",
          "ApplyContextMenuTheme",
          "ApplyThemeToDataGridView",
          "ApplyOwnerDrawTheme",
          "AttachLinkLabelHoverColor",
          "ApplyDataGridViewBorderColor",
          "GetControlThemeBackColor",
          "GetControlThemeForeColor",
          "LoadAndSetUserThemeNameAsync",
          "LoadThemesFromDatabaseAsync",
          "GetThemeNames",
          "GetCurrentTheme",
          "GetTheme",
          "GetEffectiveThemeName",
          "InitializeThemeSystemAsync",
          "CreateDefaultThemes",
          "ApplyThemeToDataGridViewWithUserSettingsAsync"
        ],
        "ThemeProperties": {},
        "Purpose": "/// Core theming system that provides comprehensive DPI scaling and UI responsiveness.\r\n    /// \r\n    /// This class handles:\r\n    /// 1. Runtime DPI scaling for all forms and controls (per Telerik WinForms DPI scaling article)\r\n    /// 2. Async/await UI responsiveness improvements (per Grant Winney async WinForms article)\r\n    /// 3. Theme application with proper color handling\r\n    /// 4. Runtime layout adjustments moved from designer files\r\n    /// 5. Dynamic DPI change handling for multi-monitor scenarios\r\n    /// \r\n    /// Key Features:\r\n    /// - AutoScaleMode.Dpi set on all forms and controls for proper DPI scaling\r\n    /// - Runtime margin/padding adjustments for TableLayoutPanel, GroupBox, Panel\r\n    /// - SplitContainer distance calculations based on DPI scale\r\n    /// - Event-driven DPI change handling for monitor switching\r\n    /// - Comprehensive control hierarchy traversal for complete coverage\r\n    /// \r\n    /// References:\r\n    /// - https://www.telerik.com/blogs/winforms-scaling-at-large-dpi-settings-is-it-even-possible-\r\n    /// - https://grantwinney.com/using-async-await-and-task-to-keep-the-winforms-ui-more-responsive/\r\n    ///"
      }
    ],
    "StylePatterns": [],
    "DpiScaling": {
      "IsEnabled": true,
      "ScalingMethods": [
        "Core_Themes.ApplyDpiScaling"
      ],
      "ScalingProperties": {}
    },
    "ThemeConstants": {
      "GetEffectiveThemeName": ""
    },
    "ThemingMetrics": {
      "TotalThemeFiles": 1,
      "TotalStylePatterns": 0,
      "DpiScalingEnabled": true,
      "AnalysisTimestamp": "2025-08-16T17:49:39.3936414-05:00"
    }
  },
  "ErrorHandlingAnalysis": {
    "ErrorHandlers": [
      {
        "Name": "Service_ErrorHandler",
        "FullPath": "",
        "HandledExceptions": [
          "HandleException",
          "HandleDatabaseError",
          "ShowWarning",
          "ShowConfirmation",
          "ShowInformation"
        ],
        "Methods": [],
        "Purpose": "Centralized error handling service"
      }
    ],
    "ExceptionPatterns": [
      {
        "PatternName": "Global UI ThreadException",
        "Description": "Application.ThreadException handler",
        "Examples": [],
        "Usage": "Global"
      },
      {
        "PatternName": "Global UnhandledException",
        "Description": "AppDomain.CurrentDomain.UnhandledException handler",
        "Examples": [],
        "Usage": "Global"
      }
    ],
    "LoggingConfiguration": {
      "LoggingFramework": "LoggingUtility",
      "LogLevels": [
        "Info",
        "Warning",
        "Error",
        "Debug"
      ],
      "LogTargets": [
        "File",
        "Console"
      ],
      "Configuration": {}
    },
    "ErrorHandlingMetrics": {
      "TotalErrorHandlers": 1,
      "TotalExceptionPatterns": 2,
      "LoggingConfigured": true,
      "AnalysisTimestamp": "2025-08-16T17:49:39.4000433-05:00"
    }
  },
  "EnvironmentAnalysis": {
    "Configuration": {
      "AppSettings": {
        "TargetFramework": ".NET 8"
      },
      "ConnectionStrings": {},
      "ConfigurationFiles": [
        "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\.vs\\VSWorkspaceState.json",
        "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\Properties\\launchSettings.json",
        "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\.vs\\MTM_WIP_Application\\v17\\DocumentLayout.backup.json",
        "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\.vs\\MTM_WIP_Application\\v17\\DocumentLayout.json",
        "C:\\Users\\johnk\\source\\repos\\MTM_WIP_Application\\.vs\\MTM_WIP_Application\\config\\applicationhost.config"
      ]
    },
    "Dependencies": [
      {
        "Name": "MySql.Data",
        "Version": "",
        "Type": "NuGet",
        "Purpose": "Referenced by application"
      },
      {
        "Name": "Microsoft.Web.WebView2",
        "Version": "",
        "Type": "NuGet",
        "Purpose": "Referenced by application"
      },
      {
        "Name": "ClosedXML",
        "Version": "",
        "Type": "NuGet",
        "Purpose": "Referenced by application"
      },
      {
        "Name": "Newtonsoft.Json",
        "Version": "",
        "Type": "NuGet",
        "Purpose": "Referenced by application"
      }
    ],
    "Deployment": {
      "DeploymentType": "Windows Forms Desktop",
      "RequiredFiles": [
        "MySql.Data.dll",
        "Microsoft.Web.WebView2.Core.dll"
      ],
      "EnvironmentSettings": {}
    },
    "EnvironmentMetrics": {
      "TotalDependencies": 4,
      "ConfigurationFilesCount": 5,
      "AnalysisTimestamp": "2025-08-16T17:49:39.4274567-05:00"
    }
  }
}
